@charset "UTF-8";
/*
 * Table of contents   Содержание
 *
 *  0. Imports
 *  1. General Vars, Mixins, Extends

 *  14.
 *
 */
/*
Move 
/font-awesome/css
/font-awesome/webfonts
to
/fonts/
*/
/*
 * 1. Import url (form DNS)
 * 2. Font-face mixin
 * 3. Adding by Font-face
 *
*/
@font-face {
  font-family: "myfont";
  src: url("fonts/myfont.eot?") format("eot"), url("fonts/myfont.woff2") format("woff2"), url("fonts/myfont.woff") format("woff"), url("fonts/myfont.ttf") format("truetype"), url("fonts/myfont.svg#myfont") format("svg"); }

/*
* Options
* 1. Structure elements 
* 2. Modules display
* 3. Columns
* 4. Auxiliary elements
* 5. Collapse 
* 6. Responsive utilites
* 7. Text utulites
* 8. SCSS utulites
*   8.1 Functions
*   8.1 Mixins
*/
/*
Add $columns gap in devices for each device,
in all slectors where using $columns_gap use column gap from devices
in default $devices add global $columns_gap
*/
/* Options: */
@media (min-width: 320px) {
  .container {
    padding-left: 15px;
    padding-right: 15px; }
  .row,
  .row-line,
  .row-flex {
    margin-left: -15px;
    margin-right: -15px; }
  [class*="mv_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="mh_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="tb_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="ds_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="hd_"] {
    padding-left: 15px;
    padding-right: 15px; } }

@media (min-width: 576px) {
  .container {
    padding-left: 15px;
    padding-right: 15px; }
  .row,
  .row-line,
  .row-flex {
    margin-left: -15px;
    margin-right: -15px; }
  [class*="mv_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="mh_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="tb_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="ds_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="hd_"] {
    padding-left: 15px;
    padding-right: 15px; } }

@media (min-width: 768px) {
  .container {
    padding-left: 15px;
    padding-right: 15px; }
  .row,
  .row-line,
  .row-flex {
    margin-left: -15px;
    margin-right: -15px; }
  [class*="mv_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="mh_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="tb_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="ds_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="hd_"] {
    padding-left: 15px;
    padding-right: 15px; } }

@media (min-width: 1024px) {
  .container {
    padding-left: 15px;
    padding-right: 15px; }
  .row,
  .row-line,
  .row-flex {
    margin-left: -15px;
    margin-right: -15px; }
  [class*="mv_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="mh_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="tb_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="ds_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="hd_"] {
    padding-left: 15px;
    padding-right: 15px; } }

@media (min-width: 1440px) {
  .container {
    padding-left: 15px;
    padding-right: 15px; }
  .row,
  .row-line,
  .row-flex {
    margin-left: -15px;
    margin-right: -15px; }
  [class*="mv_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="mh_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="tb_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="ds_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="hd_"] {
    padding-left: 15px;
    padding-right: 15px; } }

/* 1. Structure elements */
.section {
  float: left;
  width: 100%;
  clear: both; }

.container {
  max-width: 1400px;
  margin: 0 auto;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  position: relative; }

.container-elastic {
  max-width: none; }

/* 2. Modules display */
/*
Modules have:
    vertical aligment ( .middle, etc.. )
    reverse order ( .row-reverse )
*/
/* Block  model */
.row > div {
  float: left; }

.row.reverse > div,
.row.row-reverse > div {
  float: right; }

/* Inline-block  model */
/* Flex  model */
.row-flex {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap; }

.row-flexbox {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex; }

[class*=row-flex].middle {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center; }

[class*=row-flex].top {
  -webkit-box-align: start;
      -ms-flex-align: start;
          align-items: flex-start; }

[class*=row-flex].bottom {
  -webkit-box-align: end;
      -ms-flex-align: end;
          align-items: flex-end; }

[class*=row-flex].baseline {
  -webkit-box-align: baseline;
      -ms-flex-align: baseline;
          align-items: baseline; }

[class*=row-flex].stretch {
  -webkit-box-align: stretch;
      -ms-flex-align: stretch;
          align-items: stretch; }

.row-flex.row-reverse,
.row-flex.reverse {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: reverse;
      -ms-flex-direction: row-reverse;
          flex-direction: row-reverse; }

/* 3. Columns */
/* 3. Columns v.2 */
[class*="mv_"], [class*="mh_"], [class*="tb_"], [class*="ds_"], [class*="hd_"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  position: relative;
  min-height: 1px; }

@media (min-width: 320px) {
  .mv_offset_0 {
    margin-left: 0; }
  .mv_1 {
    width: 8.33333%; }
  .mv_offset_1 {
    margin-left: 8.33333%; }
  .mv_2 {
    width: 16.66667%; }
  .mv_offset_2 {
    margin-left: 16.66667%; }
  .mv_3 {
    width: 25%; }
  .mv_offset_3 {
    margin-left: 25%; }
  .mv_4 {
    width: 33.33333%; }
  .mv_offset_4 {
    margin-left: 33.33333%; }
  .mv_5 {
    width: 41.66667%; }
  .mv_offset_5 {
    margin-left: 41.66667%; }
  .mv_6 {
    width: 50%; }
  .mv_offset_6 {
    margin-left: 50%; }
  .mv_7 {
    width: 58.33333%; }
  .mv_offset_7 {
    margin-left: 58.33333%; }
  .mv_8 {
    width: 66.66667%; }
  .mv_offset_8 {
    margin-left: 66.66667%; }
  .mv_9 {
    width: 75%; }
  .mv_offset_9 {
    margin-left: 75%; }
  .mv_10 {
    width: 83.33333%; }
  .mv_offset_10 {
    margin-left: 83.33333%; }
  .mv_11 {
    width: 91.66667%; }
  .mv_offset_11 {
    margin-left: 91.66667%; }
  .mv_12 {
    width: 100%; }
  .mv_offset_12 {
    margin-left: 100%; }
  .mv_order_1 {
    -webkit-box-ordinal-group: 2;
        -ms-flex-order: 1;
            order: 1; }
  .mv_order_2 {
    -webkit-box-ordinal-group: 3;
        -ms-flex-order: 2;
            order: 2; }
  .mv_order_3 {
    -webkit-box-ordinal-group: 4;
        -ms-flex-order: 3;
            order: 3; }
  .mv_order_4 {
    -webkit-box-ordinal-group: 5;
        -ms-flex-order: 4;
            order: 4; }
  .mv_order_5 {
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5; }
  .mv_order_6 {
    -webkit-box-ordinal-group: 7;
        -ms-flex-order: 6;
            order: 6; }
  .mv_order_7 {
    -webkit-box-ordinal-group: 8;
        -ms-flex-order: 7;
            order: 7; }
  .mv_order_8 {
    -webkit-box-ordinal-group: 9;
        -ms-flex-order: 8;
            order: 8; }
  .mv_order_9 {
    -webkit-box-ordinal-group: 10;
        -ms-flex-order: 9;
            order: 9; }
  .mv_order_10 {
    -webkit-box-ordinal-group: 11;
        -ms-flex-order: 10;
            order: 10; }
  .mv_order_11 {
    -webkit-box-ordinal-group: 12;
        -ms-flex-order: 11;
            order: 11; }
  .mv_order_12 {
    -webkit-box-ordinal-group: 13;
        -ms-flex-order: 12;
            order: 12; } }

@media (min-width: 576px) {
  .mh_offset_0 {
    margin-left: 0; }
  .mh_1 {
    width: 8.33333%; }
  .mh_offset_1 {
    margin-left: 8.33333%; }
  .mh_2 {
    width: 16.66667%; }
  .mh_offset_2 {
    margin-left: 16.66667%; }
  .mh_3 {
    width: 25%; }
  .mh_offset_3 {
    margin-left: 25%; }
  .mh_4 {
    width: 33.33333%; }
  .mh_offset_4 {
    margin-left: 33.33333%; }
  .mh_5 {
    width: 41.66667%; }
  .mh_offset_5 {
    margin-left: 41.66667%; }
  .mh_6 {
    width: 50%; }
  .mh_offset_6 {
    margin-left: 50%; }
  .mh_7 {
    width: 58.33333%; }
  .mh_offset_7 {
    margin-left: 58.33333%; }
  .mh_8 {
    width: 66.66667%; }
  .mh_offset_8 {
    margin-left: 66.66667%; }
  .mh_9 {
    width: 75%; }
  .mh_offset_9 {
    margin-left: 75%; }
  .mh_10 {
    width: 83.33333%; }
  .mh_offset_10 {
    margin-left: 83.33333%; }
  .mh_11 {
    width: 91.66667%; }
  .mh_offset_11 {
    margin-left: 91.66667%; }
  .mh_12 {
    width: 100%; }
  .mh_offset_12 {
    margin-left: 100%; }
  .mh_order_1 {
    -webkit-box-ordinal-group: 2;
        -ms-flex-order: 1;
            order: 1; }
  .mh_order_2 {
    -webkit-box-ordinal-group: 3;
        -ms-flex-order: 2;
            order: 2; }
  .mh_order_3 {
    -webkit-box-ordinal-group: 4;
        -ms-flex-order: 3;
            order: 3; }
  .mh_order_4 {
    -webkit-box-ordinal-group: 5;
        -ms-flex-order: 4;
            order: 4; }
  .mh_order_5 {
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5; }
  .mh_order_6 {
    -webkit-box-ordinal-group: 7;
        -ms-flex-order: 6;
            order: 6; }
  .mh_order_7 {
    -webkit-box-ordinal-group: 8;
        -ms-flex-order: 7;
            order: 7; }
  .mh_order_8 {
    -webkit-box-ordinal-group: 9;
        -ms-flex-order: 8;
            order: 8; }
  .mh_order_9 {
    -webkit-box-ordinal-group: 10;
        -ms-flex-order: 9;
            order: 9; }
  .mh_order_10 {
    -webkit-box-ordinal-group: 11;
        -ms-flex-order: 10;
            order: 10; }
  .mh_order_11 {
    -webkit-box-ordinal-group: 12;
        -ms-flex-order: 11;
            order: 11; }
  .mh_order_12 {
    -webkit-box-ordinal-group: 13;
        -ms-flex-order: 12;
            order: 12; } }

@media (min-width: 768px) {
  .tb_offset_0 {
    margin-left: 0; }
  .tb_1 {
    width: 8.33333%; }
  .tb_offset_1 {
    margin-left: 8.33333%; }
  .tb_2 {
    width: 16.66667%; }
  .tb_offset_2 {
    margin-left: 16.66667%; }
  .tb_3 {
    width: 25%; }
  .tb_offset_3 {
    margin-left: 25%; }
  .tb_4 {
    width: 33.33333%; }
  .tb_offset_4 {
    margin-left: 33.33333%; }
  .tb_5 {
    width: 41.66667%; }
  .tb_offset_5 {
    margin-left: 41.66667%; }
  .tb_6 {
    width: 50%; }
  .tb_offset_6 {
    margin-left: 50%; }
  .tb_7 {
    width: 58.33333%; }
  .tb_offset_7 {
    margin-left: 58.33333%; }
  .tb_8 {
    width: 66.66667%; }
  .tb_offset_8 {
    margin-left: 66.66667%; }
  .tb_9 {
    width: 75%; }
  .tb_offset_9 {
    margin-left: 75%; }
  .tb_10 {
    width: 83.33333%; }
  .tb_offset_10 {
    margin-left: 83.33333%; }
  .tb_11 {
    width: 91.66667%; }
  .tb_offset_11 {
    margin-left: 91.66667%; }
  .tb_12 {
    width: 100%; }
  .tb_offset_12 {
    margin-left: 100%; }
  .tb_order_1 {
    -webkit-box-ordinal-group: 2;
        -ms-flex-order: 1;
            order: 1; }
  .tb_order_2 {
    -webkit-box-ordinal-group: 3;
        -ms-flex-order: 2;
            order: 2; }
  .tb_order_3 {
    -webkit-box-ordinal-group: 4;
        -ms-flex-order: 3;
            order: 3; }
  .tb_order_4 {
    -webkit-box-ordinal-group: 5;
        -ms-flex-order: 4;
            order: 4; }
  .tb_order_5 {
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5; }
  .tb_order_6 {
    -webkit-box-ordinal-group: 7;
        -ms-flex-order: 6;
            order: 6; }
  .tb_order_7 {
    -webkit-box-ordinal-group: 8;
        -ms-flex-order: 7;
            order: 7; }
  .tb_order_8 {
    -webkit-box-ordinal-group: 9;
        -ms-flex-order: 8;
            order: 8; }
  .tb_order_9 {
    -webkit-box-ordinal-group: 10;
        -ms-flex-order: 9;
            order: 9; }
  .tb_order_10 {
    -webkit-box-ordinal-group: 11;
        -ms-flex-order: 10;
            order: 10; }
  .tb_order_11 {
    -webkit-box-ordinal-group: 12;
        -ms-flex-order: 11;
            order: 11; }
  .tb_order_12 {
    -webkit-box-ordinal-group: 13;
        -ms-flex-order: 12;
            order: 12; } }

@media (min-width: 1024px) {
  .ds_offset_0 {
    margin-left: 0; }
  .ds_1 {
    width: 8.33333%; }
  .ds_offset_1 {
    margin-left: 8.33333%; }
  .ds_2 {
    width: 16.66667%; }
  .ds_offset_2 {
    margin-left: 16.66667%; }
  .ds_3 {
    width: 25%; }
  .ds_offset_3 {
    margin-left: 25%; }
  .ds_4 {
    width: 33.33333%; }
  .ds_offset_4 {
    margin-left: 33.33333%; }
  .ds_5 {
    width: 41.66667%; }
  .ds_offset_5 {
    margin-left: 41.66667%; }
  .ds_6 {
    width: 50%; }
  .ds_offset_6 {
    margin-left: 50%; }
  .ds_7 {
    width: 58.33333%; }
  .ds_offset_7 {
    margin-left: 58.33333%; }
  .ds_8 {
    width: 66.66667%; }
  .ds_offset_8 {
    margin-left: 66.66667%; }
  .ds_9 {
    width: 75%; }
  .ds_offset_9 {
    margin-left: 75%; }
  .ds_10 {
    width: 83.33333%; }
  .ds_offset_10 {
    margin-left: 83.33333%; }
  .ds_11 {
    width: 91.66667%; }
  .ds_offset_11 {
    margin-left: 91.66667%; }
  .ds_12 {
    width: 100%; }
  .ds_offset_12 {
    margin-left: 100%; }
  .ds_order_1 {
    -webkit-box-ordinal-group: 2;
        -ms-flex-order: 1;
            order: 1; }
  .ds_order_2 {
    -webkit-box-ordinal-group: 3;
        -ms-flex-order: 2;
            order: 2; }
  .ds_order_3 {
    -webkit-box-ordinal-group: 4;
        -ms-flex-order: 3;
            order: 3; }
  .ds_order_4 {
    -webkit-box-ordinal-group: 5;
        -ms-flex-order: 4;
            order: 4; }
  .ds_order_5 {
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5; }
  .ds_order_6 {
    -webkit-box-ordinal-group: 7;
        -ms-flex-order: 6;
            order: 6; }
  .ds_order_7 {
    -webkit-box-ordinal-group: 8;
        -ms-flex-order: 7;
            order: 7; }
  .ds_order_8 {
    -webkit-box-ordinal-group: 9;
        -ms-flex-order: 8;
            order: 8; }
  .ds_order_9 {
    -webkit-box-ordinal-group: 10;
        -ms-flex-order: 9;
            order: 9; }
  .ds_order_10 {
    -webkit-box-ordinal-group: 11;
        -ms-flex-order: 10;
            order: 10; }
  .ds_order_11 {
    -webkit-box-ordinal-group: 12;
        -ms-flex-order: 11;
            order: 11; }
  .ds_order_12 {
    -webkit-box-ordinal-group: 13;
        -ms-flex-order: 12;
            order: 12; } }

@media (min-width: 1440px) {
  .hd_offset_0 {
    margin-left: 0; }
  .hd_1 {
    width: 8.33333%; }
  .hd_offset_1 {
    margin-left: 8.33333%; }
  .hd_2 {
    width: 16.66667%; }
  .hd_offset_2 {
    margin-left: 16.66667%; }
  .hd_3 {
    width: 25%; }
  .hd_offset_3 {
    margin-left: 25%; }
  .hd_4 {
    width: 33.33333%; }
  .hd_offset_4 {
    margin-left: 33.33333%; }
  .hd_5 {
    width: 41.66667%; }
  .hd_offset_5 {
    margin-left: 41.66667%; }
  .hd_6 {
    width: 50%; }
  .hd_offset_6 {
    margin-left: 50%; }
  .hd_7 {
    width: 58.33333%; }
  .hd_offset_7 {
    margin-left: 58.33333%; }
  .hd_8 {
    width: 66.66667%; }
  .hd_offset_8 {
    margin-left: 66.66667%; }
  .hd_9 {
    width: 75%; }
  .hd_offset_9 {
    margin-left: 75%; }
  .hd_10 {
    width: 83.33333%; }
  .hd_offset_10 {
    margin-left: 83.33333%; }
  .hd_11 {
    width: 91.66667%; }
  .hd_offset_11 {
    margin-left: 91.66667%; }
  .hd_12 {
    width: 100%; }
  .hd_offset_12 {
    margin-left: 100%; }
  .hd_order_1 {
    -webkit-box-ordinal-group: 2;
        -ms-flex-order: 1;
            order: 1; }
  .hd_order_2 {
    -webkit-box-ordinal-group: 3;
        -ms-flex-order: 2;
            order: 2; }
  .hd_order_3 {
    -webkit-box-ordinal-group: 4;
        -ms-flex-order: 3;
            order: 3; }
  .hd_order_4 {
    -webkit-box-ordinal-group: 5;
        -ms-flex-order: 4;
            order: 4; }
  .hd_order_5 {
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5; }
  .hd_order_6 {
    -webkit-box-ordinal-group: 7;
        -ms-flex-order: 6;
            order: 6; }
  .hd_order_7 {
    -webkit-box-ordinal-group: 8;
        -ms-flex-order: 7;
            order: 7; }
  .hd_order_8 {
    -webkit-box-ordinal-group: 9;
        -ms-flex-order: 8;
            order: 8; }
  .hd_order_9 {
    -webkit-box-ordinal-group: 10;
        -ms-flex-order: 9;
            order: 9; }
  .hd_order_10 {
    -webkit-box-ordinal-group: 11;
        -ms-flex-order: 10;
            order: 10; }
  .hd_order_11 {
    -webkit-box-ordinal-group: 12;
        -ms-flex-order: 11;
            order: 11; }
  .hd_order_12 {
    -webkit-box-ordinal-group: 13;
        -ms-flex-order: 12;
            order: 12; } }

/* 4. Auxiliary elements (Вспомогательные структурные элементы) */
.container:before,
.container:after,
.row:before,
.row:after {
  display: table;
  content: " ";
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

.container:after,
.row:after {
  clear: both; }

/* 5. Collapse */
.collapse > [class*=row] > [class*="mv_"], .collapse > [class*=row] > [class*="mh_"], .collapse > [class*=row] > [class*="tb_"], .collapse > [class*=row] > [class*="ds_"], .collapse > [class*=row] > [class*="hd_"], [class*=row].collapse [class*="mv_"], [class*=row].collapse [class*="mh_"], [class*=row].collapse [class*="tb_"], [class*=row].collapse [class*="ds_"], [class*=row].collapse [class*="hd_"], [class*=row].collapse-this > [class*="mv_"], [class*=row].collapse-this > [class*="mh_"], [class*=row].collapse-this > [class*="tb_"], [class*=row].collapse-this > [class*="ds_"], [class*=row].collapse-this > [class*="hd_"] {
  padding-left: 0;
  padding-right: 0; }

.collapse {
  padding-left: 0;
  padding-right: 0; }
  .collapse > [class*=row] {
    margin-left: 0;
    margin-right: 0; }

[class*=row].collapse {
  margin-left: 0;
  margin-right: 0; }
  [class*=row].collapse [class*=row] {
    margin-left: 0;
    margin-right: 0; }

[class*=row].collapse-this {
  margin-left: 0;
  margin-right: 0; }

/* 6. Responsive utilites (Утилиты адаптации)  */
/* Hide on large, show on small (Скрываем на больших, на малых показываем) */
@media (min-width: 320px) {
  body .mv_hidden {
    display: none; } }

@media (max-width: 319px) {
  body .mv_visible {
    display: none; } }

@media (min-width: 576px) {
  body .mh_hidden {
    display: none; } }

@media (max-width: 575px) {
  body .mh_visible {
    display: none; } }

@media (min-width: 768px) {
  body .tb_hidden {
    display: none; } }

@media (max-width: 767px) {
  body .tb_visible {
    display: none; } }

@media (min-width: 1024px) {
  body .ds_hidden {
    display: none; } }

@media (max-width: 1023px) {
  body .ds_visible {
    display: none; } }

@media (min-width: 1440px) {
  body .hd_hidden {
    display: none; } }

@media (max-width: 1439px) {
  body .hd_visible {
    display: none; } }

/* 7. Text utulites  */
.lefted {
  text-align: left; }

.righted {
  text-align: right; }

.centered {
  text-align: center; }

.justifyed {
  text-align: justify; }

@media (min-width: 320px) {
  .mv_lefted {
    text-align: left; }
  .mv_righted {
    text-align: right; }
  .mv_centered {
    text-align: center; }
  .mv_justifyed {
    text-align: justify; } }

@media (min-width: 576px) {
  .mh_lefted {
    text-align: left; }
  .mh_righted {
    text-align: right; }
  .mh_centered {
    text-align: center; }
  .mh_justifyed {
    text-align: justify; } }

@media (min-width: 768px) {
  .tb_lefted {
    text-align: left; }
  .tb_righted {
    text-align: right; }
  .tb_centered {
    text-align: center; }
  .tb_justifyed {
    text-align: justify; } }

@media (min-width: 1024px) {
  .ds_lefted {
    text-align: left; }
  .ds_righted {
    text-align: right; }
  .ds_centered {
    text-align: center; }
  .ds_justifyed {
    text-align: justify; } }

@media (min-width: 1440px) {
  .hd_lefted {
    text-align: left; }
  .hd_righted {
    text-align: right; }
  .hd_centered {
    text-align: center; }
  .hd_justifyed {
    text-align: justify; } }

/* 8. SCSS Utulites  */
/* 8.1 Functions  */
/*
* 
* 1. get_grid_bp() - return breakpoint value from $devices
* 2. get_grid_c_m() - return container_max value from $devices
* 3. get_grid_f_b() - return font_base value from $devices
* 4. get_grid_ms_c() - return ms_coeff value from $devices
*
*/
/* 1.  get_grid_c_m($bp_name) - return breakpoint value from $devices */
/* 2. get_grid_c_m($bp_name) - return container_max value from $devices */
/* 3. get_grid_f_b($bp_name) - return font_base value from $devices */
/* 4. get_grid_ms_c($bp_name) - return ms_coeff value from $devices */
/* 5. get_grid_property($bp_name, $propery) - return specified property value $devies */
/* 8.2 Mixins  */
/*
* 
* 1. media-up()   - output @media expression (min-width)
* 2. media-down() - output @media expression (max-width)
* 3. media-only() - output @media expression (min-width) and (max-width)
*
*/
/* 1.  media-up($bp_name) - output @media expression up from breakpoint (min-width) */
/* 2.  media-down($bp_name) - output @media expression down from breakpoint (max-width) */
/* 3.  media-only($bp_name) - output @media expression up from breakpoint to the next breakpoint  (min-width) and (max-width) */
/*
 * 1. Colors
 * 2. Fonts
 * 3. Borders
 * 4. Z-index
 * 5. Animations
 * 
 * 
 * 
*/
/*
 * cut_corners()
 */
/*

Взять первый аргумент массив
Разложить деструктивно
Если направление direction
    1
    2
    3
    4


 */
/*
DOCSS - Design-orientired CSS
 
Make your code like design with design terms like:
    Color scheme
    Typographic scheme
    Vertical rhytm
    Horizontal rhytm
    Height leveling
*/
/*
 * 1. pseudoelement_left_top()
 * 2. pseudoelement_right_top()
 * 3. flex()
 * 4. width()
 * 5. height()
 * 6. image_center_cover
 * 7. image_center_contain
 * 8. text_overflow
 * 9. bg_clip_text
 * 10. text_vertical()
 * 11. set_bg_adaptive
 * 0.
 */
/*
 * Display 'flex' - set justify and aligment,
 * add set optionaly flex-direction and flex-wrap 
 * Call: // flex(space-between, center);
*/
/*
 * Set width properties - set width, min-width and max-width
 * Call: // width(auto, 200px, 100%);
*/
/*
 * Set height properties - set height, min-height adn max-height
 * Call: // height(auto, 200px, 100%);
*/
/*
 * Centered image in container like CSS cover
 * Call: // image_center_cover();
*/
/*
 * Centered image in container like CSS contain
 * Call: // image_center_contain();
*/
/*
 * Overflow text in element
 * Call: // text_overflow();
*/
/*
 * Set background clip text
 * Call: // bg_clip_text();
*/
/*
 * Set text wrigthing mode vertical, and align text
 * Call: // text_vertical(center, '', ttb);
*/
/*
 * Set adaptive bg-image
 * Call: // set_bg_adaptive('../images/section-main-bg', (768, 1200), 'jpg');
*/
/*

Obj $devices 
->
Obj $font_size_names
->
function set_font_sizes()
->
mixin font_size_pro()

*/
@media (min-width: 320px) {
  .my_head {
    font-size: 17px; } }

@media (min-width: 768px) {
  .my_head {
    font-size: 18px; } }

/*
 * Extends
*/
.title,
.logo {
  border-radius: 50%; }

/*
 * .Base
 *
*/
/*
 * Base
*/
html {
  font-size: 14px;
  height: 100%; }

body {
  font-size: inherit;
  font-family: "Roboto", Verdana, Arial, sans-serif;
  height: 100%;
  margin: 0;
  font-weight: 300; }

* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

a {
  text-decoration: none; }

ul, ol {
  margin: 0;
  padding: 0;
  list-style: none; }

h1, h2, h3, h4,
.h1, .h2, .h3, .h4 {
  margin: 0;
  line-height: 1.2em;
  font-family: "Roboto", Tahoma, Arial, sans-serif;
  font-weight: 400;
  color: #353437; }

h1, .h1 {
  font-size: 2.00534rem;
  letter-spacing: 0.05em; }

h2, .h2 {
  font-size: 1.68516rem; }

h3, .h3 {
  font-size: 1.4161rem; }

h4, .h4 {
  font-size: 1.19rem; }

p {
  margin-top: 0;
  margin-bottom: 1em;
  font-size: 1rem;
  line-height: 1.5em;
  font-weight: 300; }

img {
  display: block;
  max-width: 100%;
  width: 100%;
  height: auto; }

code {
  background-color: rgba(0, 0, 0, 0.1); }

.themify:before,
.themify:after {
  vertical-align: middle;
  display: block; }

.section-component {
  margin: 3em 0; }

/*
 
*/
/* B. Plugins
 * **********************************************************************
 *  
*/
/* . news
 * **********************************************************************
 *
*/
/*
 * Blocks vars
 * Block and elements styles
 * Other styles (Not block elems, but associated with it)
 * Media rules - Mobile First, use min-width
 * States
 */
.news__item {
  width: 100%;
  position: relative;
  background-color: #2491dd;
  padding: 1em; }
  .news__item-outer:nth-child(2) .news__item:before {
    right: -30px;
    top: -30px;
    position: absolute;
    content: "";
    border: 30px solid #d6d5d7;
    -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
            transform: rotate(45deg); }
  .news__item-outer:nth-child(2) .news__item:after {
    right: -20px;
    bottom: -20px;
    position: absolute;
    content: "";
    border: 20px solid #d6d5d7;
    -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
            transform: rotate(45deg); }
  .news__item-date {
    color: green; }

/* 1. General, structure
 * **********************************************************************
 *  
*/
.main--sidebar--left {
  float: right; }

.main--sidebar--right {
  float: left; }

.main--sidebar--right + .sidebar {
  float: right; }

/* 2. Header
 * **********************************************************************
 *  
*/
.logo img {
  width: auto;
  max-width: 100%;
  height: auto; }

/* media end */
html {
  overflow: hidden;
  font-size: inherit;
  display: block;
  margin: 0 auto; }

body {
  width: 100%;
  min-height: 100%;
  margin: 0;
  padding: 0;
  background-color: #fff;
  font-size: inherit;
  font-family: inherit; }

header {
  width: 100%;
  padding: 1rem  0;
  background-color: #fff;
  background-color: #9c3; }

.title,
.logo {
  background-color: #fff;
  color: #000; }
  @media (min-width: 320px) {
    .title,
    .logo {
      font-size: 22px; } }
  @media (min-width: 768px) {
    .title,
    .logo {
      font-size: 28px; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuY3NzIiwic291cmNlcyI6WyJzdHlsZS5zY3NzIiwic2VydmljZXMvX3NlcnZpY2VzLnNjc3MiLCJfbGlicy5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9fYm91cmJvbi5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2hlbHBlcnMvX2J1dHRvbnMtbGlzdC5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2hlbHBlcnMvX3NjYWxlcy5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2hlbHBlcnMvX3RleHQtaW5wdXRzLWxpc3Quc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi9zZXR0aW5ncy9fc2V0dGluZ3Muc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi92YWxpZGF0b3JzL19jb250YWlucy5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL3ZhbGlkYXRvcnMvX2NvbnRhaW5zLWZhbHN5LnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vdmFsaWRhdG9ycy9faXMtY29sb3Iuc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi92YWxpZGF0b3JzL19pcy1sZW5ndGguc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi92YWxpZGF0b3JzL19pcy1udW1iZXIuc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi92YWxpZGF0b3JzL19pcy1zaXplLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vdXRpbGl0aWVzL19hc3NpZ24taW5wdXRzLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vdXRpbGl0aWVzL19jb21wYWN0LXNob3J0aGFuZC5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL3V0aWxpdGllcy9fZGlyZWN0aW9uYWwtcHJvcGVydHkuc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi91dGlsaXRpZXMvX2ZldGNoLWJvdXJib24tc2V0dGluZy5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL3V0aWxpdGllcy9fZm9udC1zb3VyY2UtZGVjbGFyYXRpb24uc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi91dGlsaXRpZXMvX2dhbW1hLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vdXRpbGl0aWVzL19saWdodG5lc3Muc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi91dGlsaXRpZXMvX2NvbnRyYXN0LXJhdGlvLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vdXRpbGl0aWVzL191bnBhY2stc2hvcnRoYW5kLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vbGlicmFyeS9fYm9yZGVyLWNvbG9yLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vbGlicmFyeS9fYm9yZGVyLXJhZGl1cy5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2xpYnJhcnkvX2JvcmRlci1zdHlsZS5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2xpYnJhcnkvX2JvcmRlci13aWR0aC5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2xpYnJhcnkvX2J1dHRvbnMuc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi9saWJyYXJ5L19jbGVhcmZpeC5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2xpYnJhcnkvX2NvbnRyYXN0LXN3aXRjaC5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2xpYnJhcnkvX2VsbGlwc2lzLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vbGlicmFyeS9fZm9udC1mYWNlLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vbGlicmFyeS9fZm9udC1zdGFja3Muc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi9saWJyYXJ5L19oaWRlLXRleHQuc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi9saWJyYXJ5L19oaWRlLXZpc3VhbGx5LnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vbGlicmFyeS9fbWFyZ2luLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vbGlicmFyeS9fbW9kdWxhci1zY2FsZS5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2xpYnJhcnkvX292ZXJmbG93LXdyYXAuc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi9saWJyYXJ5L19wYWRkaW5nLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vbGlicmFyeS9fcG9zaXRpb24uc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi9saWJyYXJ5L19wcmVmaXhlci5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2xpYnJhcnkvX3NoYWRlLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vbGlicmFyeS9fc2l6ZS5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2xpYnJhcnkvX3N0cmlwLXVuaXQuc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi9saWJyYXJ5L190ZXh0LWlucHV0cy5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JvdXJib24vY29yZS9ib3VyYm9uL2xpYnJhcnkvX3RpbWluZy1mdW5jdGlvbnMuc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi9saWJyYXJ5L190aW50LnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib24vbGlicmFyeS9fdHJpYW5nbGUuc2NzcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ib3VyYm9uL2NvcmUvYm91cmJvbi9saWJyYXJ5L192YWx1ZS1wcmVmaXhlci5zY3NzIiwiX2ZvbnRzLnNjc3MiLCJfbXdncmlkLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvbXctZ3JpZC9zcmMvX213Z3JpZC5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL213LWdyaWQvc3JjL19jb2x1bW5zX2dhcC5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL213LWdyaWQvc3JjL191dGlsaXRlcy5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL213LWdyaWQvc3JjL19taXhpbnMuc2NzcyIsIl92YXJzLnNjc3MiLCJfbWl4aW5zLnNjc3MiLCJtaXhpbnMvc3BlY2lhbC9fY3V0ZWRfY29ybmVycy5zY3NzIiwibWl4aW5zL19kZXNpZ24uc2NzcyIsIm1peGlucy9fc2NyZXcuc2NzcyIsIm1peGlucy9fdGhlbWUuc2NzcyIsIm1peGlucy9fc2V0X2ZvbnRzX29iamVjdC5zY3NzIiwibWl4aW5zL19leHRlbmRzLnNjc3MiLCJfYmFzZS5zY3NzIiwicGx1Z2lucy9fcGx1Z2lucy5zY3NzIiwiX2Jsb2NrcyZjb21wb25lbnRzLnNjc3MiLCIuLi92aWV3L2Jsb2Nrcy9uZXdzL19uZXdzLnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiQGNoYXJzZXQgJ3V0Zi04JztcclxuXHJcbi8qXHJcbiAqIFRhYmxlIG9mIGNvbnRlbnRzICAg0KHQvtC00LXRgNC20LDQvdC40LVcclxuICpcclxuICogIDAuIEltcG9ydHNcclxuICogIDEuIEdlbmVyYWwgVmFycywgTWl4aW5zLCBFeHRlbmRzXHJcblxyXG4gKiAgMTQuXHJcbiAqXHJcbiAqL1xyXG5cclxuXHJcbkBpbXBvcnQgJ3NlcnZpY2VzL3NlcnZpY2VzJzsgLy8gc2VydmljZXMgYW5kIGhlbHBlcnMgZnVuY3Rpb25zXHJcbkBpbXBvcnQgJ2xpYnMnOyAgICAgICAgIC8vIGV4dGVybmFsIGxpYnNcclxuQGltcG9ydCAnZm9udHMnOyAgICAgICAgLy8gZm9udHMgYWRkXHJcbkBpbXBvcnQgJ213Z3JpZCc7ICAgICAgIC8vIGxheW91dCBmcmFtZXdvcmtcclxuXHJcbkBpbXBvcnQgJ3ZhcnMnO1xyXG5AaW1wb3J0ICdtaXhpbnMnO1xyXG5AaW1wb3J0ICdiYXNlJzsgICAgICAgICAvLyBiYXNlLCBcclxuXHJcbkBpbXBvcnQgJ3BsdWdpbnMvcGx1Z2lucyc7IC8vIGV4dGVybmFsIHBsdWdpbnMgY3VzdG9tIHN0eWxlc1xyXG4vLyBAaW1wb3J0ICdjb21wb25lbnRzJzsgICAvLyBtb3ZlZCB0byAtPiBfYmFzZVxyXG5AaW1wb3J0ICdibG9ja3MmY29tcG9uZW50cyc7ICAgLy8gbW92ZWQgdG8gLT4gX2Jhc2VcclxuLy8gQGltcG9ydCAncHJpbnQnOyAgICAgLy8gcHJpbnQgdiBzdHlsZXNcclxuXHJcbiRhY2NlbnQ6ICMzYzk7XHJcbiRhY2NlbnQ6ICM5YzM7XHJcblxyXG5cclxuLyogMS4gR2VuZXJhbCwgc3RydWN0dXJlXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogIFxyXG4qL1xyXG5cclxuXHJcbi8vIC5tYWluIHtcclxuLy8gICAgIEBpbmNsdWRlIGhfcmh5dG0oJ2NvbHVtbicsICRmYik7XHJcbi8vICAgICBmbG9hdDogcmlnaHQ7XHJcbi8vICAgICB3aWR0aDogMTAwJTtcclxuLy8gICAgIC8vIEBtZWRpYSAobWluLXdpZHRoOiAje21hcC1nZXQoJGRldmljZXMsICdkc18nKX1weCkge1xyXG4vLyAgICAgQG1lZGlhIChtaW4td2lkdGg6IGJwKCdkc18nKSswcHggKSB7XHJcbi8vICAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtICN7JHNpZGViYXJfd2lkdGh9cHggLSAjeyRzaWRlYmFyX29mZnNldH0pO1xyXG4vLyAgICAgfVxyXG4vLyAgICAgQG1lZGlhIChtaW4td2lkdGg6IGJwKCdoZF8nKSswcHggKSB7XHJcbi8vICAgICAgICAgd2lkdGg6IDY3JTtcclxuLy8gICAgIH0gICAgXHJcbi8vIH1cclxuXHJcbi8vIC5zaWRlYmFyIHtcclxuLy8gICAgIEBpbmNsdWRlIHZfcmh5dG0oJ3NlY3Rpb24tYmxvY2snLCAkbF9oX2Jhc2UpO1xyXG4vLyAgICAgQGluY2x1ZGUgaF9yaHl0bSgnY29sdW1uJywgJGZiKTtcclxuLy8gICAgIGZsb2F0OiBsZWZ0O1xyXG4vLyAgICAgd2lkdGg6IDEwMCU7XHJcblxyXG4vLyAgICAgQG1lZGlhIChtaW4td2lkdGg6IGJwKCdkc18nKSswcHggKSB7XHJcbi8vICAgICAgICAgLy8g0J3QsCBkcyDRiNC40YDQuNC90LAg0YTQuNC60YFcclxuLy8gICAgICAgICAvLyBtYXJnaW46IDA7XHJcbi8vICAgICAgICAgd2lkdGg6ICRzaWRlYmFyX3dpZHRoK3B4O1xyXG4vLyAgICAgfVxyXG4vLyAgICAgQG1lZGlhIChtaW4td2lkdGg6IGJwKCdoZF8nKSswcHggKSB7XHJcbi8vICAgICAgICAgLy8g0J3QsCBoZCDRiNC40YDQuNC90LAg0LIg0L/RgNC+0YbQtdC90YLQsNGFXHJcbi8vICAgICAgICAgLy8gd2lkdGg6IDI1JTtcclxuLy8gICAgICAgICB3aWR0aDogY2FsYygzMyUgLSAyKiN7JGNvbHVtbnNfZ2FwfXB4KTtcclxuLy8gICAgIH0gICAgXHJcbi8vIH1cclxuLy8gLnNpZGViYXJfX2Jsb2NrIHtcclxuLy8gICAgIG1hcmdpbi1ib3R0b206IDEqJGxfaF9jYXJkO1xyXG5cclxuLy8gICAgICYtdGl0bGUge1xyXG5cclxuLy8gICAgICAgICAvLyB3aWR0aDogMjA1cHg7XHJcbi8vICAgICAgICAgLy8gaGVpZ2h0OiAxNHB4O1xyXG4vLyAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuLy8gICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGUtdHdvOyAgICAgICAgICBcclxuLy8gICAgICAgICAvLyBAaW5jbHVkZSB0eXBlX2Jsb2NrX3RpdGxlO1xyXG5cclxuLy8gICAgICAgICBAaW5jbHVkZSBmb250X3NpemVfcHJvKCdoNScpO1xyXG4vLyAgICAgICAgIEBpbmNsdWRlIHR5cG8oJ3RpdGxlJyk7XHJcbi8vICAgICAgICAgQGluY2x1ZGUgaGVpZ2h0X2xldmVsaW5nKCd0ZXh0Jyk7XHJcbi8vICAgICAgICAgQGluY2x1ZGUgY29sb3Jfc2NoZW1lKCdleHRyYWxpZ2h0Jyk7XHJcbi8vICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuLy8gICAgICAgICAvLyBhcnJvd1xyXG4vLyAgICAgICAgICY6OmJlZm9yZSB7XHJcbi8vICAgICAgICAgICAgIEBpbmNsdWRlIHRyaWFuZ2xlKFwiZG93blwiLCAxNnB4LCA4cHgsICR3aGl0ZS10d28pO1xyXG4vLyAgICAgICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4vLyAgICAgICAgICAgICBAaW5jbHVkZSBwc2V1ZG9lbGVtZW50X2xlZnRfdG9wKDUwJSwgMTAwJSk7XHJcbi8vICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDApO1xyXG4vLyAgICAgICAgIH0gICAgICAgIFxyXG5cclxuXHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgJi1jb250ZW50IHtcclxuLy8gICAgICAgICBwYWRkaW5nLWxlZnQ6IDEqJGxfaF9jYXJkO1xyXG4vLyAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDEqJGxfaF9jYXJkO1xyXG4vLyAgICAgICAgIHBhZGRpbmc6IDEqJGxfaF9jYXJkO1xyXG4vLyAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcclxuLy8gICAgIH1cclxuXHJcbi8vIH1cclxuXHJcbi5tYWluLS1zaWRlYmFyLS1sZWZ0IHtcclxuICAgIGZsb2F0OiByaWdodDtcclxufVxyXG5cclxuLm1haW4tLXNpZGViYXItLXJpZ2h0IHtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG59XHJcblxyXG4ubWFpbi0tc2lkZWJhci0tcmlnaHQgKyAuc2lkZWJhciB7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbn1cclxuXHJcbi8qIDIuIEhlYWRlclxyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqICBcclxuKi9cclxuXHJcbi5oZWFkZXJ7XHJcblxyXG59XHJcbi5oZWFkZXItdG9we1xyXG5cclxufVxyXG4ubG9nb3tcclxuXHJcbiAgICBpbWd7XHJcbiAgICAgICAgd2lkdGg6IGF1dG87IG1heC13aWR0aDogMTAwJTsgaGVpZ2h0OiBhdXRvO1xyXG4gICAgfVxyXG59XHJcblxyXG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgXHJcbiAgICBcclxufSAvKiBtZWRpYSBlbmQgKi9cclxuXHJcblxyXG5cclxuXHJcbmh0bWwge1xyXG5cclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBmb250LXNpemU6IGluaGVyaXQ7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG5cclxufVxyXG5cclxuYm9keSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1pbi1oZWlnaHQ6IDEwMCU7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICAgIGZvbnQtc2l6ZTogaW5oZXJpdDtcclxuICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xyXG5cclxufVxyXG5cclxuaGVhZGVyIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogMXJlbSAgMDtcclxuICAgIC8vIGJhY2tncm91bmQtY29sb3I6ICMzOWM7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGFjY2VudDtcclxuICAgIC8vIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAvLyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMTAlKTtcclxuICAgIC8vIG9wYWNpdHk6IDAuNTtcclxuXHJcbn1cclxuXHJcbi50aXRsZSxcclxuLmxvZ28ge1xyXG4gICAgLy8gZm9udC1zaXplOiBnZXRfZm9udF9zaXplKCk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgY29sb3I6ICMwMDA7XHJcbiAgICAvLyBjb2xvcjogJGFjY2VudDtcclxuXHJcbiAgICBAaW5jbHVkZSBmb250X3NpemVfcHJvKCdoMycpO1xyXG5cclxuICAgIEBleHRlbmQgJWJvcmRlcl9jaXJjbGU7XHJcbn0iLCJcclxuLy8gJG15dmFyID0gbXlmdW5jKCk7ICAvLyDQndCV0KIg0YLQsNC60L7Qs9C+INCyIFNhc3NcclxuXHJcbi8vIC5teXNlbGVjdG9yIHsgICAgICAgLy8g0KTRg9C90LrQuNC4INGC0L7Qu9GM0LrQviDQtNC70Y8g0YPRgdGC0LDQvdC+0LLQu9C10L3QuNGPINC30L3QsNGH0LXQvdC40Y8g0YHQtdC70LXQutGC0L7RgNC+0LJcclxuLy8gICAgIHByb3AgOiBteWZ1bmMoKTtcclxuLy8gfVxyXG5cclxuXHJcbkBmdW5jdGlvbiBnZXRfZm9udF9zaXplKCRhcmc6ICcyNXB4Jykge1xyXG5cclxuICAgIEByZXR1cm4gNTBweDtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8vIFJlbW92ZSB0aGUgdW5pdCBvZiBhIGxlbmd0aFxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRudW1iZXIgLSBOdW1iZXIgdG8gcmVtb3ZlIHVuaXQgZnJvbVxyXG4vLy8gQHJldHVybiB7TnVtYmVyfSAtIFVuaXRsZXNzIG51bWJlclxyXG5AZnVuY3Rpb24gc3RyaXAtdW5pdCgkbnVtYmVyKSB7XHJcbiAgICBAaWYgdHlwZS1vZigkbnVtYmVyKSA9PSAnbnVtYmVyJyBhbmQgbm90IHVuaXRsZXNzKCRudW1iZXIpIHtcclxuICAgICAgICBAcmV0dXJuICRudW1iZXIgLyAoJG51bWJlciAqIDAgKyAxKTtcclxuICAgIH1cclxuXHJcbiAgICBAcmV0dXJuICRudW1iZXI7XHJcbn1cclxuXHJcbi8vIHRvX251bWJlcigkc3RyaW5nKSAtIGNvbnZlcnNlIHN0cmluZyB0byBudW1iZXJcclxuQGZ1bmN0aW9uIHRvX251bWJlcigkc3RyaW5nKSB7XHJcbiAgICAvLyBNYXRyaWNlc1xyXG4gICAgJHN0cmluZ3M6ICcwJyAnMScgJzInICczJyAnNCcgJzUnICc2JyAnNycgJzgnICc5JztcclxuICAgICRudW1iZXJzOiAwIDEgMiAzIDQgNSA2IDcgOCA5O1xyXG5cclxuICAgIC8vIFJlc3VsdFxyXG4gICAgJHJlc3VsdDogMDtcclxuXHJcbiAgICAvLyBMb29waW5nIHRocm91Z2ggYWxsIGNoYXJhY3RlcnNcclxuICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggc3RyLWxlbmd0aCgkc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gRG8gbWFnaWNcclxuICAgIH1cclxuXHJcbiAgICBAcmV0dXJuICRyZXN1bHQ7XHJcbn1cclxuXHJcbi8vIGVtKCksIHJlbSgpLCB0b19weCgpIC0gdW5pdCBjb252ZXJzaW9uXHJcbiRicm93c2VyLWNvbnRleHQ6IDE2O1xyXG5AZnVuY3Rpb24gZW0oJHBpeGVscywgJGNvbnRleHQ6ICRicm93c2VyLWNvbnRleHQpIHtcclxuICAgIEByZXR1cm4gI3skcGl4ZWxzLyRjb250ZXh0fWVtO1xyXG59XHJcbkBmdW5jdGlvbiByZW0oJHBpeGVscywgJGNvbnRleHQ6ICRicm93c2VyLWNvbnRleHQpIHtcclxuICAgIEByZXR1cm4gI3skcGl4ZWxzLyRjb250ZXh0fXJlbTtcclxufVxyXG5AZnVuY3Rpb24gIHRvX3B4KCRyZW0sICRjb250ZXh0OiAkYnJvd3Nlci1jb250ZXh0KSB7XHJcblxyXG4gICAgQHJldHVybiBzdHJpcC11bml0KCRyZW0gKiAkY29udGV4dCk7XHJcbn1cclxuXHJcbi8vIGJwKCRicF9uYW1lKSAtIHJldHVybiBicmVha3BvaW50IHZhbHVlICh1bml0bGVzcykgZnJvbSAkZGV2aWNlcyBcclxuQGZ1bmN0aW9uIGJwKCRicF9uYW1lKSB7XHJcblxyXG4gICAgJGJwX29iajogbWFwLWdldCgkZGV2aWNlcywgJGJwX25hbWUpO1xyXG4gICAgJGJwX3ZhbHVlOiBtYXAtZ2V0KCRicF9vYmosIGJyZWFrcG9pbnQpO1xyXG5cclxuICAgIEByZXR1cm4gJGJwX3ZhbHVlOyAgXHJcbn1cclxuXHJcbi8vIF8oKSAtIGRlY29yYXRvciBmb3IgbWFwLWdldFxyXG5AZnVuY3Rpb24gXygkb2JqZWN0LCAkZmllbGQpIHtcclxuXHJcbiAgICAkdmFsdWU6IG1hcC1nZXQoXHJcbiAgICAgICAgJG9iamVjdCwgXHJcbiAgICAgICAgJGZpZWxkXHJcbiAgICApOyAgICBcclxuICAgIEByZXR1cm4gJHZhbHVlO1xyXG59XHJcblxyXG4vLyBfXygpIC0gcmV0dXJuIHZhbHVlIGZyb20geDIgZGVlcCBvYmpcclxuQGZ1bmN0aW9uIF9fKCRvYmplY3QsICRzdWJmaWVsZCwgJGZpZWxkKSB7XHJcblxyXG4gICAgJHZhbHVlOiBtYXAtZ2V0KFxyXG4gICAgICAgIG1hcC1nZXQoJG9iamVjdCwgJHN1YmZpZWxkKSwgXHJcbiAgICAgICAgJGZpZWxkXHJcbiAgICApOyAgICBcclxuICAgIEByZXR1cm4gJHZhbHVlO1xyXG59XHJcblxyXG4vLyBtYXAtc2V0KCkgLSBhZGQgcGFpciAna2V5JzondmFsdWUnIHRvIG9iaiAvLyBhIG1hcC1zZXQgZnVuY3Rpb24gKG5vdCBpbmNsdWRlZCB3aXRoIFNhc3MpIC8vIG9kZGJpcmQubmV0XHJcbkBmdW5jdGlvbiBtYXAtc2V0KCRtYXAsICRrZXksICR2YWx1ZSkge1xyXG4gICAgJG5ldzogKCRrZXk6ICR2YWx1ZSk7XHJcbiAgICBAcmV0dXJuIG1hcC1tZXJnZSgkbWFwLCAkbmV3KTtcclxufVxyXG5cclxuXHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBTdHJpbmcgUmVwbGFjZVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuQGZ1bmN0aW9uIHN0ci1yZXBsYWNlKCRzdHJpbmcsICRzZWFyY2gsICRyZXBsYWNlOiBcIlwiKSB7XHJcbiAgICAkaW5kZXg6IHN0ci1pbmRleCgkc3RyaW5nLCAkc2VhcmNoKTtcclxuXHJcbiAgICBAaWYgJGluZGV4IHtcclxuICAgICAgICBAcmV0dXJuIHN0ci1zbGljZSgkc3RyaW5nLCAxLCAkaW5kZXggLSAxKSArICRyZXBsYWNlICsgc3RyLXJlcGxhY2Uoc3RyLXNsaWNlKCRzdHJpbmcsICRpbmRleCArIHN0ci1sZW5ndGgoJHNlYXJjaCkpLCAkc2VhcmNoLCAkcmVwbGFjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgQHJldHVybiAkc3RyaW5nO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiLy8gbXVzdCB1c2VcclxuXHJcbi8vIERvbid0IEZvcmdldCAtIGFkZCBvbmUgbGV2ZWwgdG8gcGF0aHMgKC4uLylcclxuXHJcbkBpbXBvcnQgXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYm91cmJvbi9jb3JlL2JvdXJib25cIjsgLy8gRE86IG5wbSBpIGJvdXJib24gP1xyXG4vLyBAaW1wb3J0IFwiLi4vLi4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS5jc3Mvbm9ybWFsaXplXCI7XHJcblxyXG4vLyDRgdC+0LzQvdC40YLQtdC70YzQvdGL0LUg0L/Qu9Cw0LPQuNC90YtcclxuLy9AaW1wb3J0IFwiLi4vbGlicy9qUXVlcnkubW1lbnUvZGlzdC9qcXVlcnkubW1lbnUuYWxsXCJcclxuLy8gQGltcG9ydCBcIi4uL2xpYnMvY3NzLWhhbWJ1cmdlcnMvZGlzdC9oYW1idXJnZXJzLm1pblwiO1xyXG4vLyBAaW1wb3J0IFwiLi4vbGlicy9jc3MtaGFtYnVyZ2Vycy9fc2Fzcy9oYW1idXJnZXJzXCI7XHJcbi8vIEBpbXBvcnQgXCIuLi9saWJzL2hhbWJ1cmdlcnMvaGFtYnVyZ2Vyc1wiO1xyXG5cclxuXHJcbi8vIFNsaWRlcnNcclxuLy8gQGltcG9ydCBcIi4uL2xpYnMvb3dsLmNhcm91c2VsL2Rpc3QvYXNzZXRzL293bC5jYXJvdXNlbC5taW5cIjtcclxuLy8gQGltcG9ydCBcIi4uL2xpYnMvc3dpcGVyL3NyYy9zd2lwZXIuc2Nzc1wiOyAvLyB2LjUueFxyXG4vLyBAaW1wb3J0IFwiLi4vbGlicy9zbGljay1jYXJvdXNlbC9zbGljay9zbGljay5jc3NcIjtcclxuLy8gQGltcG9ydCBcIi4uL2xpYnMvc2xpY2stY2Fyb3VzZWwvc2xpY2svc2xpY2stdGhlbWUuY3NzXCI7IC8vINCh0LrQvtGA0LXQtSDQndC1INC90LXRg9C20LXQvVxyXG5cclxuLy8gRm9ybXMgc3R5bGlzaFxyXG4vLyBAaW1wb3J0IFwiLi4vbGlicy9qcXVlcnktc2VsZWN0cmljL3B1YmxpYy9zZWxlY3RyaWNcIjtcclxuXHJcbi8vIEBpbXBvcnQgXCIuLi9saWJzL2FuaW1hdGUuY3NzL2FuaW1hdGUubWluXCI7XHJcbi8vIEBpbXBvcnQgXCIuLi9saWJzL2ZhbmN5Ym94L2Rpc3QvanF1ZXJ5LmZhbmN5Ym94Lm1pbi5jc3NcIjtcclxuLy8gQGltcG9ydCBcIi4uL2Nzcy9qcXVlcnkuZmFuY3lib3gubWluLmNzc1wiOyAvLyA/INCf0LXRgNC10L3QvtGB0LjQuyDQstGA0YPRh9C90YPRjlxyXG5cclxuLy8gQGltcG9ydCAnLi4vZm9udHMvZm9udC1hd2Vzb21lL2Nzcy9hbGwubWluLmNzcyc7XHJcbi8qXHJcbk1vdmUgXHJcbi9mb250LWF3ZXNvbWUvY3NzXHJcbi9mb250LWF3ZXNvbWUvd2ViZm9udHNcclxudG9cclxuL2ZvbnRzL1xyXG4qL1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIi8vIEJvdXJib24gNy4wLjBcbi8vIGh0dHBzOi8vd3d3LmJvdXJib24uaW8vXG4vLyBDb3B5cmlnaHQgMjAxMS0yMDIwIHRob3VnaHRib3QsIGluYy5cbi8vIE1JVCBMaWNlbnNlXG5cbkBpbXBvcnQgXCJib3VyYm9uL2hlbHBlcnMvYnV0dG9ucy1saXN0XCI7XG5AaW1wb3J0IFwiYm91cmJvbi9oZWxwZXJzL3NjYWxlc1wiO1xuQGltcG9ydCBcImJvdXJib24vaGVscGVycy90ZXh0LWlucHV0cy1saXN0XCI7XG5cbkBpbXBvcnQgXCJib3VyYm9uL3NldHRpbmdzL3NldHRpbmdzXCI7XG5cbkBpbXBvcnQgXCJib3VyYm9uL3ZhbGlkYXRvcnMvY29udGFpbnNcIjtcbkBpbXBvcnQgXCJib3VyYm9uL3ZhbGlkYXRvcnMvY29udGFpbnMtZmFsc3lcIjtcbkBpbXBvcnQgXCJib3VyYm9uL3ZhbGlkYXRvcnMvaXMtY29sb3JcIjtcbkBpbXBvcnQgXCJib3VyYm9uL3ZhbGlkYXRvcnMvaXMtbGVuZ3RoXCI7XG5AaW1wb3J0IFwiYm91cmJvbi92YWxpZGF0b3JzL2lzLW51bWJlclwiO1xuQGltcG9ydCBcImJvdXJib24vdmFsaWRhdG9ycy9pcy1zaXplXCI7XG5cbkBpbXBvcnQgXCJib3VyYm9uL3V0aWxpdGllcy9hc3NpZ24taW5wdXRzXCI7XG5AaW1wb3J0IFwiYm91cmJvbi91dGlsaXRpZXMvY29tcGFjdC1zaG9ydGhhbmRcIjtcbkBpbXBvcnQgXCJib3VyYm9uL3V0aWxpdGllcy9kaXJlY3Rpb25hbC1wcm9wZXJ0eVwiO1xuQGltcG9ydCBcImJvdXJib24vdXRpbGl0aWVzL2ZldGNoLWJvdXJib24tc2V0dGluZ1wiO1xuQGltcG9ydCBcImJvdXJib24vdXRpbGl0aWVzL2ZvbnQtc291cmNlLWRlY2xhcmF0aW9uXCI7XG5AaW1wb3J0IFwiYm91cmJvbi91dGlsaXRpZXMvZ2FtbWFcIjtcbkBpbXBvcnQgXCJib3VyYm9uL3V0aWxpdGllcy9saWdodG5lc3NcIjtcbkBpbXBvcnQgXCJib3VyYm9uL3V0aWxpdGllcy9jb250cmFzdC1yYXRpb1wiO1xuQGltcG9ydCBcImJvdXJib24vdXRpbGl0aWVzL3VucGFjay1zaG9ydGhhbmRcIjtcblxuQGltcG9ydCBcImJvdXJib24vbGlicmFyeS9ib3JkZXItY29sb3JcIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvYm9yZGVyLXJhZGl1c1wiO1xuQGltcG9ydCBcImJvdXJib24vbGlicmFyeS9ib3JkZXItc3R5bGVcIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvYm9yZGVyLXdpZHRoXCI7XG5AaW1wb3J0IFwiYm91cmJvbi9saWJyYXJ5L2J1dHRvbnNcIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvY2xlYXJmaXhcIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvY29udHJhc3Qtc3dpdGNoXCI7XG5AaW1wb3J0IFwiYm91cmJvbi9saWJyYXJ5L2VsbGlwc2lzXCI7XG5AaW1wb3J0IFwiYm91cmJvbi9saWJyYXJ5L2ZvbnQtZmFjZVwiO1xuQGltcG9ydCBcImJvdXJib24vbGlicmFyeS9mb250LXN0YWNrc1wiO1xuQGltcG9ydCBcImJvdXJib24vbGlicmFyeS9oaWRlLXRleHRcIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvaGlkZS12aXN1YWxseVwiO1xuQGltcG9ydCBcImJvdXJib24vbGlicmFyeS9tYXJnaW5cIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvbW9kdWxhci1zY2FsZVwiO1xuQGltcG9ydCBcImJvdXJib24vbGlicmFyeS9vdmVyZmxvdy13cmFwXCI7XG5AaW1wb3J0IFwiYm91cmJvbi9saWJyYXJ5L3BhZGRpbmdcIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvcG9zaXRpb25cIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvcHJlZml4ZXJcIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvc2hhZGVcIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvc2l6ZVwiO1xuQGltcG9ydCBcImJvdXJib24vbGlicmFyeS9zdHJpcC11bml0XCI7XG5AaW1wb3J0IFwiYm91cmJvbi9saWJyYXJ5L3RleHQtaW5wdXRzXCI7XG5AaW1wb3J0IFwiYm91cmJvbi9saWJyYXJ5L3RpbWluZy1mdW5jdGlvbnNcIjtcbkBpbXBvcnQgXCJib3VyYm9uL2xpYnJhcnkvdGludFwiO1xuQGltcG9ydCBcImJvdXJib24vbGlicmFyeS90cmlhbmdsZVwiO1xuQGltcG9ydCBcImJvdXJib24vbGlicmFyeS92YWx1ZS1wcmVmaXhlclwiO1xuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gQSBsaXN0IG9mIGFsbCBIVE1MIGJ1dHRvbiBlbGVtZW50cy5cbi8vL1xuLy8vIEB0eXBlIGxpc3Rcbi8vL1xuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuXG4kX2J1dHRvbnMtbGlzdDogKFxuICBcImJ1dHRvblwiLFxuICBcIlt0eXBlPSdidXR0b24nXVwiLFxuICBcIlt0eXBlPSdyZXNldCddXCIsXG4gIFwiW3R5cGU9J3N1Ym1pdCddXCIsXG4pO1xuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8vXG4vLy8gUHJlLWRlZmluZWQgc2NhbGVzIGZvciB1c2Ugd2l0aCB0aGUgYG1vZHVsYXItc2NhbGVgIGZ1bmN0aW9uLlxuLy8vXG4vLy8gQHR5cGUgbnVtYmVyICh1bml0bGVzcylcbi8vL1xuLy8vIEBzZWUge2Z1bmN0aW9ufSBtb2R1bGFyLXNjYWxlXG4vLy8vXG5cbiRtaW5vci1zZWNvbmQ6IDEuMDY3O1xuJG1ham9yLXNlY29uZDogMS4xMjU7XG4kbWlub3ItdGhpcmQ6IDEuMjtcbiRtYWpvci10aGlyZDogMS4yNTtcbiRwZXJmZWN0LWZvdXJ0aDogMS4zMzM7XG4kYXVnbWVudGVkLWZvdXJ0aDogMS40MTQ7XG4kcGVyZmVjdC1maWZ0aDogMS41O1xuJG1pbm9yLXNpeHRoOiAxLjY7XG4kZ29sZGVuOiAxLjYxODtcbiRtYWpvci1zaXh0aDogMS42Njc7XG4kbWlub3Itc2V2ZW50aDogMS43Nzg7XG4kbWFqb3Itc2V2ZW50aDogMS44NzU7XG4kb2N0YXZlOiAyO1xuJG1ham9yLXRlbnRoOiAyLjU7XG4kbWFqb3ItZWxldmVudGg6IDIuNjY3O1xuJG1ham9yLXR3ZWxmdGg6IDM7XG4kZG91YmxlLW9jdGF2ZTogNDtcbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIEEgbGlzdCBvZiBhbGwgX3RleHQtYmFzZWRfIEhUTUwgaW5wdXRzLlxuLy8vXG4vLy8gQHR5cGUgbGlzdFxuLy8vXG4vLy8gQGFjY2VzcyBwcml2YXRlXG5cbiRfdGV4dC1pbnB1dHMtbGlzdDogKFxuICBcIlt0eXBlPSdjb2xvciddXCIsXG4gIFwiW3R5cGU9J2RhdGUnXVwiLFxuICBcIlt0eXBlPSdkYXRldGltZSddXCIsXG4gIFwiW3R5cGU9J2RhdGV0aW1lLWxvY2FsJ11cIixcbiAgXCJbdHlwZT0nZW1haWwnXVwiLFxuICBcIlt0eXBlPSdtb250aCddXCIsXG4gIFwiW3R5cGU9J251bWJlciddXCIsXG4gIFwiW3R5cGU9J3Bhc3N3b3JkJ11cIixcbiAgXCJbdHlwZT0nc2VhcmNoJ11cIixcbiAgXCJbdHlwZT0ndGVsJ11cIixcbiAgXCJbdHlwZT0ndGV4dCddXCIsXG4gIFwiW3R5cGU9J3RpbWUnXVwiLFxuICBcIlt0eXBlPSd1cmwnXVwiLFxuICBcIlt0eXBlPSd3ZWVrJ11cIixcbiAgXCJpbnB1dDpub3QoW3R5cGVdKVwiLFxuICBcInRleHRhcmVhXCIsXG4pO1xuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gRGVmYXVsdCBnbG9iYWwgQm91cmJvbiBzZXR0aW5ncy4gVmFsdWVzIGluIHRoaXMgbWFwIGFyZSBvdmVyd3JpdHRlbiBieSBhbnlcbi8vLyB2YWx1ZXMgc2V0IGluIHRoZSBgJGJvdXJib25gIG1hcC5cbi8vL1xuLy8vIEB0eXBlIG1hcFxuLy8vXG4vLy8gQHByb3BlcnR5IHtjb2xvcn0gY29udHJhc3Qtc3dpdGNoLWRhcmstY29sb3IgWyMwMDBdXG4vLy8gICBHbG9iYWwgZGFyayBjb2xvciBmb3IgdGhlIGBjb250cmFzdC1zd2l0Y2hgIGZ1bmN0aW9uLlxuLy8vXG4vLy8gQHByb3BlcnR5IHtjb2xvcn0gY29udHJhc3Qtc3dpdGNoLWxpZ2h0LWNvbG9yIFsjZmZmXVxuLy8vICAgR2xvYmFsIGxpZ2h0IGNvbG9yIGZvciB0aGUgYGNvbnRyYXN0LXN3aXRjaGAgZnVuY3Rpb24uXG4vLy9cbi8vLyBAcHJvcGVydHkge2xpc3R9IGdsb2JhbC1mb250LWZpbGUtZm9ybWF0cyBbKFwid29mZjJcIiwgXCJ3b2ZmXCIpXVxuLy8vICAgR2xvYmFsIGZvbnQgZmlsZSBmb3JtYXRzIGZvciB0aGUgYGZvbnQtZmFjZWAgbWl4aW4uXG4vLy9cbi8vLyBAcHJvcGVydHkge251bWJlciAod2l0aCB1bml0KX0gbW9kdWxhci1zY2FsZS1iYXNlIFsxZW1dXG4vLy8gICBHbG9iYWwgYmFzZSB2YWx1ZSBmb3IgdGhlIGBtb2R1bGFyLXNjYWxlYCBmdW5jdGlvbi5cbi8vL1xuLy8vIEBwcm9wZXJ0eSB7bnVtYmVyICh1bml0bGVzcyl9IG1vZHVsYXItc2NhbGUtcmF0aW8gWyRtYWpvci10aGlyZCAoMS4yNSldXG4vLy8gICBHbG9iYWwgYmFzZSByYXRpbyBmb3IgdGhlIGBtb2R1bGFyLXNjYWxlYCBmdW5jdGlvbi5cbi8vL1xuLy8vIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcmFpbHMtYXNzZXQtcGlwZWxpbmUgW2ZhbHNlXVxuLy8vICAgU2V0IHRoaXMgdG8gYHRydWVgIHdoZW4gdXNpbmcgdGhlIFJhaWxzIEFzc2V0IFBpcGVsaW5lIGFuZCBCb3VyYm9uIHdpbGxcbi8vLyAgIHdyaXRlIGFzc2V0IHBhdGhzIHVzaW5nXG4vLy8gICBbc2Fzcy1yYWlsc+KAmSBhc3NldCBoZWxwZXJzXShodHRwczovL2dpdGh1Yi5jb20vcmFpbHMvc2Fzcy1yYWlscyNhc3NldC1oZWxwZXJzKS5cbi8vL1xuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuXG4kX2JvdXJib24tZGVmYXVsdHM6IChcbiAgXCJjb250cmFzdC1zd2l0Y2gtZGFyay1jb2xvclwiOiAjMDAwLFxuICBcImNvbnRyYXN0LXN3aXRjaC1saWdodC1jb2xvclwiOiAjZmZmLFxuICBcImdsb2JhbC1mb250LWZpbGUtZm9ybWF0c1wiOiAoXCJ3b2ZmMlwiLCBcIndvZmZcIiksXG4gIFwibW9kdWxhci1zY2FsZS1iYXNlXCI6IDFlbSxcbiAgXCJtb2R1bGFyLXNjYWxlLXJhdGlvXCI6ICRtYWpvci10aGlyZCxcbiAgXCJyYWlscy1hc3NldC1waXBlbGluZVwiOiBmYWxzZSxcbik7XG5cbi8vLyBHbG9iYWwgQm91cmJvbiBzZXR0aW5ncy5cbi8vL1xuLy8vIEBuYW1lIFNldHRpbmdzXG4vLy9cbi8vLyBAdHlwZSBtYXBcbi8vL1xuLy8vIEBwcm9wZXJ0eSB7Y29sb3J9IGNvbnRyYXN0LXN3aXRjaC1kYXJrLWNvbG9yIFsjMDAwXVxuLy8vICAgR2xvYmFsIGRhcmsgY29sb3IgZm9yIHRoZSBgY29udHJhc3Qtc3dpdGNoYCBmdW5jdGlvbi5cbi8vL1xuLy8vIEBwcm9wZXJ0eSB7Y29sb3J9IGNvbnRyYXN0LXN3aXRjaC1saWdodC1jb2xvciBbI2ZmZl1cbi8vLyAgIEdsb2JhbCBsaWdodCBjb2xvciBmb3IgdGhlIGBjb250cmFzdC1zd2l0Y2hgIGZ1bmN0aW9uLlxuLy8vXG4vLy8gQHByb3BlcnR5IHtsaXN0fSBnbG9iYWwtZm9udC1maWxlLWZvcm1hdHMgWyhcIndvZmYyXCIsIFwid29mZlwiKV1cbi8vLyAgIEdsb2JhbCBmb250IGZpbGUgZm9ybWF0cyBmb3IgdGhlIGBmb250LWZhY2VgIG1peGluLlxuLy8vXG4vLy8gQHByb3BlcnR5IHtudW1iZXIgKHdpdGggdW5pdCl9IG1vZHVsYXItc2NhbGUtYmFzZSBbMWVtXVxuLy8vICAgR2xvYmFsIGJhc2UgdmFsdWUgZm9yIHRoZSBgbW9kdWxhci1zY2FsZWAgZnVuY3Rpb24uXG4vLy9cbi8vLyBAcHJvcGVydHkge251bWJlciAodW5pdGxlc3MpfSBtb2R1bGFyLXNjYWxlLXJhdGlvIFskbWFqb3ItdGhpcmQgKDEuMjUpXVxuLy8vICAgR2xvYmFsIGJhc2UgcmF0aW8gZm9yIHRoZSBgbW9kdWxhci1zY2FsZWAgZnVuY3Rpb24uXG4vLy9cbi8vLyBAcHJvcGVydHkge2Jvb2xlYW59IHJhaWxzLWFzc2V0LXBpcGVsaW5lIFtmYWxzZV1cbi8vLyAgIFNldCB0aGlzIHRvIGB0cnVlYCB3aGVuIHVzaW5nIHRoZSBSYWlscyBBc3NldCBQaXBlbGluZSBhbmQgQm91cmJvbiB3aWxsXG4vLy8gICB3cml0ZSBhc3NldCBwYXRocyB1c2luZ1xuLy8vICAgW3Nhc3MtcmFpbHPigJkgYXNzZXQgaGVscGVyc10oaHR0cHM6Ly9naXRodWIuY29tL3JhaWxzL3Nhc3MtcmFpbHMjYXNzZXQtaGVscGVycykuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAkYm91cmJvbjogKFxuLy8vICAgICBcImNvbnRyYXN0LXN3aXRjaC1kYXJrLWNvbG9yXCI6ICMwMDAsXG4vLy8gICAgIFwiY29udHJhc3Qtc3dpdGNoLWxpZ2h0LWNvbG9yXCI6ICNmZmYsXG4vLy8gICAgIFwiZ2xvYmFsLWZvbnQtZmlsZS1mb3JtYXRzXCI6IChcIndvZmYyXCIsIFwid29mZlwiKSxcbi8vLyAgICAgXCJtb2R1bGFyLXNjYWxlLWJhc2VcIjogMWVtLFxuLy8vICAgICBcIm1vZHVsYXItc2NhbGUtcmF0aW9cIjogJG1ham9yLXRoaXJkLFxuLy8vICAgICBcInJhaWxzLWFzc2V0LXBpcGVsaW5lXCI6IGZhbHNlLFxuLy8vICAgKTtcblxuJGJvdXJib246ICgpICFkZWZhdWx0O1xuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gQ2hlY2tzIGlmIGEgbGlzdCBjb250YWlucyBhIHZhbHVlKHMpLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtsaXN0fSAkbGlzdFxuLy8vICAgVGhlIGxpc3QgdG8gY2hlY2sgYWdhaW5zdC5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bGlzdH0gJHZhbHVlc1xuLy8vICAgQSBzaW5nbGUgdmFsdWUgb3IgbGlzdCBvZiB2YWx1ZXMgdG8gY2hlY2sgZm9yLlxuLy8vXG4vLy8gQHJldHVybiB7Ym9vbGVhbn1cbi8vL1xuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuXG5AZnVuY3Rpb24gX2NvbnRhaW5zKFxuICAkbGlzdCxcbiAgJHZhbHVlcy4uLlxuKSB7XG4gIEBlYWNoICR2YWx1ZSBpbiAkdmFsdWVzIHtcbiAgICBAaWYgdHlwZS1vZihpbmRleCgkbGlzdCwgJHZhbHVlKSkgIT0gXCJudW1iZXJcIiB7XG4gICAgICBAcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gdHJ1ZTtcbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIENoZWNrcyBpZiBhIGxpc3QgZG9lcyBub3QgY29udGFpbiBhbnkgdmFsdWVzLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtsaXN0fSAkbGlzdFxuLy8vICAgVGhlIGxpc3QgdG8gY2hlY2sgYWdhaW5zdC5cbi8vL1xuLy8vIEByZXR1cm4ge2Jvb2xlYW59XG4vLy9cbi8vLyBAYWNjZXNzIHByaXZhdGVcblxuQGZ1bmN0aW9uIF9jb250YWlucy1mYWxzeSgkbGlzdCkge1xuICBAZWFjaCAkaXRlbSBpbiAkbGlzdCB7XG4gICAgQGlmIG5vdCAkaXRlbSB7XG4gICAgICBAcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiBmYWxzZTtcbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIENoZWNrcyBmb3IgYSB2YWxpZCBDU1MgY29sb3IuXG4vLy9cbi8vLyBAYXJndW1lbnQge3N0cmluZ30gJGNvbG9yXG4vLy9cbi8vLyBAcmV0dXJuIHtib29sZWFufVxuLy8vXG4vLy8gQGFjY2VzcyBwcml2YXRlXG5cbkBmdW5jdGlvbiBfaXMtY29sb3IoJGNvbG9yKSB7XG4gIEByZXR1cm4gKHR5cGUtb2YoJGNvbG9yKSA9PSBjb2xvcikgb3IgKCRjb2xvciA9PSBcImN1cnJlbnRDb2xvclwiKTtcbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIENoZWNrcyBmb3IgYSB2YWxpZCBDU1MgbGVuZ3RoLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtzdHJpbmd9ICR2YWx1ZVxuLy8vXG4vLy8gQHJldHVybiB7Ym9vbGVhbn1cbi8vL1xuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuXG5AZnVuY3Rpb24gX2lzLWxlbmd0aCgkdmFsdWUpIHtcbiAgQHJldHVybiB0eXBlLW9mKCR2YWx1ZSkgIT0gXCJudWxsXCJcbiAgICBhbmQgKFxuICAgICAgc3RyLXNsaWNlKCR2YWx1ZSArIFwiXCIsIDEsIDQpID09IFwiY2FsY1wiXG4gICAgICBvciBzdHItc2xpY2UoJHZhbHVlICsgXCJcIiwgMSwgMykgPT0gXCJ2YXJcIlxuICAgICAgb3Igc3RyLXNsaWNlKCR2YWx1ZSArIFwiXCIsIDEsIDMpID09IFwiZW52XCJcbiAgICAgIG9yIGluZGV4KGF1dG8gaW5oZXJpdCBpbml0aWFsIDAsICR2YWx1ZSlcbiAgICAgIG9yICh0eXBlLW9mKCR2YWx1ZSkgPT0gXCJudW1iZXJcIiBhbmQgbm90KHVuaXRsZXNzKCR2YWx1ZSkpKVxuICAgICk7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBDaGVja3MgZm9yIGEgdmFsaWQgbnVtYmVyLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtudW1iZXJ9ICR2YWx1ZVxuLy8vXG4vLy8gQHJlcXVpcmUge2Z1bmN0aW9ufSBfY29udGFpbnNcbi8vL1xuLy8vIEByZXR1cm4ge2Jvb2xlYW59XG4vLy9cbi8vLyBAYWNjZXNzIHByaXZhdGVcblxuQGZ1bmN0aW9uIF9pcy1udW1iZXIoJHZhbHVlKSB7XG4gIEByZXR1cm4gX2NvbnRhaW5zKFwiMFwiIFwiMVwiIFwiMlwiIFwiM1wiIFwiNFwiIFwiNVwiIFwiNlwiIFwiN1wiIFwiOFwiIFwiOVwiIDAgMSAyIDMgNCA1IDYgNyA4IDksICR2YWx1ZSk7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBDaGVja3MgZm9yIGEgdmFsaWQgQ1NTIHNpemUuXG4vLy9cbi8vLyBAYXJndW1lbnQge3N0cmluZ30gJHZhbHVlXG4vLy9cbi8vLyBAcmV0dXJuIHtib29sZWFufVxuLy8vXG4vLy8gQHJlcXVpcmUge2Z1bmN0aW9ufSBfY29udGFpbnNcbi8vL1xuLy8vIEByZXF1aXJlIHtmdW5jdGlvbn0gX2lzLWxlbmd0aFxuLy8vXG4vLy8gQGFjY2VzcyBwcml2YXRlXG5cbkBmdW5jdGlvbiBfaXMtc2l6ZSgkdmFsdWUpIHtcbiAgQHJldHVybiBfaXMtbGVuZ3RoKCR2YWx1ZSlcbiAgICBvciBfY29udGFpbnMoXCJmaWxsXCIgXCJmaXQtY29udGVudFwiIFwibWluLWNvbnRlbnRcIiBcIm1heC1jb250ZW50XCIsICR2YWx1ZSk7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBBcHBlbmQgcHNldWRvLWNsYXNzZXMgdG8gYSBzZWxlY3RvcihzKS5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bGlzdCB8IHN0cmluZ30gJGlucHV0c1xuLy8vICAgQSBzZWxlY3Rvciwgb3IgbGlzdCBvZiBzZWxlY3RvcnMsIHRvIGFwcGx5IHRoZSBwc2V1ZG8tY2xhc3MgdG8uXG4vLy9cbi8vLyBAYXJndW1lbnQge3BzZXVkby1jbGFzc30gJHBzZXVkbyBbbnVsbF1cbi8vLyAgIFRoZSBwc2V1ZG8tY2xhc3MgdG8gYmUgYXBwZW5kZWQuXG4vLy9cbi8vLyBAcmV0dXJuIHtsaXN0fVxuLy8vXG4vLy8gQGFjY2VzcyBwcml2YXRlXG5cbkBmdW5jdGlvbiBfYXNzaWduLWlucHV0cyhcbiAgJGlucHV0cyxcbiAgJHBzZXVkbzogbnVsbFxuKSB7XG4gICRsaXN0OiAoKTtcblxuICBAZWFjaCAkaW5wdXQgaW4gJGlucHV0cyB7XG4gICAgJGlucHV0OiB1bnF1b3RlKCRpbnB1dCk7XG4gICAgJGlucHV0OiBpZigkcHNldWRvLCAkaW5wdXQgKyBcIjpcIiArICRwc2V1ZG8sICRpbnB1dCk7XG4gICAgJGxpc3Q6IGFwcGVuZCgkbGlzdCwgJGlucHV0LCBjb21tYSk7XG4gIH1cblxuICBAcmV0dXJuICRsaXN0O1xufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gVHJhbnNmb3JtcyBzaG9ydGhhbmQgdG8gaXRzIHNob3J0ZXN0IHBvc3NpYmxlIGZvcm0uXG4vLy9cbi8vLyBAYXJndW1lbnQge2xpc3R9ICR2YWx1ZXNcbi8vLyAgIExpc3Qgb2YgZGlyZWN0aW9uYWwgdmFsdWVzLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgJHZhbHVlczogX2NvbXBhY3Qtc2hvcnRoYW5kKDEwcHggMjBweCAxMHB4IDIwcHgpO1xuLy8vXG4vLy8gICAvLyBPdXRwdXRcbi8vLyAgICR2YWx1ZXM6IDEwcHggMjBweDtcbi8vL1xuLy8vIEByZXR1cm4ge2xpc3R9XG4vLy9cbi8vLyBAYWNjZXNzIHByaXZhdGVcblxuQGZ1bmN0aW9uIF9jb21wYWN0LXNob3J0aGFuZCgkdmFsdWVzKSB7XG4gICRvdXRwdXQ6IG51bGw7XG5cbiAgJGE6IG50aCgkdmFsdWVzLCAxKTtcbiAgJGI6IGlmKGxlbmd0aCgkdmFsdWVzKSA8IDIsICRhLCBudGgoJHZhbHVlcywgMikpO1xuICAkYzogaWYobGVuZ3RoKCR2YWx1ZXMpIDwgMywgJGEsIG50aCgkdmFsdWVzLCAzKSk7XG4gICRkOiBpZihsZW5ndGgoJHZhbHVlcykgPCAyLCAkYSwgbnRoKCR2YWx1ZXMsIGlmKGxlbmd0aCgkdmFsdWVzKSA8IDQsIDIsIDQpKSk7XG5cbiAgQGlmICRhID09IDAgeyAkYTogMDsgfVxuICBAaWYgJGIgPT0gMCB7ICRiOiAwOyB9XG4gIEBpZiAkYyA9PSAwIHsgJGM6IDA7IH1cbiAgQGlmICRkID09IDAgeyAkZDogMDsgfVxuXG4gIEBpZiAkYSA9PSAkYiBhbmQgJGEgPT0gJGMgYW5kICRhID09ICRkIHtcbiAgICAkb3V0cHV0OiAkYTtcbiAgfSBAZWxzZSBpZiAkYSA9PSAkYyBhbmQgJGIgPT0gJGQge1xuICAgICRvdXRwdXQ6ICRhICRiO1xuICB9IEBlbHNlIGlmICRiID09ICRkIHtcbiAgICAkb3V0cHV0OiAkYSAkYiAkYztcbiAgfSBAZWxzZSB7XG4gICAgJG91dHB1dDogJGEgJGIgJGMgJGQ7XG4gIH1cblxuICBAcmV0dXJuICRvdXRwdXQ7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBCdWlsZHMgZGlyZWN0aW9uYWwgcHJvcGVydGllcyBieSBwYXJzaW5nIENTUyBzaG9ydGhhbmQgdmFsdWVzLiBGb3IgZXhhbXBsZSxcbi8vLyBhIHZhbHVlIG9mIGAxMHB4IG51bGxgIHdpbGwgb3V0cHV0IHRvcCBhbmQgYm90dG9tIGRpcmVjdGlvbmFsIHByb3BlcnRpZXMsXG4vLy8gYnV0IHRoZSBgbnVsbGAgc2tpcHMgbGVmdCBhbmQgcmlnaHQgZnJvbSBiZWluZyBvdXRwdXQuXG4vLy9cbi8vLyBAYXJndW1lbnQge3N0cmluZ30gJHByb3BlcnR5XG4vLy8gICBCYXNlIHByb3BlcnR5LlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtzdHJpbmd9ICRzdWZmaXhcbi8vLyAgIFN1ZmZpeCB0byBhcHBlbmQuIFVzZSBgbnVsbGAgdG8gb21pdC5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bGlzdH0gJHZhbHVlc1xuLy8vICAgTGlzdCBvZiB2YWx1ZXMgdG8gc2V0IGZvciB0aGUgcHJvcGVydHkuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIEBpbmNsdWRlIF9kaXJlY3Rpb25hbC1wcm9wZXJ0eShib3JkZXIsIHdpZHRoLCBudWxsIDVweCk7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgYm9yZGVyLXJpZ2h0LXdpZHRoOiA1cHg7XG4vLy8gICAgIGJvcmRlci1sZWZ0LXdpZHRoOiA1cHg7XG4vLy8gICB9XG4vLy9cbi8vLyBAcmVxdWlyZSB7ZnVuY3Rpb259IF9jb21wYWN0LXNob3J0aGFuZFxuLy8vXG4vLy8gQHJlcXVpcmUge2Z1bmN0aW9ufSBfY29udGFpbnMtZmFsc3lcbi8vL1xuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuXG5AbWl4aW4gX2RpcmVjdGlvbmFsLXByb3BlcnR5KFxuICAkcHJvcGVydHksXG4gICRzdWZmaXgsXG4gICR2YWx1ZXNcbikge1xuICAkdG9wOiAkcHJvcGVydHkgKyBcIi10b3BcIiArIGlmKCRzdWZmaXgsIFwiLSN7JHN1ZmZpeH1cIiwgXCJcIik7XG4gICRib3R0b206ICRwcm9wZXJ0eSArIFwiLWJvdHRvbVwiICsgaWYoJHN1ZmZpeCwgXCItI3skc3VmZml4fVwiLCBcIlwiKTtcbiAgJGxlZnQ6ICRwcm9wZXJ0eSArIFwiLWxlZnRcIiArIGlmKCRzdWZmaXgsIFwiLSN7JHN1ZmZpeH1cIiwgXCJcIik7XG4gICRyaWdodDogJHByb3BlcnR5ICsgXCItcmlnaHRcIiArIGlmKCRzdWZmaXgsIFwiLSN7JHN1ZmZpeH1cIiwgXCJcIik7XG4gICRhbGw6ICRwcm9wZXJ0eSArIGlmKCRzdWZmaXgsIFwiLSN7JHN1ZmZpeH1cIiwgXCJcIik7XG5cbiAgJHZhbHVlczogX2NvbXBhY3Qtc2hvcnRoYW5kKCR2YWx1ZXMpO1xuXG4gIEBpZiBfY29udGFpbnMtZmFsc3koJHZhbHVlcykge1xuICAgIEBpZiBudGgoJHZhbHVlcywgMSkgeyAjeyR0b3B9OiBudGgoJHZhbHVlcywgMSk7IH1cblxuICAgIEBpZiBsZW5ndGgoJHZhbHVlcykgPT0gMSB7XG4gICAgICBAaWYgbnRoKCR2YWx1ZXMsIDEpIHsgI3skcmlnaHR9OiBudGgoJHZhbHVlcywgMSk7IH1cbiAgICB9IEBlbHNlIHtcbiAgICAgIEBpZiBudGgoJHZhbHVlcywgMikgeyAjeyRyaWdodH06IG50aCgkdmFsdWVzLCAyKTsgfVxuICAgIH1cblxuICAgIEBpZiBsZW5ndGgoJHZhbHVlcykgPT0gMiB7XG4gICAgICBAaWYgbnRoKCR2YWx1ZXMsIDEpIHsgI3skYm90dG9tfTogbnRoKCR2YWx1ZXMsIDEpOyB9XG4gICAgICBAaWYgbnRoKCR2YWx1ZXMsIDIpIHsgI3skbGVmdH06IG50aCgkdmFsdWVzLCAyKTsgfVxuICAgIH0gQGVsc2UgaWYgbGVuZ3RoKCR2YWx1ZXMpID09IDMge1xuICAgICAgQGlmIG50aCgkdmFsdWVzLCAzKSB7ICN7JGJvdHRvbX06IG50aCgkdmFsdWVzLCAzKTsgfVxuICAgICAgQGlmIG50aCgkdmFsdWVzLCAyKSB7ICN7JGxlZnR9OiBudGgoJHZhbHVlcywgMik7IH1cbiAgICB9IEBlbHNlIGlmIGxlbmd0aCgkdmFsdWVzKSA9PSA0IHtcbiAgICAgIEBpZiBudGgoJHZhbHVlcywgMykgeyAjeyRib3R0b219OiBudGgoJHZhbHVlcywgMyk7IH1cbiAgICAgIEBpZiBudGgoJHZhbHVlcywgNCkgeyAjeyRsZWZ0fTogbnRoKCR2YWx1ZXMsIDQpOyB9XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICAjeyRhbGx9OiAkdmFsdWVzO1xuICB9XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBSZXR1cm4gYSBCb3VyYm9uIHNldHRpbmcuXG4vLy9cbi8vLyBAYXJndW1lbnQge3N0cmluZ30gJHNldHRpbmdcbi8vL1xuLy8vIEByZXR1cm4ge2Jvb2xlYW4gfCBjb2xvciB8IGxpc3QgfCBudW1iZXIgfCBzdHJpbmd9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICBfZmV0Y2gtYm91cmJvbi1zZXR0aW5nKHJhaWxzLWFzc2V0LXBpcGVsaW5lKVxuLy8vXG4vLy8gQGFjY2VzcyBwcml2YXRlXG5cbkBmdW5jdGlvbiBfZmV0Y2gtYm91cmJvbi1zZXR0aW5nKCRzZXR0aW5nKSB7XG4gIEByZXR1cm4gbWFwLWdldChtYXAtbWVyZ2UoJF9ib3VyYm9uLWRlZmF1bHRzLCAkYm91cmJvbiksICRzZXR0aW5nKTtcbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIEJ1aWxkcyB0aGUgYHNyY2AgbGlzdCBmb3IgYW4gYEBmb250LWZhY2VgIGRlY2xhcmF0aW9uLlxuLy8vXG4vLy8gQGxpbmsgaHR0cHM6Ly9nb28uZ2wvUnUxYktQXG4vLy9cbi8vLyBAYXJndW1lbnQge3N0cmluZ30gJGZvbnQtZmFtaWx5XG4vLy9cbi8vLyBAYXJndW1lbnQge3N0cmluZ30gJGZpbGUtcGF0aFxuLy8vXG4vLy8gQGFyZ3VtZW50IHtib29sZWFufSAkYXNzZXQtcGlwZWxpbmVcbi8vL1xuLy8vIEBhcmd1bWVudCB7bGlzdH0gJGZpbGUtZm9ybWF0c1xuLy8vXG4vLy8gQHJldHVybiB7bGlzdH1cbi8vL1xuLy8vIEByZXF1aXJlIHtmdW5jdGlvbn0gX2NvbnRhaW5zXG4vLy9cbi8vLyBAYWNjZXNzIHByaXZhdGVcblxuQGZ1bmN0aW9uIF9mb250LXNvdXJjZS1kZWNsYXJhdGlvbihcbiAgJGZvbnQtZmFtaWx5LFxuICAkZmlsZS1wYXRoLFxuICAkYXNzZXQtcGlwZWxpbmUsXG4gICRmaWxlLWZvcm1hdHNcbikge1xuICAkc3JjOiAoKTtcblxuICAkZm9ybWF0cy1tYXA6IChcbiAgICBcIndvZmYyXCI6IFwiI3skZmlsZS1wYXRofS53b2ZmMlwiIGZvcm1hdChcIndvZmYyXCIpLFxuICAgIFwid29mZlwiOiBcIiN7JGZpbGUtcGF0aH0ud29mZlwiIGZvcm1hdChcIndvZmZcIiksXG4gICk7XG5cbiAgQGVhY2ggJGZvcm1hdCBpbiAkZmlsZS1mb3JtYXRzIHtcbiAgICBAaWYgX2NvbnRhaW5zKG1hcC1rZXlzKCRmb3JtYXRzLW1hcCksICRmb3JtYXQpIHtcbiAgICAgICR2YWx1ZTogbWFwLWdldCgkZm9ybWF0cy1tYXAsICRmb3JtYXQpO1xuICAgICAgJGZpbGUtcGF0aDogbnRoKCR2YWx1ZSwgMSk7XG4gICAgICAkZm9udC1mb3JtYXQ6IG50aCgkdmFsdWUsIDIpO1xuXG4gICAgICBAaWYgJGFzc2V0LXBpcGVsaW5lID09IHRydWUge1xuICAgICAgICAkc3JjOiBhcHBlbmQoJHNyYywgZm9udC11cmwoJGZpbGUtcGF0aCkgJGZvbnQtZm9ybWF0LCBjb21tYSk7XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgJHNyYzogYXBwZW5kKCRzcmMsIHVybCgkZmlsZS1wYXRoKSAkZm9udC1mb3JtYXQsIGNvbW1hKTtcbiAgICAgIH1cbiAgICB9IEBlbHNlIHtcbiAgICAgIEBlcnJvciBcImAjeyRmaWxlLWZvcm1hdHN9YCBjb250YWlucyBhbiB1bnN1cHBvcnRlZCBmb250IGZpbGUgZm9ybWF0LiBcIiArXG4gICAgICAgIFwiTXVzdCBiZSBgd29mZmAgYW5kL29yIGB3b2ZmMmAuXCI7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkc3JjO1xufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gUGVyZm9ybXMgZ2FtbWEgY29ycmVjdGlvbiBvbiBhIHNpbmdsZSBjb2xvciBjaGFubmVsLlxuLy8vXG4vLy8gTm90ZSB0aGF0IHRoZSBjYWxjdWxhdGlvbiBpcyBhcHByb3hpbWF0ZSBpZiBhIGBwb3coKWAgaXMgbm90IGF2YWlsYWJsZS5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bnVtYmVyICgwLTEpfSAkY2hhbm5lbFxuLy8vXG4vLy8gQHJldHVybiB7bnVtYmVyICgwLTEpfVxuLy8vXG4vLy8gQGFjY2VzcyBwcml2YXRlXG5cbkBmdW5jdGlvbiBfZ2FtbWEoJGNoYW5uZWwpIHtcbiAgQGlmICRjaGFubmVsIDwgMC4wMzkyOCB7XG4gICAgQHJldHVybiAkY2hhbm5lbCAvIDEyLjkyO1xuICB9IEBlbHNlIHtcbiAgICAkYzogKCRjaGFubmVsICsgMC4wNTUpIC8gMS4wNTU7XG4gICAgQGlmIGZ1bmN0aW9uLWV4aXN0cyhcInBvd1wiKSB7XG4gICAgICBAcmV0dXJuIHBvdygkYywgMi40KTtcbiAgICB9IEBlbHNlIHtcbiAgICAgIEByZXR1cm4gMC41NiAqICRjICogJGMgKiAkYyArIDAuNDQgKiAkYyAqICRjO1xuICAgIH1cbiAgfVxufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gUHJvZ3JhbWF0aWNhbGx5IGRldGVybWluZXMgdGhlIGxpZ2h0bmVzcyBvZiBhIGNvbG9yLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtjb2xvciAoaGV4KX0gJGhleC1jb2xvclxuLy8vXG4vLy8gQHJldHVybiB7bnVtYmVyICgwLTEpfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgX2xpZ2h0bmVzcygkY29sb3IpXG4vLy9cbi8vLyBAYWNjZXNzIHByaXZhdGVcblxuQGZ1bmN0aW9uIF9saWdodG5lc3MoJGhleC1jb2xvcikge1xuICAkLWxvY2FsLXJlZC1yYXc6IHJlZChyZ2JhKCRoZXgtY29sb3IsIDEpKTtcbiAgJC1sb2NhbC1ncmVlbi1yYXc6IGdyZWVuKHJnYmEoJGhleC1jb2xvciwgMSkpO1xuICAkLWxvY2FsLWJsdWUtcmF3OiBibHVlKHJnYmEoJGhleC1jb2xvciwgMSkpO1xuXG4gICQtbG9jYWwtcmVkOiBfZ2FtbWEoJC1sb2NhbC1yZWQtcmF3IC8gMjU1KTtcbiAgJC1sb2NhbC1ncmVlbjogX2dhbW1hKCQtbG9jYWwtZ3JlZW4tcmF3IC8gMjU1KTtcbiAgJC1sb2NhbC1ibHVlOiBfZ2FtbWEoJC1sb2NhbC1ibHVlLXJhdyAvIDI1NSk7XG5cbiAgQHJldHVybiAkLWxvY2FsLXJlZCAqIDAuMjEyNiArICQtbG9jYWwtZ3JlZW4gKiAwLjcxNTIgKyAkLWxvY2FsLWJsdWUgKiAwLjA3MjI7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBQcm9ncmFtYXRpY2FsbHkgZGV0ZXJtaW5lcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuLy8vXG4vLy8gTm90ZSB0aGF0IHRoZSBhbHBoYSBjaGFubmVsIGlzIGlnbm9yZWQuXG4vLy9cbi8vLyBAbGluayBodHRwczovL2dvby5nbC81NGh0TFZcbi8vL1xuLy8vIEBhcmd1bWVudCB7Y29sb3IgKGhleCl9ICRjb2xvci0xXG4vLy9cbi8vLyBAYXJndW1lbnQge2NvbG9yIChoZXgpfSAkY29sb3ItMlxuLy8vXG4vLy8gQHJldHVybiB7bnVtYmVyICgxLTIxKX1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIF9jb250cmFzdC1yYXRpbyhibGFjaywgd2hpdGUpXG4vLy9cbi8vLyBAcmVxdWlyZSB7ZnVuY3Rpb259IF9saWdodG5lc3Ncbi8vL1xuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuXG5AZnVuY3Rpb24gX2NvbnRyYXN0LXJhdGlvKCRjb2xvci0xLCAkY29sb3ItMikge1xuICAkLWxvY2FsLWxpZ2h0bmVzcy0xOiBfbGlnaHRuZXNzKCRjb2xvci0xKSArIDAuMDU7XG4gICQtbG9jYWwtbGlnaHRuZXNzLTI6IF9saWdodG5lc3MoJGNvbG9yLTIpICsgMC4wNTtcblxuICBAaWYgJC1sb2NhbC1saWdodG5lc3MtMSA+ICQtbG9jYWwtbGlnaHRuZXNzLTIge1xuICAgIEByZXR1cm4gJC1sb2NhbC1saWdodG5lc3MtMSAvICQtbG9jYWwtbGlnaHRuZXNzLTI7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gJC1sb2NhbC1saWdodG5lc3MtMiAvICQtbG9jYWwtbGlnaHRuZXNzLTE7XG4gIH1cbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIFRyYW5zZm9ybXMgc2hvcnRoYW5kIHRoYXQgY2FuIHJhbmdlIGZyb20gMS10by00IHZhbHVlcyB0byBiZSA0IHZhbHVlcy5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bGlzdH0gJHNob3J0aGFuZFxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBtYXJnaW46IF91bnBhY2stc2hvcnRoYW5kKDFlbSAyZW0pO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIG1hcmdpbjogMWVtIDJlbSAxZW0gMmVtO1xuLy8vICAgfVxuLy8vXG4vLy8gQGFjY2VzcyBwcml2YXRlXG5cbkBmdW5jdGlvbiBfdW5wYWNrLXNob3J0aGFuZCgkc2hvcnRoYW5kKSB7XG4gIEBpZiBsZW5ndGgoJHNob3J0aGFuZCkgPT0gMSB7XG4gICAgQHJldHVybiBudGgoJHNob3J0aGFuZCwgMSkgbnRoKCRzaG9ydGhhbmQsIDEpIG50aCgkc2hvcnRoYW5kLCAxKSBudGgoJHNob3J0aGFuZCwgMSk7XG4gIH0gQGVsc2UgaWYgbGVuZ3RoKCRzaG9ydGhhbmQpID09IDIge1xuICAgIEByZXR1cm4gbnRoKCRzaG9ydGhhbmQsIDEpIG50aCgkc2hvcnRoYW5kLCAyKSBudGgoJHNob3J0aGFuZCwgMSkgbnRoKCRzaG9ydGhhbmQsIDIpO1xuICB9IEBlbHNlIGlmIGxlbmd0aCgkc2hvcnRoYW5kKSA9PSAzIHtcbiAgICBAcmV0dXJuIG50aCgkc2hvcnRoYW5kLCAxKSBudGgoJHNob3J0aGFuZCwgMikgbnRoKCRzaG9ydGhhbmQsIDMpIG50aCgkc2hvcnRoYW5kLCAyKTtcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiAkc2hvcnRoYW5kO1xuICB9XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBQcm92aWRlcyBhIGNvbmNpc2UsIG9uZS1saW5lIG1ldGhvZCBmb3Igc2V0dGluZyBgYm9yZGVyLWNvbG9yYCBvbiBzcGVjaWZpY1xuLy8vIGVkZ2VzIG9mIGEgYm94LiBVc2UgYSBgbnVsbGAgdmFsdWUgdG8g4oCcc2tpcOKAnSBlZGdlcyBvZiB0aGUgYm94IHdpdGggc3RhbmRhcmRcbi8vLyBDU1Mgc2hvcnRoYW5kLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtsaXN0fSAkdmFsdWVzXG4vLy8gICBMaXN0IG9mIGNvbG9yczsgYWNjZXB0cyBDU1Mgc2hvcnRoYW5kLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBib3JkZXItY29sb3IoI2E2MGI1NSAjNzZjZDljIG51bGwgI2U4YWUxYSk7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgYm9yZGVyLWxlZnQtY29sb3I6ICNlOGFlMWE7XG4vLy8gICAgIGJvcmRlci1yaWdodC1jb2xvcjogIzc2Y2Q5Yztcbi8vLyAgICAgYm9yZGVyLXRvcC1jb2xvcjogI2E2MGI1NTtcbi8vLyAgIH1cbi8vL1xuLy8vIEByZXF1aXJlIHttaXhpbn0gX2RpcmVjdGlvbmFsLXByb3BlcnR5XG5cbkBtaXhpbiBib3JkZXItY29sb3IoJHZhbHVlcykge1xuICBAaW5jbHVkZSBfZGlyZWN0aW9uYWwtcHJvcGVydHkoYm9yZGVyLCBjb2xvciwgJHZhbHVlcyk7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBQcm92aWRlcyBhIGNvbmNpc2UsIG9uZS1saW5lIG1ldGhvZCBmb3Igc2V0dGluZyBgYm9yZGVyLXJhZGl1c2Agb24gYm90aCB0aGVcbi8vLyB0b3AtbGVmdCBhbmQgdG9wLXJpZ2h0IG9mIGEgYm94LlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtudW1iZXIgKHdpdGggdW5pdCl9ICRyYWRpaVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBib3JkZXItdG9wLXJhZGl1cyg0cHgpO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDRweDtcbi8vLyAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDRweDtcbi8vLyAgIH1cblxuQG1peGluIGJvcmRlci10b3AtcmFkaXVzKCRyYWRpaSkge1xuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAkcmFkaWk7XG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAkcmFkaWk7XG59XG5cbi8vLyBQcm92aWRlcyBhIGNvbmNpc2UsIG9uZS1saW5lIG1ldGhvZCBmb3Igc2V0dGluZyBgYm9yZGVyLXJhZGl1c2Agb24gYm90aCB0aGVcbi8vLyB0b3AtcmlnaHQgYW5kIGJvdHRvbS1yaWdodCBvZiBhIGJveC5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bnVtYmVyICh3aXRoIHVuaXQpfSAkcmFkaWlcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgQGluY2x1ZGUgYm9yZGVyLXJpZ2h0LXJhZGl1cygzcHgpO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAzcHg7XG4vLy8gICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAzcHg7XG4vLy8gICB9XG5cbkBtaXhpbiBib3JkZXItcmlnaHQtcmFkaXVzKCRyYWRpaSkge1xuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogJHJhZGlpO1xuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogJHJhZGlpO1xufVxuXG4vLy8gUHJvdmlkZXMgYSBjb25jaXNlLCBvbmUtbGluZSBtZXRob2QgZm9yIHNldHRpbmcgYGJvcmRlci1yYWRpdXNgIG9uIGJvdGggdGhlXG4vLy8gYm90dG9tLWxlZnQgYW5kIGJvdHRvbS1yaWdodCBvZiBhIGJveC5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bnVtYmVyICh3aXRoIHVuaXQpfSAkcmFkaWlcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgQGluY2x1ZGUgYm9yZGVyLWJvdHRvbS1yYWRpdXMoMnB4KTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAycHg7XG4vLy8gICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAycHg7XG4vLy8gICB9XG5cbkBtaXhpbiBib3JkZXItYm90dG9tLXJhZGl1cygkcmFkaWkpIHtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJHJhZGlpO1xuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogJHJhZGlpO1xufVxuXG4vLy8gUHJvdmlkZXMgYSBjb25jaXNlLCBvbmUtbGluZSBtZXRob2QgZm9yIHNldHRpbmcgYGJvcmRlci1yYWRpdXNgIG9uIGJvdGggdGhlXG4vLy8gdG9wLWxlZnQgYW5kIGJvdHRvbS1sZWZ0IG9mIGEgYm94LlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtudW1iZXIgKHdpdGggdW5pdCl9ICRyYWRpaVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBib3JkZXItbGVmdC1yYWRpdXMoMXB4KTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxcHg7XG4vLy8gICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDFweDtcbi8vLyAgIH1cblxuQG1peGluIGJvcmRlci1sZWZ0LXJhZGl1cygkcmFkaWkpIHtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJHJhZGlpO1xuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAkcmFkaWk7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBQcm92aWRlcyBhIGNvbmNpc2UsIG9uZS1saW5lIG1ldGhvZCBmb3Igc2V0dGluZyBgYm9yZGVyLXN0eWxlYCBvbiBzcGVjaWZpY1xuLy8vIGVkZ2VzIG9mIGEgYm94LiBVc2UgYSBgbnVsbGAgdmFsdWUgdG8g4oCcc2tpcOKAnSBlZGdlcyBvZiB0aGUgYm94IHdpdGggc3RhbmRhcmRcbi8vLyBDU1Mgc2hvcnRoYW5kLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtsaXN0fSAkdmFsdWVzXG4vLy8gICBMaXN0IG9mIGJvcmRlciBzdHlsZXM7IGFjY2VwdHMgQ1NTIHNob3J0aGFuZC5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgQGluY2x1ZGUgYm9yZGVyLXN0eWxlKGRhc2hlZCBudWxsIHNvbGlkKTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBib3JkZXItYm90dG9tLXN0eWxlOiBzb2xpZDtcbi8vLyAgICAgYm9yZGVyLXRvcC1zdHlsZTogZGFzaGVkO1xuLy8vICAgfVxuLy8vXG4vLy8gQHJlcXVpcmUge21peGlufSBfZGlyZWN0aW9uYWwtcHJvcGVydHlcblxuQG1peGluIGJvcmRlci1zdHlsZSgkdmFsdWVzKSB7XG4gIEBpbmNsdWRlIF9kaXJlY3Rpb25hbC1wcm9wZXJ0eShib3JkZXIsIHN0eWxlLCAkdmFsdWVzKTtcbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIFByb3ZpZGVzIGEgY29uY2lzZSwgb25lLWxpbmUgbWV0aG9kIGZvciBzZXR0aW5nIGBib3JkZXItd2lkdGhgIG9uIHNwZWNpZmljXG4vLy8gZWRnZXMgb2YgYSBib3guIFVzZSBhIGBudWxsYCB2YWx1ZSB0byDigJxza2lw4oCdIGVkZ2VzIG9mIHRoZSBib3ggd2l0aCBzdGFuZGFyZFxuLy8vIENTUyBzaG9ydGhhbmQuXG4vLy9cbi8vLyBAYXJndW1lbnQge2xpc3R9ICR2YWx1ZXNcbi8vLyAgIExpc3Qgb2YgYm9yZGVyIHdpZHRoczsgYWNjZXB0cyBDU1Mgc2hvcnRoYW5kLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBib3JkZXItd2lkdGgoMWVtIG51bGwgMjBweCk7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMjBweDtcbi8vLyAgICAgYm9yZGVyLXRvcC13aWR0aDogMWVtO1xuLy8vICAgfVxuLy8vXG4vLy8gQHJlcXVpcmUge21peGlufSBfZGlyZWN0aW9uYWwtcHJvcGVydHlcblxuQG1peGluIGJvcmRlci13aWR0aCgkdmFsdWVzKSB7XG4gIEBpbmNsdWRlIF9kaXJlY3Rpb25hbC1wcm9wZXJ0eShib3JkZXIsIHdpZHRoLCAkdmFsdWVzKTtcbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vL1xuLy8vIEB0eXBlIGxpc3Rcbi8vL1xuLy8vIEByZXF1aXJlIHtmdW5jdGlvbn0gX2Fzc2lnbi1pbnB1dHNcbi8vL1xuLy8vIEByZXF1aXJlIHt2YXJpYWJsZX0gJF9idXR0b25zLWxpc3Rcbi8vLy9cblxuLy8vIEEgbGlzdCBvZiBhbGwgSFRNTCBidXR0b24gZWxlbWVudHMuIFBsZWFzZSBub3RlIHRoYXQgeW91IG11c3QgaW50ZXJwb2xhdGVcbi8vLyB0aGUgdmFyaWFibGUgKGAje31gKSB0byB1c2UgaXQgYXMgYSBzZWxlY3Rvci5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgICN7JGFsbC1idXR0b25zfSB7XG4vLy8gICAgIGJhY2tncm91bmQtY29sb3I6ICNmMDA7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIGJ1dHRvbixcbi8vLyAgIFt0eXBlPSdidXR0b24nXSxcbi8vLyAgIFt0eXBlPSdyZXNldCddLFxuLy8vICAgW3R5cGU9J3N1Ym1pdCddIHtcbi8vLyAgICAgYmFja2dyb3VuZC1jb2xvcjogI2YwMDtcbi8vLyAgIH1cblxuJGFsbC1idXR0b25zOiBfYXNzaWduLWlucHV0cygkX2J1dHRvbnMtbGlzdCk7XG5cbi8vLyBBIGxpc3Qgb2YgYWxsIEhUTUwgYnV0dG9uIGVsZW1lbnRzIHdpdGggdGhlIGA6YWN0aXZlYCBwc2V1ZG8tY2xhc3MgYXBwbGllZC5cbi8vLyBQbGVhc2Ugbm90ZSB0aGF0IHlvdSBtdXN0IGludGVycG9sYXRlIHRoZSB2YXJpYWJsZSAoYCN7fWApIHRvIHVzZSBpdCBhcyBhXG4vLy8gc2VsZWN0b3IuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAjeyRhbGwtYnV0dG9ucy1hY3RpdmV9IHtcbi8vLyAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwZjtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgYnV0dG9uOmFjdGl2ZSxcbi8vLyAgIFt0eXBlPSdidXR0b24nXTphY3RpdmUsXG4vLy8gICBbdHlwZT0ncmVzZXQnXTphY3RpdmUsXG4vLy8gICBbdHlwZT0nc3VibWl0J106YWN0aXZlIHtcbi8vLyAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwZjtcbi8vLyAgIH1cblxuJGFsbC1idXR0b25zLWFjdGl2ZTogX2Fzc2lnbi1pbnB1dHMoJF9idXR0b25zLWxpc3QsIGFjdGl2ZSk7XG5cbi8vLyBBIGxpc3Qgb2YgYWxsIEhUTUwgYnV0dG9uIGVsZW1lbnRzIHdpdGggdGhlIGA6Zm9jdXNgIHBzZXVkby1jbGFzcyBhcHBsaWVkLlxuLy8vIFBsZWFzZSBub3RlIHRoYXQgeW91IG11c3QgaW50ZXJwb2xhdGUgdGhlIHZhcmlhYmxlIChgI3t9YCkgdG8gdXNlIGl0IGFzIGFcbi8vLyBzZWxlY3Rvci5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgICN7JGFsbC1idXR0b25zLWZvY3VzfSB7XG4vLy8gICAgIGJhY2tncm91bmQtY29sb3I6ICMwZjA7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIGJ1dHRvbjpmb2N1cyxcbi8vLyAgIFt0eXBlPSdidXR0b24nXTpmb2N1cyxcbi8vLyAgIFt0eXBlPSdyZXNldCddOmZvY3VzLFxuLy8vICAgW3R5cGU9J3N1Ym1pdCddOmZvY3VzIHtcbi8vLyAgICAgYmFja2dyb3VuZC1jb2xvcjogIzBmMDtcbi8vLyAgIH1cblxuJGFsbC1idXR0b25zLWZvY3VzOiBfYXNzaWduLWlucHV0cygkX2J1dHRvbnMtbGlzdCwgZm9jdXMpO1xuXG4vLy8gQSBsaXN0IG9mIGFsbCBIVE1MIGJ1dHRvbiBlbGVtZW50cyB3aXRoIHRoZSBgOmhvdmVyYCBwc2V1ZG8tY2xhc3MgYXBwbGllZC5cbi8vLyBQbGVhc2Ugbm90ZSB0aGF0IHlvdSBtdXN0IGludGVycG9sYXRlIHRoZSB2YXJpYWJsZSAoYCN7fWApIHRvIHVzZSBpdCBhcyBhXG4vLy8gc2VsZWN0b3IuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAjeyRhbGwtYnV0dG9ucy1ob3Zlcn0ge1xuLy8vICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGYwO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICBidXR0b246aG92ZXIsXG4vLy8gICBbdHlwZT0nYnV0dG9uJ106aG92ZXIsXG4vLy8gICBbdHlwZT0ncmVzZXQnXTpob3Zlcixcbi8vLyAgIFt0eXBlPSdzdWJtaXQnXTpob3ZlciB7XG4vLy8gICAgIGJhY2tncm91bmQtY29sb3I6ICMwZjA7XG4vLy8gICB9XG5cbiRhbGwtYnV0dG9ucy1ob3ZlcjogX2Fzc2lnbi1pbnB1dHMoJF9idXR0b25zLWxpc3QsIGhvdmVyKTtcbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIFByb3ZpZGVzIGFuIGVhc3kgd2F5IHRvIGluY2x1ZGUgYSBjbGVhcmZpeCBmb3IgY29udGFpbmluZyBmbG9hdHMuXG4vLy9cbi8vLyBAbGluayBodHRwczovL2dvby5nbC95UDVoaVpcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgQGluY2x1ZGUgY2xlYXJmaXg7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50OjphZnRlciB7XG4vLy8gICAgIGNsZWFyOiBib3RoO1xuLy8vICAgICBjb250ZW50OiBcIlwiO1xuLy8vICAgICBkaXNwbGF5OiBibG9jaztcbi8vLyAgIH1cblxuQG1peGluIGNsZWFyZml4IHtcbiAgJjo6YWZ0ZXIge1xuICAgIGNsZWFyOiBib3RoO1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIFN3aXRjaGVzIGJldHdlZW4gdHdvIGNvbG9ycyBiYXNlZCBvbiB0aGUgY29udHJhc3QgdG8gYW5vdGhlciBjb2xvci4gSXTigJlzXG4vLy8gbGlrZSBhIFt0ZXJuYXJ5IG9wZXJhdG9yXSBmb3IgY29sb3IgY29udHJhc3QgYW5kIGNhbiBiZSB1c2VmdWwgZm9yIGJ1aWxkaW5nXG4vLy8gYSBidXR0b24gc3lzdGVtLlxuLy8vXG4vLy8gVGhlIGNhbGN1bGF0aW9uIG9mIHRoZSBjb250cmFzdCByYXRpbyBpcyBiYXNlZCBvbiB0aGUgW1dDQUcgMi4wXG4vLy8gc3BlY2lmaWNhdGlvbl0uIEhvd2V2ZXIsIHdlIGNhbm5vdCBndWFyYW50ZWUgZnVsbCBjb21wbGlhbmNlLCB0aG91Z2ggYWxsIG9mXG4vLy8gb3VyIG1hbnVhbCB0ZXN0aW5nIHBhc3NlZC5cbi8vL1xuLy8vICAgW3Rlcm5hcnkgb3BlcmF0b3JdOiBodHRwczovL2dvby5nbC9jY2ZMcWlcbi8vLyAgIFtXQ0FHIDIuMCBzcGVjaWZpY2F0aW9uXTogaHR0cHM6Ly9nb28uZ2wvemhRdVlBXG4vLy9cbi8vLyBAYXJndW1lbnQge2NvbG9yfSAkYmFzZS1jb2xvclxuLy8vICAgVGhlIGNvbG9yIHRvIGV2YWx1YXRlIGxpZ2h0bmVzcyBhZ2FpbnN0LlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtjb2xvcn0gJGRhcmstY29sb3IgWyMwMDBdXG4vLy8gICBUaGUgY29sb3IgdG8gYmUgb3V0cHV0IHdoZW4gYCRiYXNlLWNvbG9yYCBpcyBsaWdodC4gQ2FuIGFsc28gYmUgc2V0XG4vLy8gICBnbG9iYWxseSB1c2luZyB0aGUgYGNvbnRyYXN0LXN3aXRjaC1kYXJrLWNvbG9yYCBrZXkgaW4gdGhlXG4vLy8gICBCb3VyYm9uIHNldHRpbmdzLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtjb2xvcn0gJGxpZ2h0LWNvbG9yIFsjZmZmXVxuLy8vICAgVGhlIGNvbG9yIHRvIGJlIG91dHB1dCB3aGVuIGAkYmFzZS1jb2xvcmAgaXMgZGFyay4gQ2FuIGFsc28gYmUgc2V0XG4vLy8gICBnbG9iYWxseSB1c2luZyB0aGUgYGNvbnRyYXN0LXN3aXRjaC1saWdodC1jb2xvcmAga2V5IGluIHRoZVxuLy8vICAgQm91cmJvbiBzZXR0aW5ncy5cbi8vL1xuLy8vIEByZXR1cm4ge2NvbG9yfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBjb2xvcjogY29udHJhc3Qtc3dpdGNoKCNiYWU2ZTYpO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGNvbG9yOiAjMDAwO1xuLy8vICAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICAkYnV0dG9uLWNvbG9yOiAjMmQ3MmQ5O1xuLy8vICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYnV0dG9uLWNvbG9yO1xuLy8vICAgICBjb2xvcjogY29udHJhc3Qtc3dpdGNoKCRidXR0b24tY29sb3IsICMyMjIsICNlZWUpO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGJhY2tncm91bmQtY29sb3I6ICMyZDcyZDk7XG4vLy8gICAgIGNvbG9yOiAjZWVlO1xuLy8vICAgfVxuLy8vXG4vLy8gQHJlcXVpcmUge2Z1bmN0aW9ufSBfZmV0Y2gtYm91cmJvbi1zZXR0aW5nXG4vLy9cbi8vLyBAcmVxdWlyZSB7ZnVuY3Rpb259IF9pcy1jb2xvclxuLy8vXG4vLy8gQHJlcXVpcmUge2Z1bmN0aW9ufSBfY29udHJhc3QtcmF0aW9cbi8vL1xuLy8vIEBzaW5jZSA1LjAuMFxuXG5AZnVuY3Rpb24gY29udHJhc3Qtc3dpdGNoKFxuICAkYmFzZS1jb2xvcixcbiAgJGRhcmstY29sb3I6IF9mZXRjaC1ib3VyYm9uLXNldHRpbmcoXCJjb250cmFzdC1zd2l0Y2gtZGFyay1jb2xvclwiKSxcbiAgJGxpZ2h0LWNvbG9yOiBfZmV0Y2gtYm91cmJvbi1zZXR0aW5nKFwiY29udHJhc3Qtc3dpdGNoLWxpZ2h0LWNvbG9yXCIpXG4pIHtcbiAgQGlmIG5vdCBfaXMtY29sb3IoJGJhc2UtY29sb3IpIHtcbiAgICBAZXJyb3IgXCJgI3skYmFzZS1jb2xvcn1gIGlzIG5vdCBhIHZhbGlkIGNvbG9yIGZvciB0aGUgYCRiYXNlLWNvbG9yYCBcIiArXG4gICAgICBcImFyZ3VtZW50IGluIHRoZSBgY29udHJhc3Qtc3dpdGNoYCBmdW5jdGlvbi5cIjtcbiAgfSBAZWxzZSBpZiBub3QgX2lzLWNvbG9yKCRkYXJrLWNvbG9yKSB7XG4gICAgQGVycm9yIFwiYCN7JGRhcmstY29sb3J9YCBpcyBub3QgYSB2YWxpZCBjb2xvciBmb3IgdGhlIGAkZGFyay1jb2xvcmAgXCIgK1xuICAgICAgXCJhcmd1bWVudCBpbiB0aGUgYGNvbnRyYXN0LXN3aXRjaGAgZnVuY3Rpb24uXCI7XG4gIH0gQGVsc2UgaWYgbm90IF9pcy1jb2xvcigkbGlnaHQtY29sb3IpIHtcbiAgICBAZXJyb3IgXCJgI3skbGlnaHQtY29sb3J9YCBpcyBub3QgYSB2YWxpZCBjb2xvciBmb3IgdGhlIGAkbGlnaHQtY29sb3JgIFwiICtcbiAgICAgIFwiYXJndW1lbnQgaW4gdGhlIGBjb250cmFzdC1zd2l0Y2hgIGZ1bmN0aW9uLlwiO1xuICB9IEBlbHNlIHtcbiAgICAkLWNvbnRyYXN0LXRvLWRhcms6IF9jb250cmFzdC1yYXRpbygkYmFzZS1jb2xvciwgJGRhcmstY29sb3IpO1xuICAgICQtY29udHJhc3QtdG8tbGlnaHQ6IF9jb250cmFzdC1yYXRpbygkYmFzZS1jb2xvciwgJGxpZ2h0LWNvbG9yKTtcbiAgICAkLXByZWZlci1kYXJrOiAkLWNvbnRyYXN0LXRvLWRhcmsgPj0gJC1jb250cmFzdC10by1saWdodDtcblxuICAgIEByZXR1cm4gaWYoJC1wcmVmZXItZGFyaywgJGRhcmstY29sb3IsICRsaWdodC1jb2xvcik7XG4gIH1cbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIFRydW5jYXRlcyB0ZXh0IGFuZCBhZGRzIGFuIGVsbGlwc2lzIHRvIHJlcHJlc2VudCBvdmVyZmxvdy5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bnVtYmVyfSAkd2lkdGggWzEwMCVdXG4vLy8gICBUaGUgYG1heC13aWR0aGAgZm9yIHRoZSBzdHJpbmcgdG8gcmVzcGVjdCBiZWZvcmUgYmVpbmcgdHJ1bmNhdGVkLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtzdHJpbmd9ICRkaXNwbGF5IFtpbmxpbmUtYmxvY2tdXG4vLy8gICBTZXRzIHRoZSBkaXNwbGF5LXZhbHVlIG9mIHRoZSBlbGVtZW50LlxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBlbGxpcHNpcztcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4vLy8gICAgIG1heC13aWR0aDogMTAwJTtcbi8vLyAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbi8vLyAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4vLy8gICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4vLy8gICAgIHdvcmQtd3JhcDogbm9ybWFsO1xuLy8vICAgfVxuXG5AbWl4aW4gZWxsaXBzaXMoXG4gICR3aWR0aDogMTAwJSxcbiAgJGRpc3BsYXk6IGlubGluZS1ibG9ja1xuKSB7XG4gIGRpc3BsYXk6ICRkaXNwbGF5O1xuICBtYXgtd2lkdGg6ICR3aWR0aDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIHdvcmQtd3JhcDogbm9ybWFsO1xufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gR2VuZXJhdGVzIGFuIGBAZm9udC1mYWNlYCBkZWNsYXJhdGlvbi4gWW91IGNhbiBjaG9vc2UgdGhlIHNwZWNpZmljIGZpbGVcbi8vLyBmb3JtYXRzIHlvdSBuZWVkIHRvIG91dHB1dDsgdGhlIG1peGluIHN1cHBvcnRzIGB3b2ZmMmBcbi8vLyBhbmQgYHdvZmZgLiBUaGUgbWl4aW4gYWxzbyBzdXBwb3J0cyB1c2FnZSB3aXRoIHRoZSBSYWlscyBBc3NldCBQaXBlbGluZSxcbi8vLyB3aGljaCB5b3UgY2FuIGVuYWJsZSBwZXIgdXNlLCBvciBnbG9iYWxseSBpbiB0aGUgYCRib3VyYm9uKClgIHNldHRpbmdzLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtzdHJpbmd9ICRmb250LWZhbWlseVxuLy8vXG4vLy8gQGFyZ3VtZW50IHtzdHJpbmd9ICRmaWxlLXBhdGhcbi8vL1xuLy8vIEBhcmd1bWVudCB7c3RyaW5nIHwgbGlzdH0gJGZpbGUtZm9ybWF0cyBbKFwid29mZjJcIiwgXCJ3b2ZmXCIpXVxuLy8vICAgTGlzdCBvZiB0aGUgZm9udCBmaWxlIGZvcm1hdHMgdG8gaW5jbHVkZS4gQ2FuIGFsc28gYmUgc2V0IGdsb2JhbGx5IHVzaW5nXG4vLy8gICB0aGUgYGdsb2JhbC1mb250LWZpbGUtZm9ybWF0c2Aga2V5IGluIHRoZSBCb3VyYm9uIHNldHRpbmdzLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtib29sZWFufSAkYXNzZXQtcGlwZWxpbmUgW2ZhbHNlXVxuLy8vICAgU2V0IHRvIGB0cnVlYCBpZiB5b3XigJlyZSB1c2luZyB0aGUgUmFpbHMgQXNzZXQgUGlwZWxpbmUgKHBsYWNlIHRoZSBmb250c1xuLy8vICAgaW4gYGFwcC9hc3NldHMvZm9udHMvYCkuIENhbiBhbHNvIGJlIHNldCBnbG9iYWxseSB1c2luZyB0aGVcbi8vLyAgIGByYWlscy1hc3NldC1waXBlbGluZWAga2V5IGluIHRoZSBCb3VyYm9uIHNldHRpbmdzLlxuLy8vXG4vLy8gQGNvbnRlbnRcbi8vLyAgIEFueSBhZGRpdGlvbmFsIENTUyBwcm9wZXJ0aWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIHRoZSBgQGluY2x1ZGVgXG4vLy8gICBkaXJlY3RpdmUgd2lsbCBiZSBvdXRwdXQgd2l0aGluIHRoZSBgQGZvbnQtZmFjZWAgZGVjbGFyYXRpb24sIGUuZy4geW91IGNhblxuLy8vICAgcGFzcyBpbiBgZm9udC13ZWlnaHRgLCBgZm9udC1zdHlsZWAgYW5kL29yIGB1bmljb2RlLXJhbmdlYC5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIEBpbmNsdWRlIGZvbnQtZmFjZShcbi8vLyAgICAgXCJzb3VyY2Utc2Fucy1wcm9cIixcbi8vLyAgICAgXCJmb250cy9zb3VyY2Utc2Fucy1wcm8tcmVndWxhclwiLFxuLy8vICAgICAoXCJ3b2ZmMlwiLCBcIndvZmZcIilcbi8vLyAgICkge1xuLy8vICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4vLy8gICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIEBmb250LWZhY2Uge1xuLy8vICAgICBmb250LWZhbWlseTogXCJzb3VyY2Utc2Fucy1wcm9cIjtcbi8vLyAgICAgc3JjOiB1cmwoXCJmb250cy9zb3VyY2Utc2Fucy1wcm8tcmVndWxhci53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSxcbi8vLyAgICAgICAgICB1cmwoXCJmb250cy9zb3VyY2Utc2Fucy1wcm8tcmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4vLy8gICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbi8vLyAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbi8vLyAgIH1cbi8vL1xuLy8vIEByZXF1aXJlIHtmdW5jdGlvbn0gX2ZvbnQtc291cmNlLWRlY2xhcmF0aW9uXG4vLy9cbi8vLyBAcmVxdWlyZSB7ZnVuY3Rpb259IF9mZXRjaC1ib3VyYm9uLXNldHRpbmdcblxuQG1peGluIGZvbnQtZmFjZShcbiAgJGZvbnQtZmFtaWx5LFxuICAkZmlsZS1wYXRoLFxuICAkZmlsZS1mb3JtYXRzOiBfZmV0Y2gtYm91cmJvbi1zZXR0aW5nKFwiZ2xvYmFsLWZvbnQtZmlsZS1mb3JtYXRzXCIpLFxuICAkYXNzZXQtcGlwZWxpbmU6IF9mZXRjaC1ib3VyYm9uLXNldHRpbmcoXCJyYWlscy1hc3NldC1waXBlbGluZVwiKVxuKSB7XG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHk7XG4gICAgc3JjOiBfZm9udC1zb3VyY2UtZGVjbGFyYXRpb24oXG4gICAgICAkZm9udC1mYW1pbHksXG4gICAgICAkZmlsZS1wYXRoLFxuICAgICAgJGFzc2V0LXBpcGVsaW5lLFxuICAgICAgJGZpbGUtZm9ybWF0c1xuICAgICk7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIEEgdmFyaWFibGUgdGhhdCBvdXRwdXRzIGEgSGVsdmV0aWNhIGZvbnQgc3RhY2suXG4vLy9cbi8vLyBAbGluayBodHRwczovL2dvby5nbC91U0p2WmVcbi8vL1xuLy8vIEB0eXBlIGxpc3Rcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgZm9udC1mYW1pbHk6ICRmb250LXN0YWNrLWhlbHZldGljYTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogXCJIZWx2ZXRpY2EgTmV1ZVwiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWY7XG4vLy8gICB9XG5cbiRmb250LXN0YWNrLWhlbHZldGljYTogKFxuICBcIkhlbHZldGljYSBOZXVlXCIsXG4gIFwiSGVsdmV0aWNhXCIsXG4gIFwiQXJpYWxcIixcbiAgc2Fucy1zZXJpZixcbik7XG5cbi8vLyBBIHZhcmlhYmxlIHRoYXQgb3V0cHV0cyBhIEx1Y2lkYSBHcmFuZGUgZm9udCBzdGFjay5cbi8vL1xuLy8vIEBsaW5rIGh0dHBzOi8vZ29vLmdsL1I1VXlZRVxuLy8vXG4vLy8gQHR5cGUgbGlzdFxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogJGZvbnQtc3RhY2stbHVjaWRhLWdyYW5kZTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogXCJMdWNpZGEgR3JhbmRlXCIsIFwiTHVjaWRhIFNhbnMgVW5pY29kZVwiLCBcIkdlbmV2YVwiLCBcIlZlcmRhbmFcIiwgc2Fucy1zZXJpZjtcbi8vLyAgIH1cblxuJGZvbnQtc3RhY2stbHVjaWRhLWdyYW5kZTogKFxuICBcIkx1Y2lkYSBHcmFuZGVcIixcbiAgXCJMdWNpZGEgU2FucyBVbmljb2RlXCIsXG4gIFwiR2VuZXZhXCIsXG4gIFwiVmVyZGFuYVwiLFxuICBzYW5zLXNlcmlmLFxuKTtcblxuLy8vIEEgdmFyaWFibGUgdGhhdCBvdXRwdXRzIGEgVmVyZGFuYSBmb250IHN0YWNrLlxuLy8vXG4vLy8gQGxpbmsgaHR0cHM6Ly9nb28uZ2wveUdYV1NTXG4vLy9cbi8vLyBAdHlwZSBsaXN0XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGZvbnQtZmFtaWx5OiAkZm9udC1zdGFjay12ZXJkYW5hO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGZvbnQtZmFtaWx5OiBcIlZlcmRhbmFcIiwgXCJHZW5ldmFcIiwgc2Fucy1zZXJpZjtcbi8vLyAgIH1cblxuJGZvbnQtc3RhY2stdmVyZGFuYTogKFxuICBcIlZlcmRhbmFcIixcbiAgXCJHZW5ldmFcIixcbiAgc2Fucy1zZXJpZixcbik7XG5cbi8vLyBBIHZhcmlhYmxlIHRoYXQgb3V0cHV0cyBhIHN5c3RlbSBmb250IHN0YWNrLlxuLy8vXG4vLy8gQHR5cGUgbGlzdFxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogJGZvbnQtc3RhY2stc3lzdGVtO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWksIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXCJBdmVuaXIgTmV4dFwiLCBcIkF2ZW5pclwiLCBcIlNlZ29lIFVJXCIsIFwiTHVjaWRhIEdyYW5kZVwiLCBcIkhlbHZldGljYSBOZXVlXCIsIFwiSGVsdmV0aWNhXCIsIFwiRmlyYSBTYW5zXCIsIFwiUm9ib3RvXCIsIFwiTm90b1wiLCBcIkRyb2lkIFNhbnNcIiwgXCJDYW50YXJlbGxcIiwgXCJPeHlnZW5cIiwgXCJVYnVudHVcIiwgXCJGcmFua2xpbiBHb3RoaWMgTWVkaXVtXCIsIFwiQ2VudHVyeSBHb3RoaWNcIiwgXCJMaWJlcmF0aW9uIFNhbnNcIiwgc2Fucy1zZXJpZjtcbi8vLyAgIH1cblxuJGZvbnQtc3RhY2stc3lzdGVtOiAoXG4gIHN5c3RlbS11aSxcbiAgLWFwcGxlLXN5c3RlbSxcbiAgQmxpbmtNYWNTeXN0ZW1Gb250LFxuICBcIkF2ZW5pciBOZXh0XCIsXG4gIFwiQXZlbmlyXCIsXG4gIFwiU2Vnb2UgVUlcIixcbiAgXCJMdWNpZGEgR3JhbmRlXCIsXG4gIFwiSGVsdmV0aWNhIE5ldWVcIixcbiAgXCJIZWx2ZXRpY2FcIixcbiAgXCJGaXJhIFNhbnNcIixcbiAgXCJSb2JvdG9cIixcbiAgXCJOb3RvXCIsXG4gIFwiRHJvaWQgU2Fuc1wiLFxuICBcIkNhbnRhcmVsbFwiLFxuICBcIk94eWdlblwiLFxuICBcIlVidW50dVwiLFxuICBcIkZyYW5rbGluIEdvdGhpYyBNZWRpdW1cIixcbiAgXCJDZW50dXJ5IEdvdGhpY1wiLFxuICBcIkxpYmVyYXRpb24gU2Fuc1wiLFxuICBzYW5zLXNlcmlmLFxuKTtcblxuLy8vIEEgdmFyaWFibGUgdGhhdCBvdXRwdXRzIGEgR2FyYW1vbmQgZm9udCBzdGFjay5cbi8vL1xuLy8vIEBsaW5rIGh0dHBzOi8vZ29vLmdsL1FRRkVrVlxuLy8vXG4vLy8gQHR5cGUgbGlzdFxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogJGZvbnQtc3RhY2stZ2FyYW1vbmQ7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgZm9udC1mYW1pbHk6IFwiR2FyYW1vbmRcIiwgXCJCYXNrZXJ2aWxsZVwiLCBcIkJhc2tlcnZpbGxlIE9sZCBGYWNlXCIsIFwiSG9lZmxlciBUZXh0XCIsIFwiVGltZXMgTmV3IFJvbWFuXCIsIHNlcmlmO1xuLy8vICAgfVxuXG4kZm9udC1zdGFjay1nYXJhbW9uZDogKFxuICBcIkdhcmFtb25kXCIsXG4gIFwiQmFza2VydmlsbGVcIixcbiAgXCJCYXNrZXJ2aWxsZSBPbGQgRmFjZVwiLFxuICBcIkhvZWZsZXIgVGV4dFwiLFxuICBcIlRpbWVzIE5ldyBSb21hblwiLFxuICBzZXJpZixcbik7XG5cbi8vLyBBIHZhcmlhYmxlIHRoYXQgb3V0cHV0cyBhIEdlb3JnaWEgZm9udCBzdGFjay5cbi8vL1xuLy8vIEBsaW5rIGh0dHBzOi8vZ29vLmdsL3d0elZQeVxuLy8vXG4vLy8gQHR5cGUgbGlzdFxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogJGZvbnQtc3RhY2stZ2VvcmdpYTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogXCJHZW9yZ2lhXCIsIFwiVGltZXNcIiwgXCJUaW1lcyBOZXcgUm9tYW5cIiwgc2VyaWY7XG4vLy8gICB9XG5cbiRmb250LXN0YWNrLWdlb3JnaWE6IChcbiAgXCJHZW9yZ2lhXCIsXG4gIFwiVGltZXNcIixcbiAgXCJUaW1lcyBOZXcgUm9tYW5cIixcbiAgc2VyaWYsXG4pO1xuXG4vLy8gQSB2YXJpYWJsZSB0aGF0IG91dHB1dHMgYSBIb2VmbGVyIFRleHQgZm9udCBzdGFjay5cbi8vL1xuLy8vIEBsaW5rIGh0dHBzOi8vZ29vLmdsL243VTd6eFxuLy8vXG4vLy8gQHR5cGUgbGlzdFxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogJGZvbnQtc3RhY2staG9lZmxlci10ZXh0O1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGZvbnQtZmFtaWx5OiBcIkhvZWZsZXIgVGV4dFwiLCBcIkJhc2tlcnZpbGxlIE9sZCBGYWNlXCIsIFwiR2FyYW1vbmRcIiwgXCJUaW1lcyBOZXcgUm9tYW5cIiwgc2VyaWY7XG4vLy8gICB9XG5cbiRmb250LXN0YWNrLWhvZWZsZXItdGV4dDogKFxuICBcIkhvZWZsZXIgVGV4dFwiLFxuICBcIkJhc2tlcnZpbGxlIE9sZCBGYWNlXCIsXG4gIFwiR2FyYW1vbmRcIixcbiAgXCJUaW1lcyBOZXcgUm9tYW5cIixcbiAgc2VyaWYsXG4pO1xuXG4vLy8gQSB2YXJpYWJsZSB0aGF0IG91dHB1dHMgYSBDb25zb2xhcyBmb250IHN0YWNrLlxuLy8vXG4vLy8gQGxpbmsgaHR0cHM6Ly9nb28uZ2wvaUtydHF2XG4vLy9cbi8vLyBAdHlwZSBsaXN0XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGZvbnQtZmFtaWx5OiAkZm9udC1zdGFjay1jb25zb2xhcztcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogXCJDb25zb2xhc1wiLCBcIm1vbmFjb1wiLCBtb25vc3BhY2U7XG4vLy8gICB9XG5cbiRmb250LXN0YWNrLWNvbnNvbGFzOiAoXG4gIFwiQ29uc29sYXNcIixcbiAgXCJtb25hY29cIixcbiAgbW9ub3NwYWNlLFxuKTtcblxuLy8vIEEgdmFyaWFibGUgdGhhdCBvdXRwdXRzIGEgQ291cmllciBOZXcgZm9udCBzdGFjay5cbi8vL1xuLy8vIEBsaW5rIGh0dHBzOi8vZ29vLmdsL2JIZldNUFxuLy8vXG4vLy8gQHR5cGUgbGlzdFxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogJGZvbnQtc3RhY2stY291cmllci1uZXc7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgZm9udC1mYW1pbHk6IFwiQ291cmllciBOZXdcIiwgXCJDb3VyaWVyXCIsIFwiTHVjaWRhIFNhbnMgVHlwZXdyaXRlclwiLCBcIkx1Y2lkYSBUeXBld3JpdGVyXCIsIG1vbm9zcGFjZTtcbi8vLyAgIH1cblxuJGZvbnQtc3RhY2stY291cmllci1uZXc6IChcbiAgXCJDb3VyaWVyIE5ld1wiLFxuICBcIkNvdXJpZXJcIixcbiAgXCJMdWNpZGEgU2FucyBUeXBld3JpdGVyXCIsXG4gIFwiTHVjaWRhIFR5cGV3cml0ZXJcIixcbiAgbW9ub3NwYWNlLFxuKTtcblxuLy8vIEEgdmFyaWFibGUgdGhhdCBvdXRwdXRzIGEgTW9uYWNvIGZvbnQgc3RhY2suXG4vLy9cbi8vLyBAbGluayBodHRwczovL2dvby5nbC85UGdLRE9cbi8vL1xuLy8vIEB0eXBlIGxpc3Rcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgZm9udC1mYW1pbHk6ICRmb250LXN0YWNrLW1vbmFjbztcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LWZhbWlseTogXCJNb25hY29cIiwgXCJDb25zb2xhc1wiLCBcIkx1Y2lkYSBDb25zb2xlXCIsIG1vbm9zcGFjZTtcbi8vLyAgIH1cblxuJGZvbnQtc3RhY2stbW9uYWNvOiAoXG4gIFwiTW9uYWNvXCIsXG4gIFwiQ29uc29sYXNcIixcbiAgXCJMdWNpZGEgQ29uc29sZVwiLFxuICBtb25vc3BhY2UsXG4pO1xuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gSGlkZXMgdGhlIHRleHQgaW4gYW4gZWxlbWVudCwgY29tbW9ubHkgdXNlZCB0byBzaG93IGFuIGltYWdlIGluc3RlYWQuIFNvbWVcbi8vLyBlbGVtZW50cyB3aWxsIG5lZWQgYmxvY2stbGV2ZWwgc3R5bGVzIGFwcGxpZWQuXG4vLy9cbi8vLyBAbGluayBodHRwczovL2dvby5nbC9FdkxSSXVcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgQGluY2x1ZGUgaGlkZS10ZXh0O1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIG92ZXJmbG93OiBoaWRkZW47XG4vLy8gICAgIHRleHQtaW5kZW50OiAxMDElO1xuLy8vICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuLy8vICAgfVxuXG5AbWl4aW4gaGlkZS10ZXh0IHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1pbmRlbnQ6IDEwMSU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBIaWRlcyBhbiBlbGVtZW50IHZpc3VhbGx5IHdoaWxlIHN0aWxsIGFsbG93aW5nIHRoZSBjb250ZW50IHRvIGJlIGFjY2Vzc2libGVcbi8vLyB0byBhc3Npc3RpdmUgdGVjaG5vbG9neSwgZS5nLiBzY3JlZW4gcmVhZGVycy4gUGFzc2luZyBgdW5oaWRlYCB3aWxsIHJldmVyc2Vcbi8vLyB0aGUgYWZmZWN0cyBvZiB0aGUgaGlkaW5nLCB3aGljaCBpcyBoYW5keSBmb3Igc2hvd2luZyB0aGUgZWxlbWVudCBvbiBmb2N1cyxcbi8vLyBmb3IgZXhhbXBsZS5cbi8vL1xuLy8vIEBsaW5rIGh0dHBzOi8vZ29vLmdsL1ZmMVRHblxuLy8vXG4vLy8gQGFyZ3VtZW50IHtzdHJpbmd9ICR0b2dnbGUgW2hpZGVdXG4vLy8gICBBY2NlcHRzIGBoaWRlYCBvciBgdW5oaWRlYC4gYHVuaGlkZWAgcmV2ZXJzZXMgdGhlIGFmZmVjdHMgb2YgYGhpZGVgLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBoaWRlLXZpc3VhbGx5O1xuLy8vXG4vLy8gICAgICY6YWN0aXZlLFxuLy8vICAgICAmOmZvY3VzIHtcbi8vLyAgICAgICBAaW5jbHVkZSBoaWRlLXZpc3VhbGx5KFwidW5oaWRlXCIpO1xuLy8vICAgICB9XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgYm9yZGVyOiAwO1xuLy8vICAgICBjbGlwOiByZWN0KDFweCwgMXB4LCAxcHgsIDFweCk7XG4vLy8gICAgIGNsaXAtcGF0aDogaW5zZXQoMTAwJSk7XG4vLy8gICAgIGhlaWdodDogMXB4O1xuLy8vICAgICBvdmVyZmxvdzogaGlkZGVuO1xuLy8vICAgICBwYWRkaW5nOiAwO1xuLy8vICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4vLy8gICAgIHdpZHRoOiAxcHg7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC5oaWRlLXZpc3VhbGx5OmFjdGl2ZSxcbi8vLyAgIC5oaWRlLXZpc3VhbGx5OmZvY3VzIHtcbi8vLyAgICAgY2xpcDogYXV0bztcbi8vLyAgICAgY2xpcC1wYXRoOiBub25lO1xuLy8vICAgICBoZWlnaHQ6IGF1dG87XG4vLy8gICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuLy8vICAgICBwb3NpdGlvbjogc3RhdGljO1xuLy8vICAgICB3aWR0aDogYXV0bztcbi8vLyAgIH1cbi8vL1xuLy8vIEBzaW5jZSA1LjAuMFxuXG5AbWl4aW4gaGlkZS12aXN1YWxseSgkdG9nZ2xlOiBcImhpZGVcIikge1xuICBAaWYgbm90IGluZGV4KFwiaGlkZVwiIFwidW5oaWRlXCIsICR0b2dnbGUpIHtcbiAgICBAZXJyb3IgXCJgI3skdG9nZ2xlfWAgaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIHRoZSBgJHRvZ2dsZWAgYXJndW1lbnQgaW4gXCIgK1xuICAgICAgXCJ0aGUgYGhpZGUtdmlzdWFsbHlgIG1peGluLiBNdXN0IGJlIGVpdGhlciBgaGlkZWAgb3IgYHVuaGlkZWAuXCI7XG4gIH0gQGVsc2UgaWYgJHRvZ2dsZSA9PSBcImhpZGVcIiB7XG4gICAgYm9yZGVyOiAwO1xuICAgIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtcbiAgICBjbGlwLXBhdGg6IGluc2V0KDEwMCUpO1xuICAgIGhlaWdodDogMXB4O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcGFkZGluZzogMDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB3aWR0aDogMXB4O1xuICB9IEBlbHNlIGlmICR0b2dnbGUgPT0gXCJ1bmhpZGVcIiB7XG4gICAgY2xpcDogYXV0bztcbiAgICBjbGlwLXBhdGg6IG5vbmU7XG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIHBvc2l0aW9uOiBzdGF0aWM7XG4gICAgd2hpdGUtc3BhY2U6IGluaGVyaXQ7XG4gICAgd2lkdGg6IGF1dG87XG4gIH1cbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIFByb3ZpZGVzIGEgY29uY2lzZSwgb25lLWxpbmUgbWV0aG9kIGZvciBzZXR0aW5nIGBtYXJnaW5gIG9uIHNwZWNpZmljIGVkZ2VzXG4vLy8gb2YgYSBib3guIFVzZSBhIGBudWxsYCB2YWx1ZSB0byDigJxza2lw4oCdIGVkZ2VzIG9mIHRoZSBib3ggd2l0aCBzdGFuZGFyZFxuLy8vIENTUyBzaG9ydGhhbmQuXG4vLy9cbi8vLyBAYXJndW1lbnQge2xpc3R9ICR2YWx1ZXNcbi8vLyAgIExpc3Qgb2YgbWFyZ2luIHZhbHVlczsgYWNjZXB0cyBDU1Mgc2hvcnRoYW5kLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBtYXJnaW4obnVsbCBhdXRvKTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBtYXJnaW4tbGVmdDogYXV0bztcbi8vLyAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuLy8vICAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBtYXJnaW4oMTBweCAzZW0gMjB2aCBudWxsKTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xuLy8vICAgICBtYXJnaW4tcmlnaHQ6IDNlbTtcbi8vLyAgICAgbWFyZ2luLXRvcDogMTBweDtcbi8vLyAgIH1cbi8vL1xuLy8vIEByZXF1aXJlIHttaXhpbn0gX2RpcmVjdGlvbmFsLXByb3BlcnR5XG5cbkBtaXhpbiBtYXJnaW4oJHZhbHVlcykge1xuICBAaW5jbHVkZSBfZGlyZWN0aW9uYWwtcHJvcGVydHkobWFyZ2luLCBudWxsLCAkdmFsdWVzKTtcbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIEluY3JlbWVudHMgdXAgb3IgZG93biBhIGRlZmluZWQgc2NhbGUgYW5kIHJldHVybnMgYW4gYWRqdXN0ZWQgdmFsdWUuIFRoaXNcbi8vLyBoZWxwcyBlc3RhYmxpc2ggY29uc2lzdGVudCBtZWFzdXJlbWVudHMgYW5kIHNwYWNpYWwgcmVsYXRpb25zaGlwcyB0aHJvdWdob3V0XG4vLy8geW91ciBwcm9qZWN0LiBXZSBwcm92aWRlIGEgbGlzdCBvZiBjb21tb25seSB1c2VkIHNjYWxlcyBhc1xuLy8vIFtwcmUtZGVmaW5lZCB2YXJpYWJsZXNdW3NjYWxlc10uXG4vLy9cbi8vLyBbc2NhbGVzXTogaHR0cHM6Ly9naXRodWIuY29tL3Rob3VnaHRib3QvYm91cmJvbi9ibG9iL21hc3Rlci9jb3JlL2JvdXJib24vaGVscGVycy9fc2NhbGVzLnNjc3Ncbi8vL1xuLy8vIEBhcmd1bWVudCB7bnVtYmVyICh1bml0bGVzcyl9ICRpbmNyZW1lbnRcbi8vLyAgIEhvdyBtYW55IHN0ZXBzIHRvIGluY3JlbWVudCB1cCBvciBkb3duIHRoZSBzY2FsZS5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bnVtYmVyICh3aXRoIHVuaXQpIHwgbGlzdH0gJHZhbHVlIFsxZW1dXG4vLy8gICBUaGUgYmFzZSB2YWx1ZSB0aGUgc2NhbGUgc3RhcnRzIGF0LiBDYW4gYWxzbyBiZSBzZXQgZ2xvYmFsbHkgdXNpbmcgdGhlXG4vLy8gICBgbW9kdWxhci1zY2FsZS1iYXNlYCBrZXkgaW4gdGhlIEJvdXJib24gc2V0dGluZ3MuXG4vLy9cbi8vLyBAYXJndW1lbnQge251bWJlciAodW5pdGxlc3MpfSAkcmF0aW8gWzEuMjVdXG4vLy8gICBUaGUgcmF0aW8gdGhlIHNjYWxlIGlzIGJ1aWx0IG9uLiBDYW4gYWxzbyBiZSBzZXQgZ2xvYmFsbHkgdXNpbmcgdGhlXG4vLy8gICBgbW9kdWxhci1zY2FsZS1yYXRpb2Aga2V5IGluIHRoZSBCb3VyYm9uIHNldHRpbmdzLlxuLy8vXG4vLy8gQHJldHVybiB7bnVtYmVyICh3aXRoIHVuaXQpfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LXNpemU6IG1vZHVsYXItc2NhbGUoMik7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgZm9udC1zaXplOiAxLjU2MjVlbTtcbi8vLyAgIH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgbWFyZ2luLXJpZ2h0OiBtb2R1bGFyLXNjYWxlKDMsIDJlbSk7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgbWFyZ2luLXJpZ2h0OiAzLjkwNjI1ZW07XG4vLy8gICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGZvbnQtc2l6ZTogbW9kdWxhci1zY2FsZSgzLCAxZW0gMS42ZW0sICRtYWpvci1zZXZlbnRoKTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBmb250LXNpemU6IDNlbTtcbi8vLyAgIH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC8vIEdsb2JhbGx5IGNoYW5nZSB0aGUgYmFzZSByYXRpb1xuLy8vICAgJGJvdXJib246IChcbi8vLyAgICAgXCJtb2R1bGFyLXNjYWxlLXJhdGlvXCI6IDEuMixcbi8vLyAgICk7XG4vLy9cbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgZm9udC1zaXplOiBtb2R1bGFyLXNjYWxlKDMpO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGZvbnQtc2l6ZTogMS43MjhlbTtcbi8vLyAgIH1cbi8vL1xuLy8vIEByZXF1aXJlIHtmdW5jdGlvbn0gX2ZldGNoLWJvdXJib24tc2V0dGluZ1xuXG5AZnVuY3Rpb24gbW9kdWxhci1zY2FsZShcbiAgJGluY3JlbWVudCxcbiAgJHZhbHVlOiBfZmV0Y2gtYm91cmJvbi1zZXR0aW5nKFwibW9kdWxhci1zY2FsZS1iYXNlXCIpLFxuICAkcmF0aW86IF9mZXRjaC1ib3VyYm9uLXNldHRpbmcoXCJtb2R1bGFyLXNjYWxlLXJhdGlvXCIpXG4pIHtcbiAgJHYxOiBudGgoJHZhbHVlLCAxKTtcbiAgJHYyOiBudGgoJHZhbHVlLCBsZW5ndGgoJHZhbHVlKSk7XG4gICR2YWx1ZTogJHYxO1xuXG4gIC8vIHNjYWxlICR2MiB0byBqdXN0IGFib3ZlICR2MVxuICBAd2hpbGUgJHYyID4gJHYxIHtcbiAgICAkdjI6ICgkdjIgLyAkcmF0aW8pOyAvLyB3aWxsIGJlIG9mZi1ieS0xXG4gIH1cbiAgQHdoaWxlICR2MiA8ICR2MSB7XG4gICAgJHYyOiAoJHYyICogJHJhdGlvKTsgLy8gd2lsbCBmaXggb2ZmLWJ5LTFcbiAgfVxuXG4gIC8vIGNoZWNrIEFGVEVSIHNjYWxpbmcgJHYyIHRvIHByZXZlbnQgZG91YmxlLWNvdW50aW5nIGNvcm5lci1jYXNlXG4gICRkb3VibGUtc3RyYW5kZWQ6ICR2MiA+ICR2MTtcblxuICBAaWYgJGluY3JlbWVudCA+IDAge1xuICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJGluY3JlbWVudCB7XG4gICAgICBAaWYgJGRvdWJsZS1zdHJhbmRlZCBhbmQgKCR2MSAqICRyYXRpbykgPiAkdjIge1xuICAgICAgICAkdmFsdWU6ICR2MjtcbiAgICAgICAgJHYyOiAoJHYyICogJHJhdGlvKTtcbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICAkdjE6ICgkdjEgKiAkcmF0aW8pO1xuICAgICAgICAkdmFsdWU6ICR2MTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAaWYgJGluY3JlbWVudCA8IDAge1xuICAgIC8vIGFkanVzdCAkdjIgdG8ganVzdCBiZWxvdyAkdjFcbiAgICBAaWYgJGRvdWJsZS1zdHJhbmRlZCB7XG4gICAgICAkdjI6ICgkdjIgLyAkcmF0aW8pO1xuICAgIH1cblxuICAgIEBmb3IgJGkgZnJvbSAkaW5jcmVtZW50IHRocm91Z2ggLTEge1xuICAgICAgQGlmICRkb3VibGUtc3RyYW5kZWQgYW5kICgkdjEgLyAkcmF0aW8pIDwgJHYyIHtcbiAgICAgICAgJHZhbHVlOiAkdjI7XG4gICAgICAgICR2MjogKCR2MiAvICRyYXRpbyk7XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgJHYxOiAoJHYxIC8gJHJhdGlvKTtcbiAgICAgICAgJHZhbHVlOiAkdjE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkdmFsdWU7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBPdXRwdXRzIHRoZSBgb3ZlcmZsb3ctd3JhcGAgcHJvcGVydHkgYW5kIGl0cyBsZWdhY3kgbmFtZSBgd29yZC13cmFwYCB0b1xuLy8vIHN1cHBvcnQgYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHVzZSBgb3ZlcmZsb3ctd3JhcGAuXG4vLy9cbi8vLyBAYXJndW1lbnQge3N0cmluZ30gJHdyYXAgW2JyZWFrLXdvcmRdXG4vLy8gICBBY2NlcHRlZCBDU1MgdmFsdWVzIGFyZSBgbm9ybWFsYCwgYGJyZWFrLXdvcmRgLCBgaW5oZXJpdGAsIGBpbml0aWFsYCxcbi8vLyAgIG9yIGB1bnNldGAuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAud3JhcHBlciB7XG4vLy8gICAgIEBpbmNsdWRlIG92ZXJmbG93LXdyYXA7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC53cmFwcGVyIHtcbi8vLyAgICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuLy8vICAgICBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1xuLy8vICAgfVxuXG5AbWl4aW4gb3ZlcmZsb3ctd3JhcCgkd3JhcDogYnJlYWstd29yZCkge1xuICB3b3JkLXdyYXA6ICR3cmFwO1xuICAvLyBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgb3JkZXIvcHJvcGVydGllcy1hbHBoYWJldGljYWwtb3JkZXJcbiAgb3ZlcmZsb3ctd3JhcDogJHdyYXA7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBQcm92aWRlcyBhIGNvbmNpc2UgbWV0aG9kIGZvciB0YXJnZXRpbmcgYHBhZGRpbmdgIG9uIHNwZWNpZmljIHNpZGVzIG9mIGFcbi8vLyBib3guIFVzZSBhIGBudWxsYCB2YWx1ZSB0byDigJxza2lw4oCdIGEgc2lkZS5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bGlzdH0gJHZhbHVlc1xuLy8vICAgTGlzdCBvZiBwYWRkaW5nIHZhbHVlczsgYWNjZXB0cyBDU1Mgc2hvcnRoYW5kLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQtb25lIHtcbi8vLyAgICAgQGluY2x1ZGUgcGFkZGluZyhudWxsIDFyZW0pO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudC1vbmUge1xuLy8vICAgICBwYWRkaW5nLWxlZnQ6IDFyZW07XG4vLy8gICAgIHBhZGRpbmctcmlnaHQ6IDFyZW07XG4vLy8gICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAuZWxlbWVudC10d28ge1xuLy8vICAgICBAaW5jbHVkZSBwYWRkaW5nKDEwdmggbnVsbCAxMHB4IDUlKTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQtdHdvIHtcbi8vLyAgICAgcGFkZGluZy1ib3R0b206IDEwcHg7XG4vLy8gICAgIHBhZGRpbmctbGVmdDogNSU7XG4vLy8gICAgIHBhZGRpbmctdG9wOiAxMHZoO1xuLy8vICAgfVxuLy8vXG4vLy8gQHJlcXVpcmUge21peGlufSBfZGlyZWN0aW9uYWwtcHJvcGVydHlcblxuQG1peGluIHBhZGRpbmcoJHZhbHVlcykge1xuICBAaW5jbHVkZSBfZGlyZWN0aW9uYWwtcHJvcGVydHkocGFkZGluZywgbnVsbCwgJHZhbHVlcyk7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBQcm92aWRlcyBhIGNvbmNpc2UsIG9uZS1saW5lIG1ldGhvZCBmb3Igc2V0dGluZyBhbiBlbGVtZW504oCZcyBwb3NpdGlvbmluZ1xuLy8vIHByb3BlcnRpZXM6IGBwb3NpdGlvbmAsIGB0b3BgLCBgcmlnaHRgLCBgYm90dG9tYCBhbmQgYGxlZnRgLiBVc2UgYSBgbnVsbGBcbi8vLyB2YWx1ZSB0byDigJxza2lw4oCdIGFuIGVkZ2Ugb2YgdGhlIGJveC5cbi8vL1xuLy8vIEBhcmd1bWVudCB7c3RyaW5nfSAkcG9zaXRpb25cbi8vLyAgIEEgQ1NTIHBvc2l0aW9uIHZhbHVlLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtsaXN0fSAkYm94LWVkZ2UtdmFsdWVzXG4vLy8gICBMaXN0IG9mIGxlbmd0aHM7IGFjY2VwdHMgQ1NTIHNob3J0aGFuZC5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgQGluY2x1ZGUgcG9zaXRpb24ocmVsYXRpdmUsIDAgbnVsbCBudWxsIDEwZW0pO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGxlZnQ6IDEwZW07XG4vLy8gICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbi8vLyAgICAgdG9wOiAwO1xuLy8vICAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBwb3NpdGlvbihhYnNvbHV0ZSwgMCk7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgcG9zaXRpb246IGFic29sdXRlO1xuLy8vICAgICB0b3A6IDA7XG4vLy8gICAgIHJpZ2h0OiAwO1xuLy8vICAgICBib3R0b206IDA7XG4vLy8gICAgIGxlZnQ6IDA7XG4vLy8gICB9XG4vLy9cbi8vLyBAcmVxdWlyZSB7ZnVuY3Rpb259IF9pcy1sZW5ndGhcbi8vL1xuLy8vIEByZXF1aXJlIHtmdW5jdGlvbn0gX3VucGFjay1zaG9ydGhhbmRcblxuQG1peGluIHBvc2l0aW9uKFxuICAkcG9zaXRpb24sXG4gICRib3gtZWRnZS12YWx1ZXNcbikge1xuICAkYm94LWVkZ2UtdmFsdWVzOiBfdW5wYWNrLXNob3J0aGFuZCgkYm94LWVkZ2UtdmFsdWVzKTtcbiAgJG9mZnNldHM6IChcbiAgICBcInRvcFwiOiBudGgoJGJveC1lZGdlLXZhbHVlcywgMSksXG4gICAgXCJyaWdodFwiOiBudGgoJGJveC1lZGdlLXZhbHVlcywgMiksXG4gICAgXCJib3R0b21cIjogbnRoKCRib3gtZWRnZS12YWx1ZXMsIDMpLFxuICAgIFwibGVmdFwiOiBudGgoJGJveC1lZGdlLXZhbHVlcywgNCksXG4gICk7XG5cbiAgcG9zaXRpb246ICRwb3NpdGlvbjtcblxuICBAZWFjaCAkb2Zmc2V0LCAkdmFsdWUgaW4gJG9mZnNldHMge1xuICAgIEBpZiBfaXMtbGVuZ3RoKCR2YWx1ZSkge1xuICAgICAgI3skb2Zmc2V0fTogJHZhbHVlO1xuICAgIH1cbiAgfVxufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gR2VuZXJhdGVzIHZlbmRvciBwcmVmaXhlcy5cbi8vL1xuLy8vIEBhcmd1bWVudCB7c3RyaW5nfSAkcHJvcGVydHlcbi8vLyAgIFByb3BlcnR5IHRvIHByZWZpeC5cbi8vL1xuLy8vIEBhcmd1bWVudCB7c3RyaW5nfSAkdmFsdWVcbi8vLyAgIFZhbHVlIHRvIHVzZS5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bGlzdH0gJHByZWZpeGVzXG4vLy8gICBWZW5kb3IgcHJlZml4ZXMgdG8gb3V0cHV0LlxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBwcmVmaXhlcihhcHBlYXJhbmNlLCBub25lLCAoXCJ3ZWJraXRcIiwgXCJtb3pcIikpO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbi8vLyAgICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xuLy8vICAgICBhcHBlYXJhbmNlOiBub25lO1xuLy8vICAgfVxuLy8vXG4vLy8gQGF1dGhvciBIdWdvIEdpcmF1ZGVsXG5cbkBtaXhpbiBwcmVmaXhlcihcbiAgJHByb3BlcnR5LFxuICAkdmFsdWUsXG4gICRwcmVmaXhlczogKClcbikge1xuICBAZWFjaCAkcHJlZml4IGluICRwcmVmaXhlcyB7XG4gICAgI3tcIi1cIiArICRwcmVmaXggKyBcIi1cIiArICRwcm9wZXJ0eX06ICR2YWx1ZTtcbiAgfVxuICAjeyRwcm9wZXJ0eX06ICR2YWx1ZTtcbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIE1peGVzIGEgY29sb3Igd2l0aCBibGFjay5cbi8vL1xuLy8vIEBhcmd1bWVudCB7Y29sb3J9ICRjb2xvclxuLy8vXG4vLy8gQGFyZ3VtZW50IHtudW1iZXIgKHBlcmNlbnRhZ2UpfSAkcGVyY2VudFxuLy8vICAgVGhlIGFtb3VudCBvZiBibGFjayB0byBiZSBtaXhlZCBpbi5cbi8vL1xuLy8vIEByZXR1cm4ge2NvbG9yfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBzaGFkZSgjZmZiYjUyLCA2MCUpO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGJhY2tncm91bmQtY29sb3I6ICM2NjRhMjA7XG4vLy8gICB9XG5cbkBmdW5jdGlvbiBzaGFkZShcbiAgJGNvbG9yLFxuICAkcGVyY2VudFxuKSB7XG4gIEBpZiBub3QgX2lzLWNvbG9yKCRjb2xvcikge1xuICAgIEBlcnJvciBcImAjeyRjb2xvcn1gIGlzIG5vdCBhIHZhbGlkIGNvbG9yIGZvciB0aGUgYCRjb2xvcmAgYXJndW1lbnQgaW4gXCIgK1xuICAgICAgXCJ0aGUgYHNoYWRlYCBtaXhpbi5cIjtcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiBtaXgoIzAwMCwgJGNvbG9yLCAkcGVyY2VudCk7XG4gIH1cbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIFNldHMgdGhlIGB3aWR0aGAgYW5kIGBoZWlnaHRgIG9mIHRoZSBlbGVtZW50IGluIG9uZSBzdGF0ZW1lbnQuXG4vLy9cbi8vLyBAYXJndW1lbnQge251bWJlciAod2l0aCB1bml0KSB8IHN0cmluZ30gJHdpZHRoXG4vLy9cbi8vLyBAYXJndW1lbnQge251bWJlciAod2l0aCB1bml0KSB8IHN0cmluZ30gJGhlaWdodCBbJHdpZHRoXVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmZpcnN0LWVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBzaXplKDJlbSk7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5maXJzdC1lbGVtZW50IHtcbi8vLyAgICAgd2lkdGg6IDJlbTtcbi8vLyAgICAgaGVpZ2h0OiAyZW07XG4vLy8gICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAuc2Vjb25kLWVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBzaXplKGF1dG8sIDEwZW0pO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuc2Vjb25kLWVsZW1lbnQge1xuLy8vICAgICB3aWR0aDogYXV0bztcbi8vLyAgICAgaGVpZ2h0OiAxMGVtO1xuLy8vICAgfVxuLy8vXG4vLy8gQHJlcXVpcmUge2Z1bmN0aW9ufSBfaXMtc2l6ZVxuXG5AbWl4aW4gc2l6ZShcbiAgJHdpZHRoLFxuICAkaGVpZ2h0OiAkd2lkdGhcbikge1xuICBAaWYgX2lzLXNpemUoJGhlaWdodCkge1xuICAgIGhlaWdodDogJGhlaWdodDtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yIFwiYCN7JGhlaWdodH1gIGlzIG5vdCBhIHZhbGlkIGxlbmd0aCBmb3IgdGhlIGAkaGVpZ2h0YCBhcmd1bWVudCBcIiArXG4gICAgICBcImluIHRoZSBgc2l6ZWAgbWl4aW4uXCI7XG4gIH1cblxuICBAaWYgX2lzLXNpemUoJHdpZHRoKSB7XG4gICAgd2lkdGg6ICR3aWR0aDtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yIFwiYCN7JHdpZHRofWAgaXMgbm90IGEgdmFsaWQgbGVuZ3RoIGZvciB0aGUgYCR3aWR0aGAgYXJndW1lbnQgXCIgK1xuICAgICAgXCJpbiB0aGUgYHNpemVgIG1peGluLlwiO1xuICB9XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBTdHJpcHMgdGhlIHVuaXQgZnJvbSBhIG51bWJlci5cbi8vL1xuLy8vIEBhcmd1bWVudCB7bnVtYmVyfSAkdmFsdWVcbi8vL1xuLy8vIEByZXR1cm4ge251bWJlciAodW5pdGxlc3MpfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgJGRpbWVuc2lvbjogc3RyaXAtdW5pdCgxMGVtKTtcbi8vL1xuLy8vICAgLy8gT3V0cHV0XG4vLy8gICAkZGltZW5zaW9uOiAxMDtcblxuQGZ1bmN0aW9uIHN0cmlwLXVuaXQoJHZhbHVlKSB7XG4gIEByZXR1cm4gKCR2YWx1ZSAvICgkdmFsdWUgKiAwICsgMSkpO1xufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8vXG4vLy8gQHR5cGUgbGlzdFxuLy8vXG4vLy8gQHJlcXVpcmUge2Z1bmN0aW9ufSBfYXNzaWduLWlucHV0c1xuLy8vXG4vLy8gQHJlcXVpcmUge3ZhcmlhYmxlfSAkX3RleHQtaW5wdXRzLWxpc3Rcbi8vLy9cblxuLy8vIEEgbGlzdCBvZiBhbGwgX3RleHQtYmFzZWRfIEhUTUwgaW5wdXRzLiBQbGVhc2Ugbm90ZSB0aGF0IHlvdSBtdXN0XG4vLy8gaW50ZXJwb2xhdGUgdGhlIHZhcmlhYmxlIChgI3t9YCkgdG8gdXNlIGl0IGFzIGEgc2VsZWN0b3IuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAjeyRhbGwtdGV4dC1pbnB1dHN9IHtcbi8vLyAgICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgW3R5cGU9J2NvbG9yJ10sXG4vLy8gICBbdHlwZT0nZGF0ZSddLFxuLy8vICAgW3R5cGU9J2RhdGV0aW1lJ10sXG4vLy8gICBbdHlwZT0nZGF0ZXRpbWUtbG9jYWwnXSxcbi8vLyAgIFt0eXBlPSdlbWFpbCddLFxuLy8vICAgW3R5cGU9J21vbnRoJ10sXG4vLy8gICBbdHlwZT0nbnVtYmVyJ10sXG4vLy8gICBbdHlwZT0ncGFzc3dvcmQnXSxcbi8vLyAgIFt0eXBlPSdzZWFyY2gnXSxcbi8vLyAgIFt0eXBlPSd0ZWwnXSxcbi8vLyAgIFt0eXBlPSd0ZXh0J10sXG4vLy8gICBbdHlwZT0ndGltZSddLFxuLy8vICAgW3R5cGU9J3VybCddLFxuLy8vICAgW3R5cGU9J3dlZWsnXSxcbi8vLyAgIGlucHV0Om5vdChbdHlwZV0pLFxuLy8vICAgdGV4dGFyZWEge1xuLy8vICAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuLy8vICAgfVxuXG4kYWxsLXRleHQtaW5wdXRzOiBfYXNzaWduLWlucHV0cygkX3RleHQtaW5wdXRzLWxpc3QpO1xuXG4vLy8gQSBsaXN0IG9mIGFsbCBfdGV4dC1iYXNlZF8gSFRNTCBpbnB1dHMgd2l0aCB0aGUgYDphY3RpdmVgIHBzZXVkby1jbGFzc1xuLy8vIGFwcGxpZWQuIFBsZWFzZSBub3RlIHRoYXQgeW91IG11c3QgaW50ZXJwb2xhdGUgdGhlIHZhcmlhYmxlIChgI3t9YCkgdG8gdXNlXG4vLy8gaXQgYXMgYSBzZWxlY3Rvci5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgICN7JGFsbC10ZXh0LWlucHV0cy1hY3RpdmV9IHtcbi8vLyAgICAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgW3R5cGU9J2NvbG9yJ106YWN0aXZlLFxuLy8vICAgW3R5cGU9J2RhdGUnXTphY3RpdmUsXG4vLy8gICBbdHlwZT0nZGF0ZXRpbWUnXTphY3RpdmUsXG4vLy8gICBbdHlwZT0nZGF0ZXRpbWUtbG9jYWwnXTphY3RpdmUsXG4vLy8gICBbdHlwZT0nZW1haWwnXTphY3RpdmUsXG4vLy8gICBbdHlwZT0nbW9udGgnXTphY3RpdmUsXG4vLy8gICBbdHlwZT0nbnVtYmVyJ106YWN0aXZlLFxuLy8vICAgW3R5cGU9J3Bhc3N3b3JkJ106YWN0aXZlLFxuLy8vICAgW3R5cGU9J3NlYXJjaCddOmFjdGl2ZSxcbi8vLyAgIFt0eXBlPSd0ZWwnXTphY3RpdmUsXG4vLy8gICBbdHlwZT0ndGV4dCddOmFjdGl2ZSxcbi8vLyAgIFt0eXBlPSd0aW1lJ106YWN0aXZlLFxuLy8vICAgW3R5cGU9J3VybCddOmFjdGl2ZSxcbi8vLyAgIFt0eXBlPSd3ZWVrJ106YWN0aXZlLFxuLy8vICAgaW5wdXQ6bm90KFt0eXBlXSk6YWN0aXZlLFxuLy8vICAgdGV4dGFyZWE6YWN0aXZlIHtcbi8vLyAgICAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcbi8vLyAgIH1cblxuJGFsbC10ZXh0LWlucHV0cy1hY3RpdmU6IF9hc3NpZ24taW5wdXRzKCRfdGV4dC1pbnB1dHMtbGlzdCwgYWN0aXZlKTtcblxuLy8vIEEgbGlzdCBvZiBhbGwgX3RleHQtYmFzZWRfIEhUTUwgaW5wdXRzIHdpdGggdGhlIGA6Zm9jdXNgIHBzZXVkby1jbGFzc1xuLy8vIGFwcGxpZWQuIFBsZWFzZSBub3RlIHRoYXQgeW91IG11c3QgaW50ZXJwb2xhdGUgdGhlIHZhcmlhYmxlIChgI3t9YCkgdG8gdXNlXG4vLy8gaXQgYXMgYSBzZWxlY3Rvci5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgICN7JGFsbC10ZXh0LWlucHV0cy1mb2N1c30ge1xuLy8vICAgICBib3JkZXI6IDFweCBzb2xpZCAjMTU2NWMwO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICBbdHlwZT0nY29sb3InXTpmb2N1cyxcbi8vLyAgIFt0eXBlPSdkYXRlJ106Zm9jdXMsXG4vLy8gICBbdHlwZT0nZGF0ZXRpbWUnXTpmb2N1cyxcbi8vLyAgIFt0eXBlPSdkYXRldGltZS1sb2NhbCddOmZvY3VzLFxuLy8vICAgW3R5cGU9J2VtYWlsJ106Zm9jdXMsXG4vLy8gICBbdHlwZT0nbW9udGgnXTpmb2N1cyxcbi8vLyAgIFt0eXBlPSdudW1iZXInXTpmb2N1cyxcbi8vLyAgIFt0eXBlPSdwYXNzd29yZCddOmZvY3VzLFxuLy8vICAgW3R5cGU9J3NlYXJjaCddOmZvY3VzLFxuLy8vICAgW3R5cGU9J3RlbCddOmZvY3VzLFxuLy8vICAgW3R5cGU9J3RleHQnXTpmb2N1cyxcbi8vLyAgIFt0eXBlPSd0aW1lJ106Zm9jdXMsXG4vLy8gICBbdHlwZT0ndXJsJ106Zm9jdXMsXG4vLy8gICBbdHlwZT0nd2VlayddOmZvY3VzLFxuLy8vICAgaW5wdXQ6bm90KFt0eXBlXSk6Zm9jdXMsXG4vLy8gICB0ZXh0YXJlYTpmb2N1cyB7XG4vLy8gICAgIGJvcmRlcjogMXB4IHNvbGlkICMxNTY1YzA7XG4vLy8gICB9XG5cbiRhbGwtdGV4dC1pbnB1dHMtZm9jdXM6IF9hc3NpZ24taW5wdXRzKCRfdGV4dC1pbnB1dHMtbGlzdCwgZm9jdXMpO1xuXG4vLy8gQSBsaXN0IG9mIGFsbCBfdGV4dC1iYXNlZF8gSFRNTCBpbnB1dHMgd2l0aCB0aGUgYDpob3ZlcmAgcHNldWRvLWNsYXNzXG4vLy8gYXBwbGllZC4gUGxlYXNlIG5vdGUgdGhhdCB5b3UgbXVzdCBpbnRlcnBvbGF0ZSB0aGUgdmFyaWFibGUgKGAje31gKSB0byB1c2Vcbi8vLyBpdCBhcyBhIHNlbGVjdG9yLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgI3skYWxsLXRleHQtaW5wdXRzLWhvdmVyfSB7XG4vLy8gICAgIGJvcmRlcjogMXB4IHNvbGlkICNhYWE7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIFt0eXBlPSdjb2xvciddOmhvdmVyLFxuLy8vICAgW3R5cGU9J2RhdGUnXTpob3Zlcixcbi8vLyAgIFt0eXBlPSdkYXRldGltZSddOmhvdmVyLFxuLy8vICAgW3R5cGU9J2RhdGV0aW1lLWxvY2FsJ106aG92ZXIsXG4vLy8gICBbdHlwZT0nZW1haWwnXTpob3Zlcixcbi8vLyAgIFt0eXBlPSdtb250aCddOmhvdmVyLFxuLy8vICAgW3R5cGU9J251bWJlciddOmhvdmVyLFxuLy8vICAgW3R5cGU9J3Bhc3N3b3JkJ106aG92ZXIsXG4vLy8gICBbdHlwZT0nc2VhcmNoJ106aG92ZXIsXG4vLy8gICBbdHlwZT0ndGVsJ106aG92ZXIsXG4vLy8gICBbdHlwZT0ndGV4dCddOmhvdmVyLFxuLy8vICAgW3R5cGU9J3RpbWUnXTpob3Zlcixcbi8vLyAgIFt0eXBlPSd1cmwnXTpob3Zlcixcbi8vLyAgIFt0eXBlPSd3ZWVrJ106aG92ZXIsXG4vLy8gICBpbnB1dDpub3QoW3R5cGVdKTpob3Zlcixcbi8vLyAgIHRleHRhcmVhOmhvdmVyIHtcbi8vLyAgICAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcbi8vLyAgIH1cblxuJGFsbC10ZXh0LWlucHV0cy1ob3ZlcjogX2Fzc2lnbi1pbnB1dHMoJF90ZXh0LWlucHV0cy1saXN0LCBob3Zlcik7XG5cbi8vLyBBIGxpc3Qgb2YgYWxsIF90ZXh0LWJhc2VkXyBIVE1MIGlucHV0cyB3aXRoIHRoZSBgOmludmFsaWRgIHBzZXVkby1jbGFzc1xuLy8vIGFwcGxpZWQuIFBsZWFzZSBub3RlIHRoYXQgeW91IG11c3QgaW50ZXJwb2xhdGUgdGhlIHZhcmlhYmxlIChgI3t9YCkgdG8gdXNlXG4vLy8gaXQgYXMgYSBzZWxlY3Rvci5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgICN7JGFsbC10ZXh0LWlucHV0cy1pbnZhbGlkfSB7XG4vLy8gICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMGY7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIFt0eXBlPSdjb2xvciddOmludmFsaWQsXG4vLy8gICBbdHlwZT0nZGF0ZSddOmludmFsaWQsXG4vLy8gICBbdHlwZT0nZGF0ZXRpbWUnXTppbnZhbGlkLFxuLy8vICAgW3R5cGU9J2RhdGV0aW1lLWxvY2FsJ106aW52YWxpZCxcbi8vLyAgIFt0eXBlPSdlbWFpbCddOmludmFsaWQsXG4vLy8gICBbdHlwZT0nbW9udGgnXTppbnZhbGlkLFxuLy8vICAgW3R5cGU9J251bWJlciddOmludmFsaWQsXG4vLy8gICBbdHlwZT0ncGFzc3dvcmQnXTppbnZhbGlkLFxuLy8vICAgW3R5cGU9J3NlYXJjaCddOmludmFsaWQsXG4vLy8gICBbdHlwZT0ndGVsJ106aW52YWxpZCxcbi8vLyAgIFt0eXBlPSd0ZXh0J106aW52YWxpZCxcbi8vLyAgIFt0eXBlPSd0aW1lJ106aW52YWxpZCxcbi8vLyAgIFt0eXBlPSd1cmwnXTppbnZhbGlkLFxuLy8vICAgW3R5cGU9J3dlZWsnXTppbnZhbGlkLFxuLy8vICAgaW5wdXQ6bm90KFt0eXBlXSk6aW52YWxpZCxcbi8vLyAgIHRleHRhcmVhOmludmFsaWQge1xuLy8vICAgICBib3JkZXI6IDFweCBzb2xpZCAjMDBmO1xuLy8vICAgfVxuXG4kYWxsLXRleHQtaW5wdXRzLWludmFsaWQ6IF9hc3NpZ24taW5wdXRzKCRfdGV4dC1pbnB1dHMtbGlzdCwgaW52YWxpZCk7XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLy9cbi8vLyBDU1MgY3ViaWMtYmV6aWVyIHRpbWluZyBmdW5jdGlvbnMuXG4vLy9cbi8vLyBAbGluayBodHRwczovL2dvby5nbC9wOHU2U0tcbi8vL1xuLy8vIEB0eXBlIHN0cmluZ1xuLy8vL1xuXG4kZWFzZS1pbi1xdWFkOiBjdWJpYy1iZXppZXIoMC41NSwgMC4wODUsIDAuNjgsIDAuNTMpO1xuJGVhc2UtaW4tY3ViaWM6IGN1YmljLWJlemllcigwLjU1LCAwLjA1NSwgMC42NzUsIDAuMTkpO1xuJGVhc2UtaW4tcXVhcnQ6IGN1YmljLWJlemllcigwLjg5NSwgMC4wMywgMC42ODUsIDAuMjIpO1xuJGVhc2UtaW4tcXVpbnQ6IGN1YmljLWJlemllcigwLjc1NSwgMC4wNSwgMC44NTUsIDAuMDYpO1xuJGVhc2UtaW4tc2luZTogY3ViaWMtYmV6aWVyKDAuNDcsIDAsIDAuNzQ1LCAwLjcxNSk7XG4kZWFzZS1pbi1leHBvOiBjdWJpYy1iZXppZXIoMC45NSwgMC4wNSwgMC43OTUsIDAuMDM1KTtcbiRlYXNlLWluLWNpcmM6IGN1YmljLWJlemllcigwLjYsIDAuMDQsIDAuOTgsIDAuMzM1KTtcbiRlYXNlLWluLWJhY2s6IGN1YmljLWJlemllcigwLjYsIC0wLjI4LCAwLjczNSwgMC4wNDUpO1xuXG4kZWFzZS1vdXQtcXVhZDogY3ViaWMtYmV6aWVyKDAuMjUsIDAuNDYsIDAuNDUsIDAuOTQpO1xuJGVhc2Utb3V0LWN1YmljOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcbiRlYXNlLW91dC1xdWFydDogY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKTtcbiRlYXNlLW91dC1xdWludDogY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpO1xuJGVhc2Utb3V0LXNpbmU6IGN1YmljLWJlemllcigwLjM5LCAwLjU3NSwgMC41NjUsIDEpO1xuJGVhc2Utb3V0LWV4cG86IGN1YmljLWJlemllcigwLjE5LCAxLCAwLjIyLCAxKTtcbiRlYXNlLW91dC1jaXJjOiBjdWJpYy1iZXppZXIoMC4wNzUsIDAuODIsIDAuMTY1LCAxKTtcbiRlYXNlLW91dC1iYWNrOiBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyLCAxLjI3NSk7XG5cbiRlYXNlLWluLW91dC1xdWFkOiBjdWJpYy1iZXppZXIoMC40NTUsIDAuMDMsIDAuNTE1LCAwLjk1NSk7XG4kZWFzZS1pbi1vdXQtY3ViaWM6IGN1YmljLWJlemllcigwLjY0NSwgMC4wNDUsIDAuMzU1LCAxKTtcbiRlYXNlLWluLW91dC1xdWFydDogY3ViaWMtYmV6aWVyKDAuNzcsIDAsIDAuMTc1LCAxKTtcbiRlYXNlLWluLW91dC1xdWludDogY3ViaWMtYmV6aWVyKDAuODYsIDAsIDAuMDcsIDEpO1xuJGVhc2UtaW4tb3V0LXNpbmU6IGN1YmljLWJlemllcigwLjQ0NSwgMC4wNSwgMC41NSwgMC45NSk7XG4kZWFzZS1pbi1vdXQtZXhwbzogY3ViaWMtYmV6aWVyKDEsIDAsIDAsIDEpO1xuJGVhc2UtaW4tb3V0LWNpcmM6IGN1YmljLWJlemllcigwLjc4NSwgMC4xMzUsIDAuMTUsIDAuODYpO1xuJGVhc2UtaW4tb3V0LWJhY2s6IGN1YmljLWJlemllcigwLjY4LCAtMC41NSwgMC4yNjUsIDEuNTUpO1xuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gTWl4ZXMgYSBjb2xvciB3aXRoIHdoaXRlLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtjb2xvcn0gJGNvbG9yXG4vLy9cbi8vLyBAYXJndW1lbnQge251bWJlciAocGVyY2VudGFnZSl9ICRwZXJjZW50XG4vLy8gICBUaGUgYW1vdW50IG9mIHdoaXRlIHRvIGJlIG1peGVkIGluLlxuLy8vXG4vLy8gQHJldHVybiB7Y29sb3J9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGJhY2tncm91bmQtY29sb3I6IHRpbnQoIzZlY2FhNiwgNDAlKTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYThkZmM5O1xuLy8vICAgfVxuXG5AZnVuY3Rpb24gdGludChcbiAgJGNvbG9yLFxuICAkcGVyY2VudFxuKSB7XG4gIEBpZiBub3QgX2lzLWNvbG9yKCRjb2xvcikge1xuICAgIEBlcnJvciBcImAjeyRjb2xvcn1gIGlzIG5vdCBhIHZhbGlkIGNvbG9yIGZvciB0aGUgYCRjb2xvcmAgYXJndW1lbnQgaW4gXCIgK1xuICAgICAgXCJ0aGUgYHRpbnRgIG1peGluLlwiO1xuICB9IEBlbHNlIHtcbiAgICBAcmV0dXJuIG1peCgjZmZmLCAkY29sb3IsICRwZXJjZW50KTtcbiAgfVxufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gR2VuZXJhdGVzIGEgdHJpYW5nbGUgcG9pbnRpbmcgaW4gYSBzcGVjaWZpZWQgZGlyZWN0aW9uLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtzdHJpbmd9ICRkaXJlY3Rpb25cbi8vLyAgIFRoZSBkaXJlY3Rpb24gdGhlIHRyaWFuZ2xlIHNob3VsZCBwb2ludC4gQWNjZXB0cyBgdXBgLCBgdXAtcmlnaHRgLFxuLy8vICAgYHJpZ2h0YCwgYGRvd24tcmlnaHRgLCBgZG93bmAsIGBkb3duLWxlZnRgLCBgbGVmdGAgb3IgYHVwLWxlZnRgLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtudW1iZXIgKHdpdGggdW5pdCl9ICR3aWR0aFxuLy8vICAgV2lkdGggb2YgdGhlIHRyaWFuZ2xlLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtudW1iZXIgKHdpdGggdW5pdCl9ICRoZWlnaHRcbi8vLyAgIEhlaWdodCBvZiB0aGUgdHJpYW5nbGUuXG4vLy9cbi8vLyBAYXJndW1lbnQge2NvbG9yfSAkY29sb3Jcbi8vLyAgIENvbG9yIG9mIHRoZSB0cmlhbmdsZS5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgJjo6YmVmb3JlIHtcbi8vLyAgICAgICBAaW5jbHVkZSB0cmlhbmdsZShcInVwXCIsIDJyZW0sIDFyZW0sICNiMjVjOWMpO1xuLy8vICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4vLy8gICAgIH1cbi8vLyAgIH1cbi8vL1xuLy8vICAgLy8gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQ6OmJlZm9yZSB7XG4vLy8gICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4vLy8gICAgIGhlaWdodDogMDtcbi8vLyAgICAgd2lkdGg6IDA7XG4vLy8gICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgI2IyNWM5Yztcbi8vLyAgICAgYm9yZGVyLXdpZHRoOiAwIDFyZW0gMXJlbTtcbi8vLyAgICAgY29udGVudDogXCJcIjtcbi8vLyAgIH1cblxuQG1peGluIHRyaWFuZ2xlKFxuICAkZGlyZWN0aW9uLFxuICAkd2lkdGgsXG4gICRoZWlnaHQsXG4gICRjb2xvclxuKSB7XG4gIEBpZiBub3QgaW5kZXgoXG4gICAgXCJ1cFwiIFwidXAtcmlnaHRcIiBcInJpZ2h0XCIgXCJkb3duLXJpZ2h0XCIgXCJkb3duXCIgXCJkb3duLWxlZnRcIiBcImxlZnRcIiBcInVwLWxlZnRcIixcbiAgICAkZGlyZWN0aW9uXG4gICkge1xuICAgIEBlcnJvciBcIkRpcmVjdGlvbiBtdXN0IGJlIGB1cGAsIGB1cC1yaWdodGAsIGByaWdodGAsIGBkb3duLXJpZ2h0YCwgXCIgK1xuICAgICAgXCJgZG93bmAsIGBkb3duLWxlZnRgLCBgbGVmdGAgb3IgYHVwLWxlZnRgLlwiO1xuICB9IEBlbHNlIGlmIG5vdCBfaXMtY29sb3IoJGNvbG9yKSB7XG4gICAgQGVycm9yIFwiYCN7JGNvbG9yfWAgaXMgbm90IGEgdmFsaWQgY29sb3IgZm9yIHRoZSBgJGNvbG9yYCBhcmd1bWVudCBpbiBcIiArXG4gICAgICBcInRoZSBgdHJpYW5nbGVgIG1peGluLlwiO1xuICB9IEBlbHNlIHtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGhlaWdodDogMDtcbiAgICB3aWR0aDogMDtcblxuICAgIEBpZiAkZGlyZWN0aW9uID09IFwidXBcIiB7XG4gICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICRjb2xvcjtcbiAgICAgIGJvcmRlci13aWR0aDogMCAoJHdpZHRoIC8gMikgJGhlaWdodDtcbiAgICB9IEBlbHNlIGlmICRkaXJlY3Rpb24gPT0gXCJ1cC1yaWdodFwiIHtcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgJGNvbG9yIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLXdpZHRoOiAwICR3aWR0aCAkd2lkdGggMDtcbiAgICB9IEBlbHNlIGlmICRkaXJlY3Rpb24gPT0gXCJyaWdodFwiIHtcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgJGNvbG9yO1xuICAgICAgYm9yZGVyLXdpZHRoOiAoJGhlaWdodCAvIDIpIDAgKCRoZWlnaHQgLyAyKSAkd2lkdGg7XG4gICAgfSBAZWxzZSBpZiAkZGlyZWN0aW9uID09IFwiZG93bi1yaWdodFwiIHtcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgJGNvbG9yO1xuICAgICAgYm9yZGVyLXdpZHRoOiAwIDAgJHdpZHRoICR3aWR0aDtcbiAgICB9IEBlbHNlIGlmICRkaXJlY3Rpb24gPT0gXCJkb3duXCIge1xuICAgICAgYm9yZGVyLWNvbG9yOiAkY29sb3IgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXItd2lkdGg6ICRoZWlnaHQgKCR3aWR0aCAvIDIpIDA7XG4gICAgfSBAZWxzZSBpZiAkZGlyZWN0aW9uID09IFwiZG93bi1sZWZ0XCIge1xuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAkY29sb3I7XG4gICAgICBib3JkZXItd2lkdGg6ICR3aWR0aCAwIDAgJHdpZHRoO1xuICAgIH0gQGVsc2UgaWYgJGRpcmVjdGlvbiA9PSBcImxlZnRcIiB7XG4gICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50ICRjb2xvciB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbiAgICAgIGJvcmRlci13aWR0aDogKCRoZWlnaHQgLyAyKSAkd2lkdGggKCRoZWlnaHQgLyAyKSAwO1xuICAgIH0gQGVsc2UgaWYgJGRpcmVjdGlvbiA9PSBcInVwLWxlZnRcIiB7XG4gICAgICBib3JkZXItY29sb3I6ICRjb2xvciB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbiAgICAgIGJvcmRlci13aWR0aDogJHdpZHRoICR3aWR0aCAwIDA7XG4gICAgfVxuICB9XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbi8vLyBHZW5lcmF0ZXMgdmVuZG9yIHByZWZpeGVzIGZvciB2YWx1ZXMuXG4vLy9cbi8vLyBAYXJndW1lbnQge3N0cmluZ30gJHByb3BlcnR5XG4vLy8gICBQcm9wZXJ0eSB0byB1c2UuXG4vLy9cbi8vLyBAYXJndW1lbnQge3N0cmluZ30gJHZhbHVlXG4vLy8gICBWYWx1ZSB0byBwcmVmaXguXG4vLy9cbi8vLyBAYXJndW1lbnQge2xpc3R9ICRwcmVmaXhlc1xuLy8vICAgVmVuZG9yIHByZWZpeGVzIHRvIG91dHB1dC5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3Ncbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgQGluY2x1ZGUgdmFsdWUtcHJlZml4ZXIoY3Vyc29yLCBncmFiLCAoXCJ3ZWJraXRcIiwgXCJtb3pcIikpO1xuLy8vICAgfVxuLy8vXG4vLy8gICAvLyBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGN1cnNvcjogLXdlYmtpdC1ncmFiO1xuLy8vICAgICBjdXJzb3I6IC1tb3otZ3JhYjtcbi8vLyAgICAgY3Vyc29yOiBncmFiO1xuLy8vICAgfVxuLy8vXG4vLy8gQGF1dGhvciBNYXR0aGV3IFRvYmlhc3pcblxuQG1peGluIHZhbHVlLXByZWZpeGVyKFxuICAkcHJvcGVydHksXG4gICR2YWx1ZSxcbiAgJHByZWZpeGVzOiAoKVxuKSB7XG4gIEBlYWNoICRwcmVmaXggaW4gJHByZWZpeGVzIHtcbiAgICAjeyRwcm9wZXJ0eX06ICN7XCItXCIgKyAkcHJlZml4ICsgXCItXCIgKyAkdmFsdWV9O1xuICB9XG4gICN7JHByb3BlcnR5fTogJHZhbHVlO1xufVxuIiwiLypcclxuICogMS4gSW1wb3J0IHVybCAoZm9ybSBETlMpXHJcbiAqIDIuIEZvbnQtZmFjZSBtaXhpblxyXG4gKiAzLiBBZGRpbmcgYnkgRm9udC1mYWNlXHJcbiAqXHJcbiovXHJcblxyXG5cclxuLy8gMS4gSW1wb3J0IHVybCAoZm9ybSBETlMpXHJcbi8vIFxyXG4vLyBwbGFjZWhvbGRlcnM6XHJcbi8vIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um9ib3RvOjEwMCwzMDAsNDAwLDUwMCw3MDAmc3Vic2V0PWN5cmlsbGljJyk7XHJcbi8vIEBpbXBvcnQgJy4uL2ZvbnRzL3NvY2lhbC1pY29ucy9zdHlsZXMnOyAvL1xyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vIDIuIEZvbnQtZmFjZSBtaXhpblxyXG5cclxuQG1peGluIGZvbnQtZmFjZSgkbmFtZSwgJHBhdGgsICR3ZWlnaHQ6IG51bGwsICRzdHlsZTogbnVsbCwgJGV4dHM6IGVvdCB3b2ZmMiB3b2ZmIHR0ZiBzdmcpIHtcclxuICAgICRzcmM6IG51bGw7XHJcblxyXG4gICAgJGV4dG1vZHM6IChcclxuICAgICAgICBlb3Q6IFwiP1wiLFxyXG4gICAgICAgIHN2ZzogXCIjXCIgKyBzdHItcmVwbGFjZSgkbmFtZSwgXCIgXCIsIFwiX1wiKVxyXG4gICAgKTtcclxuXHJcbiAgICAkZm9ybWF0czogKFxyXG4gICAgICAgIG90ZjogXCJvcGVudHlwZVwiLFxyXG4gICAgICAgIHR0ZjogXCJ0cnVldHlwZVwiXHJcbiAgICApO1xyXG5cclxuICAgIEBlYWNoICRleHQgaW4gJGV4dHMge1xyXG4gICAgICAgICRleHRtb2Q6IGlmKG1hcC1oYXMta2V5KCRleHRtb2RzLCAkZXh0KSwgJGV4dCArIG1hcC1nZXQoJGV4dG1vZHMsICRleHQpLCAkZXh0KTtcclxuICAgICAgICAkZm9ybWF0OiBpZihtYXAtaGFzLWtleSgkZm9ybWF0cywgJGV4dCksIG1hcC1nZXQoJGZvcm1hdHMsICRleHQpLCAkZXh0KTtcclxuICAgICAgICAkc3JjOiBhcHBlbmQoJHNyYywgdXJsKHF1b3RlKCRwYXRoICsgXCIuXCIgKyAkZXh0bW9kKSkgZm9ybWF0KHF1b3RlKCRmb3JtYXQpKSwgY29tbWEpO1xyXG4gICAgfVxyXG5cclxuICAgIEBmb250LWZhY2Uge1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiBxdW90ZSgkbmFtZSk7XHJcbiAgICAgICAgZm9udC1zdHlsZTogJHN0eWxlO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAkd2VpZ2h0O1xyXG4gICAgICAgIHNyYzogJHNyYztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8vIDMuIEFkZGluZyBieSBGb250LWZhY2VcclxuXHJcbi8vIEZpbGUgc3RydWN0dXJlIGZvciBmb250czogLi9hcHAvZm9udHMvZm9udE5hbWUvZmlsZU5hbWUudHRmOyA6XHJcbi8vIFxyXG4vLyBAaW5jbHVkZSBmb250LWZhY2UoTGF0bywgJy4uL2ZvbnRzL0xhdG8vTGF0by1SZWd1bGFyJywgbm9ybWFsLCBub3JtYWwsIHdvZmYyIHdvZmYgdHRmIHN2Zyk7IFxyXG4vLyBAaW5jbHVkZSBmb250LWZhY2UoTGF0bywgJy4uL2ZvbnRzL0xhdG8vTGF0by1NZWRpdW0nLCA1MDAsIG5vcm1hbCwgd29mZjIgd29mZiB0dGYgc3ZnKTsgXHJcbi8vIEBpbmNsdWRlIGZvbnQtZmFjZShMYXRvLCAnLi4vZm9udHMvTGF0by9MYXRvLU1lZGl1bScsIGJvbGQsIG5vcm1hbCwgd29mZjIgd29mZiB0dGYgc3ZnKTsgXHJcblxyXG4vLyBAaW5jbHVkZSBmb250LWZhY2UoU2FtcGxpbm8sIGZvbnRzL1NhbXBsaW5vKTsgXHJcbkBpbmNsdWRlIGZvbnQtZmFjZShteWZvbnQsIGZvbnRzL215Zm9udCk7IFxyXG4vLyBAaW5jbHVkZSBmb250LWZhY2UoU0ZVSS1UZXh0LUxpZ2h0LCBmb250cy9TRlVJLVRleHQtTGlnaHQpOyBcclxuLy8gQGluY2x1ZGUgZm9udC1mYWNlKFNGVUktVGV4dC1MaWdodCwgZm9udHMvU0ZVSS1UZXh0LUJvbGQpOyBcclxuLy8gQGluY2x1ZGUgZm9udC1mYWNlKFNGVUktVGV4dC1MaWdodCwgZm9udHMvU0ZVSS1UZXh0LU1lZGl1bSk7IFxyXG4vLyBAaW5jbHVkZSBmb250LWZhY2UoJ3NvY2lhbC1pY29ucycsIGZvbnRzL3NvY2lhbC1pY29ucyk7IFxyXG5cclxuXHJcbiIsIlxyXG4vLyBJbnB1dCBkYXRhOlxyXG4kY29sdW1uczogMTI7XHJcbiRjb2x1bW5zX2dhcDogMTU7XHJcbiRjb250YWluZXJfd2lkdGg6IDE0MDA7XHJcbi8vICRjb2x1bW5fbmFtZTogJ2RzXyc7XHJcbiRicmVha3BvaW50c19iZXR3ZWVuOiAncmVzcG9uc2l2ZSc7IC8vICdyZXNwb25zaXZlJyB8fCAnZml4ZWQnLiBXaGVuIHJlc3BvbnNpdmUgLSAnY29udGFpbmVyX21heCcgZG9uJ3QgdXNlLlxyXG5cclxuXHJcbiRtb2R1bGVzX2Rpc3BsYXk6ICggXHJcbiAgICBibG9jazogMSxcclxuICAgIGlubGluZS1ibG9jazogMCxcclxuICAgIGZsZXg6IDFcclxuKTtcclxuXHJcblxyXG4kZGV2aWNlczogKCBcclxuICAgIG12XzogKFxyXG4gICAgICAgIGJyZWFrcG9pbnQ6IDMyMCxcclxuICAgICAgICBjb250YWluZXJfbWF4OiAzMDAsXHJcbiAgICAgICAgZm9udF9iYXNlOiAxNXB4LFxyXG4gICAgICAgIG1zX2NvZWZmOiAxLjEwLFxyXG4gICAgKSxcclxuICAgIG1oXzogKFxyXG4gICAgICAgIGJyZWFrcG9pbnQ6IDU3NixcclxuICAgICAgICBjb250YWluZXJfbWF4OiA1NDAsXHJcbiAgICAgICAgZm9udF9iYXNlOiAxNXB4LFxyXG4gICAgICAgIG1zX2NvZWZmOiAxLjEwLFxyXG4gICAgKSxcclxuICAgIHRiXzogKFxyXG4gICAgICAgIGJyZWFrcG9pbnQ6IDc2OCxcclxuICAgICAgICBjb250YWluZXJfbWF4OiA3NTAsXHJcbiAgICAgICAgZm9udF9iYXNlOiAxNXB4LFxyXG4gICAgICAgIG1zX2NvZWZmOiAxLjE3LFxyXG4gICAgKSwgXHJcbiAgICBkc186IChcclxuICAgICAgICBicmVha3BvaW50OiAxMDI0LFxyXG4gICAgICAgIGNvbnRhaW5lcl9tYXg6IDk2MCxcclxuICAgICAgICBmb250X2Jhc2U6IDE1cHgsXHJcbiAgICAgICAgbXNfY29lZmY6IDEuMTdcclxuICAgICksXHJcbiAgICBoZF86IChcclxuICAgICAgICBicmVha3BvaW50OiAxNDQwLFxyXG4gICAgICAgIGNvbnRhaW5lcl9tYXg6IDE0MDAsXHJcbiAgICAgICAgZm9udF9iYXNlOiAxNXB4LFxyXG4gICAgICAgIG1zX2NvZWZmOiAxLjE3XHJcbiAgICApICAgICAgXHJcbik7XHJcblxyXG5cclxuLy8gSW1wb3J0IG1vZHVsZSBcclxuQGltcG9ydCAnbm9kZV9tb2R1bGVzL213LWdyaWQvc3JjL19td2dyaWQuc2Nzcyc7IiwiLypcclxuKiBPcHRpb25zXHJcbiogMS4gU3RydWN0dXJlIGVsZW1lbnRzIFxyXG4qIDIuIE1vZHVsZXMgZGlzcGxheVxyXG4qIDMuIENvbHVtbnNcclxuKiA0LiBBdXhpbGlhcnkgZWxlbWVudHNcclxuKiA1LiBDb2xsYXBzZSBcclxuKiA2LiBSZXNwb25zaXZlIHV0aWxpdGVzXHJcbiogNy4gVGV4dCB1dHVsaXRlc1xyXG4qIDguIFNDU1MgdXR1bGl0ZXNcclxuKiAgIDguMSBGdW5jdGlvbnNcclxuKiAgIDguMSBNaXhpbnNcclxuKi9cclxuXHJcbi8vIFRPRE9cclxuLypcclxuQWRkICRjb2x1bW5zIGdhcCBpbiBkZXZpY2VzIGZvciBlYWNoIGRldmljZSxcclxuaW4gYWxsIHNsZWN0b3JzIHdoZXJlIHVzaW5nICRjb2x1bW5zX2dhcCB1c2UgY29sdW1uIGdhcCBmcm9tIGRldmljZXNcclxuaW4gZGVmYXVsdCAkZGV2aWNlcyBhZGQgZ2xvYmFsICRjb2x1bW5zX2dhcFxyXG4qL1xyXG4vLyBQcm9ibGVtczpcclxuXHJcbi8vIDEpIHBhZGRpbmctbGVmdDogIG1hcC1nZXQoJGRldmljZV9vYmosIGNvbHVtbnNfZ2FwKStweDsgLy8gRXJyb3I6IEludmFsaWQgbnVsbCBvcGVyYXRpb246IFwibnVsbCBwbHVzIFwicHhcIlwiLlxyXG4vLyA9INCgLjog0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMINGB0LjQvdGC0LDQutGB0LjRgSAgcGFkZGluZy1sZWZ0OiAgICN7bWFwLWdldCgkZGV2aWNlX29iaiwgY29sdW1uc19nYXApfXB4O1xyXG5cclxuLy8gMikgSW4gdXNlciBjdXN0b20gc2V0dGluZ3MgL3Nhc3MvX213Z3JpZC5zY3NzIC0gd2UgZXJhc2UgKGRlc3Ryb3kpIGRlZmF1bHQgY29sdW1uc19nYXAgaW4gZGV2aWNlc1xyXG4vLyA/INCSLjog0LTQvtCx0LDQstC40YLRjCBjb2x1bW5zIGdhcCDQuiAkZGV2aWNlcyDQv9C+0YHQu9C1INC+0L/RgNC10LTQtdC70LXQvdC40Y8gJGRldmljZXNcclxuXHJcblxyXG5cclxuXHJcbi8qIE9wdGlvbnM6ICovXHJcbiRjb2x1bW5zOiAxMiAhZGVmYXVsdDsgIC8vIGNvbHVtbnMgbnVtYmVyXHJcbiRjb2x1bW5zX2dhcDogMTUgIWRlZmF1bHQ7ICAvLyBjb2x1bW4gb25lIHNpZGUgZ2FwXHJcbiRjb250YWluZXJfd2lkdGg6IDE0MDAgIWRlZmF1bHQ7ICAvLyBjb250YWluZXIgbWF4IHdpZHRoXHJcbiRicmVha3BvaW50c19iZXR3ZWVuOiAncmVzcG9uc2l2ZScgIWRlZmF1bHQ7IC8vICdyZXNwb25zaXZlJyB8fCAnZml4ZWQnLiBXaGVuICdyZXNwb25zaXZlJyAtICdjb250YWluZXJfbWF4JyBkb24ndCB1c2UuXHJcblxyXG4kZGlzcGxheV9tb2RlbHM6ICgpICFkZWZhdWx0OyAvLyB0eXBlcyBvZiBDU1MgZGlzcGxheSBtb2R1bGVzXHJcbiRkaXNwbGF5X21vZGVsczogbWFwLW1lcmdlKFxyXG4gICAgKCBcclxuICAgICAgICBibG9jazogMSxcclxuICAgICAgICBpbmxpbmUtYmxvY2s6IDAsXHJcbiAgICAgICAgZmxleDogMVxyXG4gICAgKSxcclxuICAgICRkaXNwbGF5X21vZGVsc1xyXG4pO1xyXG5cclxuXHJcbiRkZXZpY2VzOiAoKSAhZGVmYXVsdDsgIC8vIERldmljZXMgLSBicmVha3BvaW50cywgY29udGFpbmVyIG1heCB3aWR0aCwgZm9udCBiYXNlLCBhbmQgbW9kdWxhciBzY2FsZSBjb2VmZlxyXG4vLyBUaGlzIGlzIHNvbWUgdmFyaWFudFxyXG5cclxuLy8gJGRldmljZXM6ICggXHJcbi8vICAgICBtdl86IChcclxuLy8gICAgICAgICBicmVha3BvaW50OiAzMjAsXHJcbi8vICAgICAgICAgY29udGFpbmVyX21heDogMzAwLFxyXG4vLyAgICAgICAgIGZvbnRfYmFzZTogMTVweCxcclxuLy8gICAgICAgICBtc19jb2VmZjogMS4xMCxcclxuLy8gICAgICksXHJcbi8vICAgICBtaF86IChcclxuLy8gICAgICAgICBicmVha3BvaW50OiA1NzYsXHJcbi8vICAgICAgICAgY29udGFpbmVyX21heDogNTQwLFxyXG4vLyAgICAgICAgIGZvbnRfYmFzZTogMTVweCxcclxuLy8gICAgICAgICBtc19jb2VmZjogMS4xMCxcclxuLy8gICAgICksXHJcbi8vICAgICB0Yl86IChcclxuLy8gICAgICAgICBicmVha3BvaW50OiA3NjgsXHJcbi8vICAgICAgICAgY29udGFpbmVyX21heDogNzUwLFxyXG4vLyAgICAgICAgIGZvbnRfYmFzZTogMTVweCxcclxuLy8gICAgICAgICBtc19jb2VmZjogMS4xNyxcclxuLy8gICAgICksIFxyXG4vLyAgICAgZHNfOiAoXHJcbi8vICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcclxuLy8gICAgICAgICBjb250YWluZXJfbWF4OiA5NjAsXHJcbi8vICAgICAgICAgZm9udF9iYXNlOiAxNXB4LFxyXG4vLyAgICAgICAgIG1zX2NvZWZmOiAxLjE3XHJcbi8vICAgICApLFxyXG4vLyAgICAgaGRfOiAoXHJcbi8vICAgICAgICAgYnJlYWtwb2ludDogMTQ0MCxcclxuLy8gICAgICAgICBjb250YWluZXJfbWF4OiAxNDAwLFxyXG4vLyAgICAgICAgIGZvbnRfYmFzZTogMTVweCxcclxuLy8gICAgICAgICBtc19jb2VmZjogMS4xN1xyXG4vLyAgICAgKVxyXG5cclxuLy8gKTtcclxuLy8gQGRlYnVnICRkZXZpY2VzKCk7XHJcblxyXG4kZGV2aWNlczogbWFwLW1lcmdlKFxyXG4gICAgKCBcclxuXHJcbiAgICAgICAgbXZfOiAoXHJcbiAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDMyMCxcclxuICAgICAgICAgICAgY29udGFpbmVyX21heDogMzAwLFxyXG4gICAgICAgICAgICBmb250X2Jhc2U6IDE0cHgsXHJcbiAgICAgICAgICAgIG1zX2NvZWZmOiAxLjEwLFxyXG4gICAgICAgICksXHJcbiAgICAgICAgbWhfOiAoXHJcbiAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDU3NixcclxuICAgICAgICAgICAgY29udGFpbmVyX21heDogNTQwLFxyXG4gICAgICAgICAgICBmb250X2Jhc2U6IDE0cHgsXHJcbiAgICAgICAgICAgIG1zX2NvZWZmOiAxLjEwLFxyXG4gICAgICAgICksXHJcbiAgICAgICAgdGJfOiAoXHJcbiAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDc2OCxcclxuICAgICAgICAgICAgY29udGFpbmVyX21heDogNzUwLFxyXG4gICAgICAgICAgICBmb250X2Jhc2U6IDE1cHgsXHJcbiAgICAgICAgICAgIG1zX2NvZWZmOiAxLjE3LFxyXG4gICAgICAgICksIFxyXG4gICAgICAgIGRzXzogKFxyXG4gICAgICAgICAgICBicmVha3BvaW50OiAxMDI0LFxyXG4gICAgICAgICAgICBjb250YWluZXJfbWF4OiA5NjAsXHJcbiAgICAgICAgICAgIGZvbnRfYmFzZTogMTZweCxcclxuICAgICAgICAgICAgbXNfY29lZmY6IDEuMTdcclxuICAgICAgICApLFxyXG4gICAgICAgIGhkXzogKFxyXG4gICAgICAgICAgICBicmVha3BvaW50OiAxMzY2LFxyXG4gICAgICAgICAgICBjb250YWluZXJfbWF4OiAxMjAwLFxyXG4gICAgICAgICAgICBmb250X2Jhc2U6IDE2cHgsXHJcbiAgICAgICAgICAgIG1zX2NvZWZmOiAxLjE3XHJcbiAgICAgICAgKVxyXG5cclxuICAgICksXHJcbiAgICAkZGV2aWNlc1xyXG4pO1xyXG5cclxuJGRldmljZXMtbmFtZXM6IG1hcC1rZXlzKCRkZXZpY2VzKTtcclxuQGRlYnVnICRkZXZpY2VzLW5hbWVzO1xyXG5cclxuXHJcbi8vIDAuMSBBZGQgY29sdW1ucyBnYXAgd2l0aCBiYWNrd2FyZCBjb21wYWJpbGl0eVxyXG5AaW1wb3J0ICdfY29sdW1uc19nYXAnOyAvL1xyXG5cclxuLyogMS4gU3RydWN0dXJlIGVsZW1lbnRzICovXHJcblxyXG4uc2VjdGlvbntcclxuICAgIGZsb2F0OiBsZWZ0OyB3aWR0aDogMTAwJTsgY2xlYXI6IGJvdGg7XHJcbn1cclxuLmNvbnRhaW5lcnsgICAgXHJcbiAgICBtYXgtd2lkdGg6ICRjb250YWluZXJfd2lkdGgrcHg7XHJcbiAgICAvLyBwYWRkaW5nLWxlZnQ6ICRjb2x1bW5zX2dhcCtweDtcclxuICAgIC8vIHBhZGRpbmctcmlnaHQ6ICRjb2x1bW5zX2dhcCtweDtcclxuICAgIG1hcmdpbjogMCBhdXRvOyBcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7ICAgIFxyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG59XHJcbi5jb250YWluZXItZWxhc3RpYyB7XHJcbiAgICBtYXgtd2lkdGg6IG5vbmU7XHJcbn1cclxuXHJcblxyXG4vKiAyLiBNb2R1bGVzIGRpc3BsYXkgKi9cclxuXHJcbi8qXHJcbk1vZHVsZXMgaGF2ZTpcclxuICAgIHZlcnRpY2FsIGFsaWdtZW50ICggLm1pZGRsZSwgZXRjLi4gKVxyXG4gICAgcmV2ZXJzZSBvcmRlciAoIC5yb3ctcmV2ZXJzZSApXHJcbiovXHJcblxyXG5cclxuLyogQmxvY2sgIG1vZGVsICovXHJcbkBpZiBtYXAtZ2V0KCRkaXNwbGF5X21vZGVscywgYmxvY2spID09IDEge1xyXG4gICAgLnJvd3tcclxuICAgICAgICAvLyBtYXJnaW4tbGVmdDogLSRjb2x1bW5zX2dhcCtweDtcclxuICAgICAgICAvLyBtYXJnaW4tcmlnaHQ6IC0kY29sdW1uc19nYXArcHg7XHJcbiAgICB9XHJcblxyXG4gICAgLnJvdz5kaXZ7IGZsb2F0IDogbGVmdDsgfVxyXG5cclxuICAgIC5yb3cucmV2ZXJzZT5kaXYsXHJcbiAgICAucm93LnJvdy1yZXZlcnNlPmRpdiB7IGZsb2F0OiByaWdodDsgIH1cclxufVxyXG4vKiBJbmxpbmUtYmxvY2sgIG1vZGVsICovXHJcbkBpZiBtYXAtZ2V0KCRkaXNwbGF5X21vZGVscywgaW5saW5lLWJsb2NrKSA9PSAxIHtcclxuICAgIC5yb3ctbGluZXtcclxuICAgICAgICAvLyBtYXJnaW4tbGVmdDogLSRjb2x1bW5zX2dhcCtweDtcclxuICAgICAgICAvLyBtYXJnaW4tcmlnaHQ6IC0kY29sdW1uc19nYXArcHg7IFxyXG4gICAgICAgIGZvbnQtc2l6ZTogMDtcclxuICAgIH1cclxuXHJcbiAgICAucm93LWxpbmU+ZGl2eyBmbG9hdCA6IG5vbmU7IGRpc3BsYXkgOiBpbmxpbmUtYmxvY2s7fVxyXG5cclxuICAgIC5yb3ctbGluZS5taWRkbGU+ZGl2eyB2ZXJ0aWNhbC1hbGlnbiA6IG1pZGRsZTsgIH1cclxuICAgIC5yb3ctbGluZS50b3A+ZGl2eyB2ZXJ0aWNhbC1hbGlnbiA6IHRvcDsgfVxyXG4gICAgLnJvdy1saW5lLmJvdHRvbT5kaXZ7IHZlcnRpY2FsLWFsaWduIDogYm90dG9tOyB9XHJcbiAgICAucm93LWxpbmUuYmFzZWxpbmU+ZGl2eyB2ZXJ0aWNhbC1hbGlnbiA6IGJhc2VsaW5lOyB9XHJcblxyXG4gICAgLnJvdy1saW5lLnJvdy1yZXZlcnNlLFxyXG4gICAgLnJvdy1saW5lLnJldmVyc2UgeyBkaXJlY3Rpb24gOiBydGw7IH1cclxuICAgIC5yb3ctbGluZS5yb3ctcmV2ZXJzZSxcclxuICAgIC5yb3ctbGluZS5yZXZlcnNlID5kaXZ7IGRpcmVjdGlvbiA6IGx0cjsgfSAgICBcclxufVxyXG4vKiBGbGV4ICBtb2RlbCAqL1xyXG5AaWYgbWFwLWdldCgkZGlzcGxheV9tb2RlbHMsIGZsZXgpID09IDEge1xyXG4gICAgLnJvdy1mbGV4e1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7IGZsZXgtd3JhcDogd3JhcDtcclxuICAgICAgICAvLyBtYXJnaW4tbGVmdDogLSRjb2x1bW5zX2dhcCtweDtcclxuICAgICAgICAvLyBtYXJnaW4tcmlnaHQ6IC0kY29sdW1uc19nYXArcHg7ICAgIFxyXG4gICAgfVxyXG5cclxuICAgIC5yb3ctZmxleGJveHsgXHJcbiAgICAgICAgZGlzcGxheSA6IGZsZXg7IFxyXG4gICAgICAgIC8vIG1hcmdpbi1sZWZ0OiAtJGNvbHVtbnNfZ2FwK3B4OyBcclxuICAgICAgICAvLyBtYXJnaW4tcmlnaHQ6IC0kY29sdW1uc19nYXArcHg7IFxyXG4gICAgfSBcclxuICAgIFtjbGFzcyo9cm93LWZsZXhdLm1pZGRsZXsgYWxpZ24taXRlbXMgOiBjZW50ZXI7IH1cclxuICAgIFtjbGFzcyo9cm93LWZsZXhdLnRvcHsgYWxpZ24taXRlbXMgOiBmbGV4LXN0YXJ0OyB9XHJcbiAgICBbY2xhc3MqPXJvdy1mbGV4XS5ib3R0b217IGFsaWduLWl0ZW1zIDogZmxleC1lbmQ7IH1cclxuICAgIFtjbGFzcyo9cm93LWZsZXhdLmJhc2VsaW5leyBhbGlnbi1pdGVtcyA6IGJhc2VsaW5lOyB9XHJcbiAgICBbY2xhc3MqPXJvdy1mbGV4XS5zdHJldGNoeyBhbGlnbi1pdGVtcyA6IHN0cmV0Y2g7IH1cclxuXHJcbiAgICAucm93LWZsZXgucm93LXJldmVyc2UsXHJcbiAgICAucm93LWZsZXgucmV2ZXJzZSB7IGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTsgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG4vKiAzLiBDb2x1bW5zICovXHJcblxyXG4vKiAzLiBDb2x1bW5zIHYuMiAqL1xyXG5cclxuLy8gY29sdW1uIGJhc2Ugc3R5bGVzXHJcbiVjb2x1bW5fe1xyXG5cclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IFxyXG4gICAgLy8gcGFkZGluZy1sZWZ0OiAkY29sdW1uc19nYXArcHg7XHJcbiAgICAvLyBwYWRkaW5nLXJpZ2h0OiAkY29sdW1uc19nYXArcHg7XHJcbiAgICBwb3NpdGlvbiA6IHJlbGF0aXZlOyBcclxuICAgIG1pbi1oZWlnaHQ6IDFweDtcclxufVxyXG5cclxuQGVhY2ggJGRldmljZV9uYW1lLCAkZGV2aWNlX29iaiBpbiAkZGV2aWNlcyB7XHJcblxyXG4gICAgLy8gY29sdW1ucyB3aWR0aCBhbmQgb2Zmc2V0c1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGggOiAje21hcC1nZXQoJGRldmljZV9vYmosIGJyZWFrcG9pbnQpfXB4KSB7XHJcblxyXG4gICAgICAgIC8vIGNvbHVtbnMgZ2FwXHJcbiAgICAgICAgLmNvbnRhaW5lcntcclxuICAgICAgICAgICAgLy8gcGFkZGluZy1sZWZ0OiBnZXRfZ3JpZF9wcm9wZXJ0eSgkZGV2aWNlX25hbWUsIGNvbHVtbnNfZ2FwICk7XHJcbiAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICAvLyBwYWRkaW5nLWxlZnQ6ICBtYXAtZ2V0KCRkZXZpY2Vfb2JqLCBjb2x1bW5zX2dhcCkrcHg7IC8vIEVycm9yOiBJbnZhbGlkIG51bGwgb3BlcmF0aW9uOiBcIm51bGwgcGx1cyBcInB4XCJcIi5cclxuXHJcbiAgICAgICAgICAgIC8vIHBhZGRpbmctbGVmdDogIG1hcC1nZXQoJGRldmljZV9vYmosIGNvbHVtbnNfZ2FwKXB4OyAvLyAyMCBweFxyXG5cclxuICAgICAgICAgICAgLy8gcGFkZGluZy1sZWZ0OiAgbWFwLWdldCgkZGV2aWNlX29iaiwgY29sdW1uc19nYXApKzBweDsgLy8gRXJyb3I6IEludmFsaWQgbnVsbCBvcGVyYXRpb246IC4uLlxyXG5cclxuICAgICAgICAgICAgLy8gcGFkZGluZy1sZWZ0OiAgbWFwLWdldCgkZGV2aWNlX29iaiwgJ2NvbHVtbnNfZ2FwJykrcHg7IC8vIEVycm9yOiBJbnZhbGlkIG51bGwgb3BlcmF0aW9uOiAuLi5cclxuXHJcbiAgICAgICAgICAgIC8vIHBhZGRpbmctbGVmdDogICAje21hcC1nZXQoJGRldmljZV9vYmosIGNvbHVtbnNfZ2FwKX1weDsgLy8gK1xyXG4gICAgICAgICAgICAvLyBwYWRkaW5nLXJpZ2h0OiAgI3ttYXAtZ2V0KCRkZXZpY2Vfb2JqLCBjb2x1bW5zX2dhcCl9cHg7IC8vICtcclxuXHJcbiAgICAgICAgICAgIC8vIHBhZGRpbmctcmlnaHQ6IG1hcC1nZXQoJGRldmljZV9vYmosIGNvbnRhaW5lcl9tYXgpK3B4OyAvLyArINCf0L7Rh9C10LzRgyDQt9C00LXRgdGMINCy0YvQstC+0LjQtCwg0LAg0YLQsNC8INC90LXRglxyXG4gICAgICAgICAgICAvLyBwYWRkaW5nLXJpZ2h0OiBzZGY7XHJcbiAgICAgICAgfSAgICAgICAgXHJcblxyXG4gICAgICAgIC8vIGJldHdlZW4gcG9pbnRzIDogQ29udGFpbmVyIG1heC13aWR0aFxyXG4gICAgICAgIEBpZiAkYnJlYWtwb2ludHNfYmV0d2VlbiA9PSAnZml4ZWQnIHtcclxuICAgICAgICAgICAgLmNvbnRhaW5lcntcclxuICAgICAgICAgICAgICAgIG1heC13aWR0aDogbWFwLWdldCgkZGV2aWNlX29iaiwgY29udGFpbmVyX21heCkrcHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbHVtbnMgb2Zmc2V0IHJlc2V0XHJcbiAgICAgICAgLiN7JGRldmljZV9uYW1lfW9mZnNldF8wIHsgXHJcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAgMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbHVtbnMgd2lkdGggYW5kIG9mZnNldFxyXG4gICAgICAgICRpOiAxO1xyXG4gICAgICAgIEB3aGlsZSAkaSA8ICgkY29sdW1ucyArIDEpIHtcclxuXHJcbiAgICAgICAgICAgIC4jeyRkZXZpY2VfbmFtZX0jeyRpfSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJHdpZHRoOiAkaSAvICRjb2x1bW5zO1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6ICR3aWR0aCAqIDEwMCU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC4jeyRkZXZpY2VfbmFtZX1vZmZzZXRfI3skaX0ge1xyXG5cclxuICAgICAgICAgICAgICAgICR3aWR0aDogJGkgLyAkY29sdW1ucztcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAgJHdpZHRoICogMTAwJTtcclxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgJGk6ICRpICsgMTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjb2x1bW5zIHNwZWNpZmljIG9yZGVyXHJcbiAgICAgICAgJGk6IDE7XHJcbiAgICAgICAgQHdoaWxlICRpIDwgKCRjb2x1bW5zICsgMSkge1xyXG5cclxuICAgICAgICAgICAgLiN7JGRldmljZV9uYW1lfW9yZGVyXyN7JGl9IHtcclxuICAgICAgICAgICAgICAgIG9yZGVyOiAkaTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gLiN7JGRldmljZV9uYW1lfSN7JGl9IHtcclxuXHJcbiAgICAgICAgICAgIC8vICAgICAkd2lkdGg6ICRpIC8gJGNvbHVtbnM7XHJcbiAgICAgICAgICAgIC8vICAgICB3aWR0aDogJHdpZHRoICogMTAwJTtcclxuICAgICAgICAgICAgLy8gfSAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgJGk6ICRpICsgMTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29sdW1ucyBiYXNlIHN0eWxlc1xyXG4gICAgW2NsYXNzKj1cIiN7JGRldmljZV9uYW1lfVwiXSB7XHJcbiAgICAgICAgQGV4dGVuZCAlY29sdW1uXztcclxuICAgIH0gICAgXHJcbn1cclxuXHJcbi8vIC5tdl9vcmRlci0xXHJcbi8vIC5tdl9vcmRlci0yXHJcbi8vIC4uXHJcbi8vIC5kc19vcmRlci0xXHJcbi8vIC5kc19vcmRlci0yXHJcblxyXG5cclxuLyogNC4gQXV4aWxpYXJ5IGVsZW1lbnRzICjQktGB0L/QvtC80L7Qs9Cw0YLQtdC70YzQvdGL0LUg0YHRgtGA0YPQutGC0YPRgNC90YvQtSDRjdC70LXQvNC10L3RgtGLKSAqL1xyXG5cclxuLmNvbnRhaW5lcjpiZWZvcmUsXHJcbi5jb250YWluZXI6YWZ0ZXIsXHJcbi5yb3c6YmVmb3JlLFxyXG4ucm93OmFmdGVyXHJcbntcclxuICAgIGRpc3BsYXk6IHRhYmxlO1xyXG4gICAgY29udGVudDogXCIgXCI7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuLmNvbnRhaW5lcjphZnRlciwgXHJcbi5yb3c6YWZ0ZXJcclxue1xyXG4gICAgY2xlYXIgOiBib3RoO1xyXG59XHJcblxyXG5cclxuLyogNS4gQ29sbGFwc2UgKi9cclxuXHJcbiVwYWRkaW5nX251bGxzIHtcclxuICAgIHBhZGRpbmctbGVmdDogMDsgcGFkZGluZy1yaWdodDogMDsgIFxyXG59XHJcblxyXG4uY29sbGFwc2Uge1xyXG4gICAgXHJcbiAgICBwYWRkaW5nLWxlZnQ6IDA7IHBhZGRpbmctcmlnaHQ6IDA7XHJcbiAgICAmID4gW2NsYXNzKj1yb3dde1xyXG4gICAgLy8gJiBbY2xhc3MqPXJvd117XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7IG1hcmdpbi1yaWdodDogMDtcclxuXHJcbiAgICAgICAgQGVhY2ggJGRldmljZV9uYW1lLCAkZGV2aWNlX29iaiBpbiAkZGV2aWNlcyB7XHJcbiAgICAgICAgICAgIC8vIGNvbHVtbnMgcGFkZGluZyBudWxsc1xyXG4gICAgICAgICAgICAmID4gW2NsYXNzKj1cIiN7JGRldmljZV9uYW1lfVwiXSB7XHJcbiAgICAgICAgICAgICAgICBAZXh0ZW5kICAlcGFkZGluZ19udWxscztcclxuICAgICAgICAgICAgfSAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuW2NsYXNzKj1yb3ddLmNvbGxhcHNlIHtcclxuXHJcbiAgICBtYXJnaW4tbGVmdDogMDsgbWFyZ2luLXJpZ2h0OiAwOyBcclxuICAgIFtjbGFzcyo9cm93XSB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7IG1hcmdpbi1yaWdodDogMDsgXHJcbiAgICB9XHJcblxyXG4gICAgQGVhY2ggJGRldmljZV9uYW1lLCAkZGV2aWNlX29iaiBpbiAkZGV2aWNlcyB7XHJcbiAgICAgICAgLy8gY29sdW1ucyBwYWRkaW5nIG51bGxzXHJcbiAgICAgICAgW2NsYXNzKj1cIiN7JGRldmljZV9uYW1lfVwiXSB7XHJcbiAgICAgICAgICAgIEBleHRlbmQgICVwYWRkaW5nX251bGxzO1xyXG4gICAgICAgIH0gICAgICAgICBcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbltjbGFzcyo9cm93XS5jb2xsYXBzZS10aGlzIHtcclxuXHJcbiAgICBtYXJnaW4tbGVmdDogMDsgbWFyZ2luLXJpZ2h0OiAwOyBcclxuXHJcbiAgICBAZWFjaCAkZGV2aWNlX25hbWUsICRkZXZpY2Vfb2JqIGluICRkZXZpY2VzIHtcclxuICAgICAgICAvLyBjb2x1bW5zIHBhZGRpbmcgbnVsbHNcclxuICAgICAgICAmID4gW2NsYXNzKj1cIiN7JGRldmljZV9uYW1lfVwiXSB7XHJcbiAgICAgICAgICAgIEBleHRlbmQgICVwYWRkaW5nX251bGxzO1xyXG4gICAgICAgIH0gICAgICAgICBcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG4vKiA2LiBSZXNwb25zaXZlIHV0aWxpdGVzICjQo9GC0LjQu9C40YLRiyDQsNC00LDQv9GC0LDRhtC40LgpICAqL1xyXG5cclxuXHJcbi8vIHYyXHJcblxyXG4vKiBIaWRlIG9uIGxhcmdlLCBzaG93IG9uIHNtYWxsICjQodC60YDRi9Cy0LDQtdC8INC90LAg0LHQvtC70YzRiNC40YUsINC90LAg0LzQsNC70YvRhSDQv9C+0LrQsNC30YvQstCw0LXQvCkgKi9cclxuXHJcbkBlYWNoICRkZXZpY2VfbmFtZSwgJGRldmljZV9vYmogaW4gJGRldmljZXMge1xyXG5cclxuICAgIC8vIEhpZGUgdXAgKGxhcmdlciB0aGFuIHRoaXMpXHJcbiAgICAkaGlkZGVuX2JyZWFrcG9pbnQ6IG1hcC1nZXQoJGRldmljZV9vYmosIGJyZWFrcG9pbnQpKzBweDtcclxuICAgIEBtZWRpYSAgKG1pbi13aWR0aCA6ICRoaWRkZW5fYnJlYWtwb2ludCApIHtcclxuICAgICAgICBib2R5IC4jeyRkZXZpY2VfbmFtZX1oaWRkZW4ge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2hvdyBkb3duIChzbWFsbGVyIHRoYW4pXHJcbiAgICAkaGlkZGVuX2JyZWFrcG9pbnQ6IG1hcC1nZXQoJGRldmljZV9vYmosIGJyZWFrcG9pbnQpLTFweDtcclxuICAgIEBtZWRpYSAgKG1heC13aWR0aCA6ICRoaWRkZW5fYnJlYWtwb2ludCApIHtcclxuXHJcbiAgICAgICAgYm9keSAuI3skZGV2aWNlX25hbWV9dmlzaWJsZSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0gXHJcblxyXG4gICAgXHJcbn1cclxuXHJcblxyXG4vKiA3LiBUZXh0IHV0dWxpdGVzICAqL1xyXG5cclxuICAgIC5sZWZ0ZWR7IHRleHQtYWxpZ24gOiBsZWZ0OyB9XHJcbiAgICAucmlnaHRlZHsgdGV4dC1hbGlnbiA6IHJpZ2h0OyB9XHJcbiAgICAuY2VudGVyZWR7IHRleHQtYWxpZ24gOiBjZW50ZXI7IH1cclxuICAgIC5qdXN0aWZ5ZWR7IHRleHQtYWxpZ24gOiBqdXN0aWZ5OyB9XHJcblxyXG5cclxuQGVhY2ggJGRldmljZV9uYW1lLCAkZGV2aWNlX29iaiBpbiAkZGV2aWNlcyB7XHJcblxyXG4gICAgQG1lZGlhIChtaW4td2lkdGggOiAje21hcC1nZXQoJGRldmljZV9vYmosIGJyZWFrcG9pbnQpfXB4KSB7XHJcblxyXG4gICAgICAgIC4jeyRkZXZpY2VfbmFtZX1sZWZ0ZWR7IHRleHQtYWxpZ24gOiBsZWZ0OyB9XHJcbiAgICAgICAgLiN7JGRldmljZV9uYW1lfXJpZ2h0ZWR7IHRleHQtYWxpZ24gOiByaWdodDsgfVxyXG4gICAgICAgIC4jeyRkZXZpY2VfbmFtZX1jZW50ZXJlZHsgdGV4dC1hbGlnbiA6IGNlbnRlcjsgfVxyXG4gICAgICAgIC4jeyRkZXZpY2VfbmFtZX1qdXN0aWZ5ZWR7IHRleHQtYWxpZ24gOiBqdXN0aWZ5OyB9XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8qIDguIFNDU1MgVXR1bGl0ZXMgICovXHJcblxyXG4vKiA4LjEgRnVuY3Rpb25zICAqL1xyXG5AaW1wb3J0ICd1dGlsaXRlcyc7IC8vXHJcblxyXG4vKiA4LjIgTWl4aW5zICAqL1xyXG5AaW1wb3J0ICdtaXhpbnMnOyAvLyIsIlxyXG5cclxuLy8gTmFtZSBuYW1lXHJcbi8vIERlc2NcclxuLy8gUmV0dXJuXHJcbkBmdW5jdGlvbiBnZXRfY29sdW1uc19nYXAoKSB7XHJcbiAgICAvLyBAd2FybiAnd2FybiBtZSc7XHJcblxyXG5cclxuICAgIEByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbkBlYWNoICRkZXZpY2VfbmFtZSwgJGRldmljZV9vYmogaW4gJGRldmljZXMge1xyXG5cclxuXHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aCA6ICN7bWFwLWdldCgkZGV2aWNlX29iaiwgYnJlYWtwb2ludCl9cHgpIHtcclxuXHJcbiAgICAgICAgLy8gJHJlc3VsdF9jb2x1bW5zX2dhcDogLTE7XHJcbiAgICAgICAgJHJlc3VsdF9jb2x1bW5zX2dhcDogJGNvbHVtbnNfZ2FwO1xyXG4gICAgICAgICRjZ19mcm9tX2RldmljZXM6IG1hcC1nZXQoJGRldmljZV9vYmosIGNvbHVtbnNfZ2FwKTtcclxuICAgICAgICBAaWYgKCAkY2dfZnJvbV9kZXZpY2VzICApIHsgLy8gZmFsc2VcclxuICAgICAgICAgICAgJHJlc3VsdF9jb2x1bW5zX2dhcCA6ICRjZ19mcm9tX2RldmljZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuY29udGFpbmVyIHtcclxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAkcmVzdWx0X2NvbHVtbnNfZ2FwK3B4O1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAkcmVzdWx0X2NvbHVtbnNfZ2FwK3B4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAucm93LFxyXG4gICAgICAgIC5yb3ctbGluZSxcclxuICAgICAgICAucm93LWZsZXgge1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogLSRyZXN1bHRfY29sdW1uc19nYXArcHg7XHJcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogLSRyZXN1bHRfY29sdW1uc19nYXArcHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBAZWFjaCAkZGV2aWNlcy1uYW1lIGluICRkZXZpY2VzLW5hbWVzIHtcclxuICAgICAgICAgICAgW2NsYXNzKj1cIiN7JGRldmljZXMtbmFtZX1cIl0ge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogJHJlc3VsdF9jb2x1bW5zX2dhcCtweDtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6ICRyZXN1bHRfY29sdW1uc19nYXArcHg7XHJcbiAgICAgICAgICAgIH0gIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59IiwiLypcclxuKiBcclxuKiAxLiBnZXRfZ3JpZF9icCgpIC0gcmV0dXJuIGJyZWFrcG9pbnQgdmFsdWUgZnJvbSAkZGV2aWNlc1xyXG4qIDIuIGdldF9ncmlkX2NfbSgpIC0gcmV0dXJuIGNvbnRhaW5lcl9tYXggdmFsdWUgZnJvbSAkZGV2aWNlc1xyXG4qIDMuIGdldF9ncmlkX2ZfYigpIC0gcmV0dXJuIGZvbnRfYmFzZSB2YWx1ZSBmcm9tICRkZXZpY2VzXHJcbiogNC4gZ2V0X2dyaWRfbXNfYygpIC0gcmV0dXJuIG1zX2NvZWZmIHZhbHVlIGZyb20gJGRldmljZXNcclxuKlxyXG4qL1xyXG5cclxuXHJcbi8qIDEuICBnZXRfZ3JpZF9jX20oJGJwX25hbWUpIC0gcmV0dXJuIGJyZWFrcG9pbnQgdmFsdWUgZnJvbSAkZGV2aWNlcyAqL1xyXG5cclxuLy8gR2V0IGdyaWQgYnJlYWtwb2ludCB2YWx1ZSBmcm9tICRkZXZpY2VzXHJcbi8vIEBwYXJhbSAge1N0cmluZ30gJGJwX25hbWUgLSBicmVha3BvaW50IG5hbWVcclxuLy8gQHJldHVybiB7TnVtYmVyfSAtIGJyZWFrcG9pbnQgdmFsdWUgKHVuaXRsZXNzKVxyXG5cclxuQGZ1bmN0aW9uIGdldF9ncmlkX2JwKCRicF9uYW1lKSB7XHJcblxyXG4gICAgJGJwX29iajogbWFwLWdldCgkZGV2aWNlcywgJGJwX25hbWUpO1xyXG4gICAgJGJwX3ZhbHVlOiBtYXAtZ2V0KCRicF9vYmosIGJyZWFrcG9pbnQpO1xyXG5cclxuICAgIEByZXR1cm4gJGJwX3ZhbHVlOyAgXHJcbn1cclxuXHJcblxyXG4vKiAyLiBnZXRfZ3JpZF9jX20oJGJwX25hbWUpIC0gcmV0dXJuIGNvbnRhaW5lcl9tYXggdmFsdWUgZnJvbSAkZGV2aWNlcyAqL1xyXG5cclxuLy8gR2V0IGdyaWQgZGV2aWNlIGNvbnRhaW5lcl9tYXggdmFsdWUgXHJcbi8vIEBwYXJhbSAkYnBfbmFtZSB7U3RyaW5nfSAtIGJyZWFrcG9pbnQgbmFtZVxyXG4vLyBAcmV0dXJuIHtOdW1iZXJ9IC0gY29udGFpbmVyX21heCB2YWx1ZVxyXG5cclxuQGZ1bmN0aW9uIGdldF9ncmlkX2NfbSgkYnBfbmFtZSkge1xyXG5cclxuICAgICRicF9vYmo6IG1hcC1nZXQoJGRldmljZXMsICRicF9uYW1lKTtcclxuICAgICRicF92YWx1ZTogbWFwLWdldCgkYnBfb2JqLCBjb250YWluZXJfbWF4KTtcclxuXHJcbiAgICBAcmV0dXJuICRicF92YWx1ZTsgIFxyXG59XHJcblxyXG5cclxuLyogMy4gZ2V0X2dyaWRfZl9iKCRicF9uYW1lKSAtIHJldHVybiBmb250X2Jhc2UgdmFsdWUgZnJvbSAkZGV2aWNlcyAqL1xyXG5cclxuLy8gR2V0IGdyaWQgZGV2aWNlIGZvbnRfYmFzZSB2YWx1ZSBcclxuLy8gQHBhcmFtICRicF9uYW1lIHtTdHJpbmd9IC0gYnJlYWtwb2ludCBuYW1lXHJcbi8vIEByZXR1cm4ge051bWJlcn0gLSBmb250X2Jhc2UgdmFsdWVcclxuXHJcbkBmdW5jdGlvbiBnZXRfZ3JpZF9mX2IoJGJwX25hbWUpIHtcclxuXHJcbiAgICAkYnBfb2JqOiBtYXAtZ2V0KCRkZXZpY2VzLCAkYnBfbmFtZSk7XHJcbiAgICAkYnBfdmFsdWU6IG1hcC1nZXQoJGJwX29iaiwgZm9udF9iYXNlKTtcclxuXHJcbiAgICBAcmV0dXJuICRicF92YWx1ZTsgIFxyXG59XHJcblxyXG5cclxuLyogNC4gZ2V0X2dyaWRfbXNfYygkYnBfbmFtZSkgLSByZXR1cm4gbXNfY29lZmYgdmFsdWUgZnJvbSAkZGV2aWNlcyAqL1xyXG5cclxuLy8gR2V0IGdyaWQgZGV2aWNlIG1zX2NvZWZmIHZhbHVlIFxyXG4vLyBAcGFyYW0gJGJwX25hbWUge1N0cmluZ30gLSBicmVha3BvaW50IG5hbWVcclxuLy8gQHJldHVybiB7TnVtYmVyfSAtIG1zX2NvZWZmIHZhbHVlICh1bml0bGVzcylcclxuXHJcbkBmdW5jdGlvbiBnZXRfZ3JpZF9tc19jKCRicF9uYW1lKSB7XHJcblxyXG4gICAgJGJwX29iajogbWFwLWdldCgkZGV2aWNlcywgJGJwX25hbWUpO1xyXG4gICAgJGJwX3ZhbHVlOiBtYXAtZ2V0KCRicF9vYmosIG1zX2NvZWZmKTtcclxuXHJcbiAgICBAcmV0dXJuICRicF92YWx1ZTsgIFxyXG59XHJcblxyXG5cclxuXHJcbi8vIGJldGEgVEVTVElOR1xyXG5cclxuLyogNS4gZ2V0X2dyaWRfcHJvcGVydHkoJGJwX25hbWUsICRwcm9wZXJ5KSAtIHJldHVybiBzcGVjaWZpZWQgcHJvcGVydHkgdmFsdWUgJGRldmllcyAqL1xyXG5cclxuLy8gR2V0IHRoZSBzcGVjaWZpZWQgKGN1c3RvbSkgcHJvcGVydHkgdmFsdWUgXHJcbi8vIEBwYXJhbSAkYnBfbmFtZSB7U3RyaW5nfSAtIGJyZWFrcG9pbnQgbmFtZVxyXG4vLyBAcGFyYW0gJHByb3Blcnkge1N0cmluZ30gLSBicmVha3BvaW50IG5hbWVcclxuLy8gQHJldHVybiB7TnVtYmVyfSAtIHByb3BlcnR5IHZhbHVlXHJcblxyXG5AZnVuY3Rpb24gZ2V0X2dyaWRfcHJvcGVydHkoJGJwX25hbWUsICRwcm9wZXJ5KSB7XHJcblxyXG4gICAgJGJwX29iajogbWFwLWdldCgkZGV2aWNlcywgJGJwX25hbWUpO1xyXG4gICAgJHByb3BlcnlfdmFsdWU6IG1hcC1nZXQoJGJwX29iaiwgJHByb3BlcnkpO1xyXG5cclxuICAgIEByZXR1cm4gJHByb3BlcnlfdmFsdWU7IFxyXG59XHJcblxyXG5cclxuXHJcbiIsIi8qXHJcbiogXHJcbiogMS4gbWVkaWEtdXAoKSAgIC0gb3V0cHV0IEBtZWRpYSBleHByZXNzaW9uIChtaW4td2lkdGgpXHJcbiogMi4gbWVkaWEtZG93bigpIC0gb3V0cHV0IEBtZWRpYSBleHByZXNzaW9uIChtYXgtd2lkdGgpXHJcbiogMy4gbWVkaWEtb25seSgpIC0gb3V0cHV0IEBtZWRpYSBleHByZXNzaW9uIChtaW4td2lkdGgpIGFuZCAobWF4LXdpZHRoKVxyXG4qXHJcbiovXHJcblxyXG5cclxuXHJcbi8vIGJldGEgVEVTVElOR1xyXG5cclxuXHJcbi8qIDEuICBtZWRpYS11cCgkYnBfbmFtZSkgLSBvdXRwdXQgQG1lZGlhIGV4cHJlc3Npb24gdXAgZnJvbSBicmVha3BvaW50IChtaW4td2lkdGgpICovXHJcblxyXG4vLyBcclxuLy8gQHBhcmFtICB7U3RyaW5nfSAkYnBfbmFtZSAtIGJyZWFrcG9pbnQgbmFtZVxyXG4vLyBAcmV0dXJuIHtDU1MgZXhwcmVzc2lvbn0gLSBAbWVkaWEgZXhwcmVzc2lvblxyXG4vLyBcclxuQG1peGluIG1lZGlhLXVwKCRicF9uYW1lKSB7XHJcblxyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICBnZXRfZ3JpZF9icCgkYnBfbmFtZSkrcHgpIHtcclxuICAgICAgICBAY29udGVudDtcclxuICAgIH0gICAgIFxyXG59XHJcblxyXG5cclxuLyogMi4gIG1lZGlhLWRvd24oJGJwX25hbWUpIC0gb3V0cHV0IEBtZWRpYSBleHByZXNzaW9uIGRvd24gZnJvbSBicmVha3BvaW50IChtYXgtd2lkdGgpICovXHJcblxyXG4vLyBcclxuLy8gQHBhcmFtICB7U3RyaW5nfSAkYnBfbmFtZSAtIGJyZWFrcG9pbnQgbmFtZVxyXG4vLyBAcmV0dXJuIHtDU1MgZXhwcmVzc2lvbn0gLSBAbWVkaWEgZXhwcmVzc2lvblxyXG4vLyBcclxuQG1peGluIG1lZGlhLWRvd24oJGJwX25hbWUpIHtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogIGdldF9ncmlkX2JwKCRicF9uYW1lKS0xcHgpIHtcclxuICAgICAgICBAY29udGVudDtcclxuICAgIH0gICAgXHJcbn1cclxuXHJcblxyXG5cclxuLy8gJG15bGlzdDogYXNkZiwgcXdlciwgdHl1aTtcclxuXHJcbi8vIEBkZWJ1ZyAkbXlsaXN0O1xyXG4vLyAvLyBAZGVidWcgbGlzdC5udGgoYXNkZiBxd2VyIHR5dWksIDIpOyAvLyDQkiDQlNCe0JrQo9Cc0JXQndCi0JDQptCY0Jgg0J7QqNCY0JHQmtCQISEhIC1cclxuLy8gQGRlYnVnIG50aChhc2RmIHF3ZXIgdHl1aSwgMik7XHJcbi8vIEBkZWJ1ZyBudGgoJG15bGlzdCwgMik7XHJcbi8vIEBkZWJ1ZyBudGgoJGRldmljZXMsIDIpO1xyXG5cclxuLy8gQGRlYnVnIGxpc3QubnRoKCRteWxpc3QsIDIpOyAgLy8gRXJyb3JcclxuXHJcblxyXG4vLyBsaXN0Lm50aCgkZGV2aWNlcywgNSlcclxuLy8gQGRlYnVnIGxpc3QubnRoKCRkZXZpY2VzLCAyKTsgLy8gXHJcbi8vIEBkZWJ1ZyBsaXN0Lm50aCgxMHB4IDEycHggMTZweCwgMik7IC8vIDEycHhcclxuXHJcbi8vIEBkZWJ1ZyBsaXN0Lm50aCgxMHB4IDEycHggMTZweCwgMik7IC8vIDEycHhcclxuLy8gQGRlYnVnIGxpc3QubnRoKFtsaW5lMSwgbGluZTIsIGxpbmUzXSwgLTEpOyAvLyBsaW5lM1xyXG5cclxuXHJcbi8qIDMuICBtZWRpYS1vbmx5KCRicF9uYW1lKSAtIG91dHB1dCBAbWVkaWEgZXhwcmVzc2lvbiB1cCBmcm9tIGJyZWFrcG9pbnQgdG8gdGhlIG5leHQgYnJlYWtwb2ludCAgKG1pbi13aWR0aCkgYW5kIChtYXgtd2lkdGgpICovXHJcblxyXG4vLyBcclxuLy8gQHBhcmFtICB7U3RyaW5nfSAkYnBfbmFtZSAtIGJyZWFrcG9pbnQgbmFtZVxyXG4vLyBAcmV0dXJuIHtDU1MgZXhwcmVzc2lvbn0gLSBAbWVkaWEgZXhwcmVzc2lvblxyXG4vLyBcclxuXHJcbkBtaXhpbiBtZWRpYS1vbmx5KCRicF9uYW1lKSB7IC8vIHRiX1xyXG5cclxuICAgIC8vICRicF9pbmRleDogaW5kZXgoJGRldmljZXMsICdkc18nKTsgLy8gMVxyXG4gICAgLy8gJGJwX2luZGV4OiBpbmRleChbbXZfLCB0Yl8sIGRzX10sIGRzXyk7IC8vICsgXHJcbiAgICAkYnBfaW5kZXg6IGluZGV4KG1hcC1rZXlzKCRkZXZpY2VzKSwgJGJwX25hbWUgKTsgLy8gKyBcclxuICAgIEBkZWJ1ZyAkYnBfaW5kZXg7ICAvLyBJbmRleCDQv9C10YDQtdC00LDQstCw0LXQvNC+0LPQviDQsdGA0LXQudC60L/QvtC40L3RgtCwXHJcbi8vICRuZXh0X2JwOiBudGgoJGRldmljZXMsICRicF9pbmRleCsxKTsgLy8g0KHQsNC8INC+0LHRitC10LrRgiDQsdGA0LXQudC60L/QvtC40L3RgtCwXHJcbi8vIEBkZWJ1ZyAkbmV4dF9icDtcclxuLy8gQGRlYnVnIHR5cGUtb2YoJG5leHRfYnApOyAvLyAgPT4gPyB0eXBlO1xyXG5cclxuICAgIC8vICRuZXh0X2JwX25hbWU6IG1hcC1rZXlzKCRuZXh0X2JwKTsgLy8g0JjQvNGPKNC60LvRjtGHINCx0YDQtdC50LrQv9C+0LjQuNC90YLQsCkgLy8gLVxyXG4gICAgLy8kbmV4dF9icF9uYW1lOiBpbmRleCgkbmV4dF9icCwgMCk7IC8vINCY0LzRjyjQutC70Y7RhyDQsdGA0LXQudC60L/QvtC40LjQvdGC0LApIC8vIC1cclxuICAgIC8vXHJcbiAgICAvLyAkbmV4dF9icF9uYW1lOiBudGgoJG5leHRfYnAsIDEpOyAvLyDQmNC80Y8o0LrQu9GO0Ycg0LHRgNC10LnQutC/0L7QuNC40L3RgtCwKSAvLyArIFxyXG4gICAgLy8gQGRlYnVnICRuZXh0X2JwX25hbWU7XHJcblxyXG4gICAgLy8gJG5leHRfYnBfbmFtZTogbnRoKCRuZXh0X2JwLCAxKTsgLy8g0JjQvNGPKNC60LvRjtGHINCx0YDQtdC50LrQv9C+0LjQuNC90YLQsCkgLy8gK1xyXG4gICAgQGRlYnVnIGxlbmd0aCgkZGV2aWNlcy1uYW1lcyk7XHJcbiAgICBAaWYgKCAkYnBfaW5kZXggPj0gbGVuZ3RoKCRkZXZpY2VzLW5hbWVzKSApIHtcclxuICAgICAgICBAZGVidWcgJ1RoaXMgaXMgbGFyZ2VzdCBCUCc7XHJcbiAgICAgICAgLy8gJG5leHRfYnBfbmFtZTogMTkyMDtcclxuXHJcbiAgICAgICAgQG1lZGlhIFxyXG4gICAgICAgICAgICAobWluLXdpZHRoOiAgZ2V0X2dyaWRfYnAoJGJwX25hbWUpK3B4KSBcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICBAY29udGVudDtcclxuICAgICAgICB9ICAgICAgICBcclxuICAgIH0gQGVsc2Uge1xyXG5cclxuICAgICAgICAkbmV4dF9icF9uYW1lOiBudGgoJGRldmljZXMtbmFtZXMsICRicF9pbmRleCsxKTsgLy8g0JjQvNGPKNC60LvRjtGHINCx0YDQtdC50LrQv9C+0LjQuNC90YLQsCkgLy8gKyDQvNC90LUg0LrQsNC20LXRgtGB0Y8g0YLQsNC6INC/0LjRgdCw0YLRjCDQsdC+0LvQtdC1INC70L7Qs9C40YfQvdC+XHJcblxyXG4gICAgICAgIEBtZWRpYSBcclxuICAgICAgICAgICAgLy8gKG1pbi13aWR0aDogIGdldF9ncmlkX2JwKHRiXykrcHgpIGFuZCBcclxuICAgICAgICAgICAgLy8gKG1heC13aWR0aDogIGdldF9ncmlkX2JwKGRzXyktMXB4KSBcclxuXHJcbiAgICAgICAgICAgIChtaW4td2lkdGg6ICBnZXRfZ3JpZF9icCgkYnBfbmFtZSkrcHgpIFxyXG4gICAgICAgICAgICBhbmQgXHJcbiAgICAgICAgICAgIChtYXgtd2lkdGg6ICBnZXRfZ3JpZF9icCgkbmV4dF9icF9uYW1lKS0xcHgpIFxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgIEBjb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAkbmV4dF9icF9uYW1lOiBudGgoJGRldmljZXMtbmFtZXMsICRicF9pbmRleCsxKTsgLy8g0JjQvNGPKNC60LvRjtGHINCx0YDQtdC50LrQv9C+0LjQuNC90YLQsCkgLy8gKyDQvNC90LUg0LrQsNC20LXRgtGB0Y8g0YLQsNC6INC/0LjRgdCw0YLRjCDQsdC+0LvQtdC1INC70L7Qs9C40YfQvdC+XHJcbiAgICAvLyBAZGVidWcgJG5leHRfYnA7XHJcbiAgICAvLyBAZGVidWcgJG5leHRfYnBfbmFtZTtcclxuXHJcbiAgICBcclxufVxyXG5cclxuXHJcblxyXG4vLyBAbWl4aW4gbWVkaWEtYnJlYWtwb2ludC11cCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkZ3JpZC1icmVha3BvaW50cykge1xyXG4vLyAgICRtaW46IGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHMpO1xyXG4vLyAgIEBpZiAkbWluIHtcclxuLy8gICAgIEBtZWRpYSAobWluLXdpZHRoOiAkbWluKSB7XHJcbi8vICAgICAgIEBjb250ZW50O1xyXG4vLyAgICAgfVxyXG4vLyAgIH0gQGVsc2Uge1xyXG4vLyAgICAgQGNvbnRlbnQ7XHJcbi8vICAgfVxyXG4vLyB9IiwiLypcclxuICogMS4gQ29sb3JzXHJcbiAqIDIuIEZvbnRzXHJcbiAqIDMuIEJvcmRlcnNcclxuICogNC4gWi1pbmRleFxyXG4gKiA1LiBBbmltYXRpb25zXHJcbiAqIFxyXG4gKiBcclxuICogXHJcbiovXHJcblxyXG5cclxuLy8gMS4gQ29sb3JzXHJcblxyXG4kYWNjZW50OiAjMjQ5MWRkO1xyXG4kYWNjZW50X2xpZ2h0OiBsaWdodGVuKCRhY2NlbnQsIDEzJSk7ICAvLyAjNWRhZWU2OyAgIC8vICM1ZmFmZTYgXHJcbiRhY2NlbnRfZGFyazogZGFya2VuKCRhY2NlbnQsIDExJSk7IC8vICMxYjcyYWU7ICAvLyAjMWI2YWExXHJcblxyXG4kZ3JleSA6ICM5Yjk5OWU7XHJcbiRncmV5X2xpZ2h0OiBsaWdodGVuKCRncmV5LCAyMyUpOyAvLyAkZ3JleV9zdXBlcl9saWdodDogbGlnaHRlbigkZ3JleV9saWdodCwgMTIlKTsgIC8vIGY1ZjRmNVxyXG4kZ3JleV9saWdodGVyOiBsaWdodGVuKCRncmV5LCAzMCUpOyAgLy8gICNlOGU3ZTlcclxuJGdyZXlfc3VwZXJfbGlnaHQ6IGxpZ2h0ZW4oJGdyZXksIDM1JSk7ICAvLyAgI2Y1ZjRmNVxyXG4kZ3JleV9kYXJrOiBkYXJrZW4oJGdyZXksIDE0JSk7IC8vICM3Nzc1N2I7XHJcbiRncmV5X3N1cGVyX2Rhcms6IGRhcmtlbigkZ3JleSwgNDAlKTsgLy8gIzM1MzQzN1xyXG5cclxuLy8gU2VtYW50aWMgY29sb3JzXHJcbiR0ZXh0OiAkZ3JleV9zdXBlcl9kYXJrO1xyXG4kd2hpdGU6ICNmZmZmZmY7XHJcbiRibGFjazogIzAwMDAwMDtcclxuXHJcbiRzdWNjZXNzX2NvbG9yOiAjMzVkZDI0O1xyXG4vLyAkZXJyb3JfY29sb3IgIDogI2RkMjQzNTtcclxuJGVycm9yX2NvbG9yICA6ICNhZTFiMjg7XHJcbi8vICR3YXJuaW5nX2NvbG9yOiAjZGRjZDI0OyAvLyAjZmJhZjFjXHJcbiR3YXJuaW5nX2NvbG9yOiAjYWVhMTFiOyAvL1xyXG4kd2FybmluZ19jb2xvcjogI2ZiYWYxYzsgLy9cclxuJGluZm9fY29sb3IgICA6ICMyNDkxZGQ7XHJcblxyXG5cclxuLy8gMi4gRm9udHNcclxuJGZiIDogMXJlbTtcclxuXHJcbiRmb250X2NvZWZmIDogMS4xOTtcclxuJGZvbnRfaDQgICAgOiAkZmIgKiAkZm9udF9jb2VmZjtcclxuJGZvbnRfaDMgICAgOiAkZm9udF9oNCAqICRmb250X2NvZWZmO1xyXG4kZm9udF9oMiAgICA6ICRmb250X2gzICogJGZvbnRfY29lZmY7XHJcbiRmb250X2gxICAgIDogJGZvbnRfaDIgKiAkZm9udF9jb2VmZjtcclxuXHJcbiRmb250X3NtYWxsICAgOiAkZmIgKiAxLyRmb250X2NvZWZmO1xyXG4kZm9udF9zbWFsbGVyIDogJGZvbnRfc21hbGwgKiAxLyRmb250X2NvZWZmO1xyXG5cclxuLy8gU2VtYW50aWNhbCBmb250c1xyXG4kZm9udF9mb3Jtc19lbGVtZW50czogJGZiO1xyXG5cclxuXHJcbiRsX3M6ICAwLjAyNWVtO1xyXG4kbF9zX2JpZzogIDAuMDVlbTtcclxuXHJcbiRsX2ggOiAxLjVlbTtcclxuJGxfaF9oZWFkOiAxLjJlbTtcclxuXHJcbiRmb250X2ZhbWlseSA6IFwiUm9ib3RvXCIsICBWZXJkYW5hLCAgQXJpYWwsIHNhbnMtc2VyaWY7XHJcbiRmb250X2ZhbWlseV9oZWFkIDogXCJSb2JvdG9cIiwgIFRhaG9tYSwgIEFyaWFsLCBzYW5zLXNlcmlmO1xyXG5cclxuXHJcbi8vIDMuIEJvcmRlcnNcclxuJGJkX3JhZDogOHB4O1xyXG5cclxuXHJcbi8vIDQuIFotaW5kZXhcclxuJHppbmRleF9pY29uOiAxMDA7XHJcbiR6aW5kZXhfbmF2OiAyMDA7XHJcbiR6aW5kZXhfc3RpY2t5OiAzMDA7XHJcbiR6aW5kZXhfbW9kYWw6IDQwMDtcclxuJHppbmRleF90b29sdGlwOiA1MDA7XHJcblxyXG5cclxuJHNpZGViYXJfd2lkdGg6IDI2MDtcclxuLy8gJHNpZGViYXJfb2Zmc2V0OiAoNDAgLSAkY29sdW1uc19nYXApK3B4O1xyXG4kc2lkZWJhcl9vZmZzZXQ6IDQwcHg7XHJcblxyXG5cclxuLy8gNS4gQW5pbWF0aW9uc1xyXG4kdHJuc19kdXI6IDAuNHM7XHJcbiR0cmFuc2l0aW9uX2R1cmF0aW9uOiAwLjI1cztcclxuXHJcblxyXG5cclxuLy8gLiA/XHJcblxyXG4kZm9udF91bml0c19uZWdhdGl2ZTogMjsgLy8gZm9udCB1bml0cyBsZXNzIHRoZW4gJ2Jhc2UnXHJcbiRmb250X3NpemVfbmFtZXM6ICggIFxyXG4gICAgJ3NtYWxsZXInLFxyXG4gICAgJ3NtYWxsJyxcclxuICAgICdiYXNlJyxcclxuICAgIGg2LFxyXG4gICAgaDUsXHJcbiAgICBoNCxcclxuICAgIGgzLFxyXG4gICAgaDIsXHJcbiAgICAnaDEnLFxyXG4gICAgJ2xhcmdlJ1xyXG4pO1xyXG5cclxuJGZvbnRzOiAoKTsiLCIvLyBAaW1wb3J0ICdtaXhpbnMvc3BlY2lhbC9oZXhhZ29uJztcclxuLy8gQGltcG9ydCAnbWl4aW5zL3NwZWNpYWwvaGV4YWdvbl9iZyc7XHJcbi8vIEBpbXBvcnQgJ21peGlucy9zcGVjaWFsL2lwaG9uZSc7XHJcbkBpbXBvcnQgJ21peGlucy9zcGVjaWFsL2N1dGVkX2Nvcm5lcnMnO1xyXG5cclxuQGltcG9ydCAnbWl4aW5zL2Rlc2lnbic7XHJcbkBpbXBvcnQgJ21peGlucy9zY3Jldyc7XHJcbkBpbXBvcnQgJ21peGlucy90aGVtZSc7IC8vIFRPRE86IGZpcnN0IGFkZCBfdmFycy5zY3NzXHJcbkBpbXBvcnQgJ21peGlucy9leHRlbmRzJztcclxuIiwiLypcclxuICogY3V0X2Nvcm5lcnMoKVxyXG4gKi9cclxuXHJcbi8vLyBDdXRlIGJsb2NrIGNvcm5lcnMgLSBHZW5lcmF0ZXMgYSBwc2V1ZG8tZWxlbWVudHMgd2l0aCBiZyBjb2xvcnMgb24gYmxvY2sgY29ybmVycyAoZm9yIDIgY29ybmVycylcclxuLy8vIE5lZWQ6IHBvc2l0aW9uOiByZWxhdGl2ZTsgb24gZWxlbWVudCxcclxuLy8vIFJlY29tbWVuZGVkOiBvdmVyZmxvdzogaGlkZGVuOyBpZiB0aGV5IGFyZSBzZXZlcmFsIGVsZW1lbnRzIG5lYXJcclxuLy8vXHJcbi8vLyBFeGFtcGxlOiBcclxuLy8vIEBpbmNsdWRlIGN1dGVkX2Nvcm5lcnMoICgkZmlyc3RfZGlyZWN0aW9uLCAkZmlyc3RfYm9yZGVyX3JhZGl1cywgJGZpcnN0X2NvbG9yKSwgKCRzZWNvbmRfZGlyZWN0aW9uLCAkc2Vjb25kX2JvcmRlcl9yYWRpdXMsICRzZWNvbmRfY29sb3IpICk7XHJcbi8vLyBAaW5jbHVkZSBjdXRlZF9jb3JuZXJzKCAoJ3JpZ2h0IHRvcCcsIDMwcHgsICRncmV5X2xpZ2h0KSwgKCdib3R0b20gdG9wJywgMjBweCwgJGdyZXlfbGlnaHQpICk7XHJcbi8vLyBcclxuLy8vIEBhcmd1bWVudCB7bGlzdCB9ICRhcmdzX2Nvcm5lcl9maXJzdFxyXG4vLy8gICBGaXJzdCBjb3JuZXIgYXJnczpcclxuLy8vICAgICB7c3RyaW5nfSAkZmlyc3RfZGlyZWN0aW9uIFsgJ2xlZnQgdG9wJyB8ICdyaWdodCB0b3AnIHwgJ2xlZnQgYm90dG9tJyB8ICdyaWdodCBib3R0b20nIF1cclxuLy8vICAgICAgICAgRmlyc3QgY29ybmVyIGRpcmVjdGlvblxyXG4vLy8gICAgIHtudW1iZXIgKHdpdGggdW5pdCl9ICRmaXJzdF9ib3JkZXJfcmFkaXVzXHJcbi8vLyAgICAgICAgIEZpcnN0IGNvcm5lciBib3JkZXItcmFkdWlzXHJcbi8vLyAgICAge2NvbG9yfSAkZmlyc3RfY29sb3JcclxuLy8vICAgICAgICAgRmlyc3QgY29ybmVyIGJnIGNvbG9yXHJcbi8vL1xyXG4vLy8gQGFyZ3VtZW50IHtsaXN0IH0gJGFyZ3NfY29ybmVyX2ZpcnN0XHJcbi8vLyAgIEZpcnN0IGNvcm5lciBhcmdzOlxyXG4vLy8gICAgIHtzdHJpbmd9ICRzZWNvbmRfZGlyZWN0aW9uIFsgJ2xlZnQgdG9wJyB8ICdyaWdodCB0b3AnIHwgJ2xlZnQgYm90dG9tJyB8ICdyaWdodCBib3R0b20nIF1cclxuLy8vICAgICAgICAgRmlyc3QgY29ybmVyIGRpcmVjdGlvblxyXG4vLy8gICAgIHtudW1iZXIgKHdpdGggdW5pdCl9ICRzZWNvbmRfYm9yZGVyX3JhZGl1c1xyXG4vLy8gICAgICAgICBGaXJzdCBjb3JuZXIgYm9yZGVyLXJhZHVpc1xyXG4vLy8gICAgIHtjb2xvcn0gJHNlY29uZF9jb2xvclxyXG4vLy8gICAgICAgICBGaXJzdCBjb3JuZXIgYmcgY29sb3JcclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzXHJcbi8vLyAubXktZWxlbWVudCB7XHJcbi8vLyAgICAgQGluY2x1ZGUgY3V0ZWRfY29ybmVycyggKCdsZWZ0IHRvcCcsIDMwcHgsICRncmV5X2xpZ2h0KSwgKCdyaWdodCB0b3AnLCAyMHB4LCAkZ3JleV9saWdodCkgKTtcclxuLy8vIH1cclxuLy8vIFxyXG4vLy8gLy8gQ1NTIE91dHB1dFxyXG4vLy8gLm15LWVsZW1lbnQ6OmJlZm9yZSB7XHJcbi8vLyAgICAgcmlnaHQ6IC0zMHB4O1xyXG4vLy8gICAgIHRvcDogLTMwcHg7XHJcbi8vLyAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4vLy8gICAgIGNvbnRlbnQ6IFwiXCI7XHJcbi8vLyAgICAgYm9yZGVyOiAzMHB4IHNvbGlkICNkNmQ1ZDc7XHJcbi8vLyAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xyXG4vLy8gfVxyXG4vLy8gLm15LWVsZW1lbnQ6OmFmdGVyIHtcclxuLy8vICAgICByaWdodDogLTIwcHg7XHJcbi8vLyAgICAgYm90dG9tOiAtMjBweDtcclxuLy8vICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbi8vLyAgICAgY29udGVudDogXCJcIjtcclxuLy8vICAgICBib3JkZXI6IDIwcHggc29saWQgI2Q2ZDVkNztcclxuLy8vICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XHJcbi8vLyB9XHJcbi8vLyBcclxuXHJcblxyXG5cclxuXHJcbi8vIG50aCAoJGFycmF5LCAkaW5kZXgpIC0g0L/QvtC70YPRh9Cw0LXRgiDRjdC70LXQvNC10L3RgiDQvNCw0YHRgdC40LLQsCAo0YHQv9C40YHQutCwINC/0L4g0LjQvdC00LXQutGB0YMpXHJcblxyXG4vKlxyXG5cclxu0JLQt9GP0YLRjCDQv9C10YDQstGL0Lkg0LDRgNCz0YPQvNC10L3RgiDQvNCw0YHRgdC40LJcclxu0KDQsNC30LvQvtC20LjRgtGMINC00LXRgdGC0YDRg9C60YLQuNCy0L3QvlxyXG7QldGB0LvQuCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1IGRpcmVjdGlvblxyXG4gICAgMVxyXG4gICAgMlxyXG4gICAgM1xyXG4gICAgNFxyXG5cclxuXHJcbiAqL1xyXG5cclxuQG1peGluIGN1dGVkX2Nvcm5lcnMgKCRhcmdzX2Nvcm5lcl9maXJzdCwgJGFyZ3NfY29ybmVyX3NlY29uZDogJycpIHtcclxuLy8gQG1peGluIGN1dGVkX2Nvcm5lcnMgKCRhcmdzX2Nvcm5lcl9maXJzdCkge1xyXG5cclxuICAgIC8vIGFyZ3NfY29ybmVyX2ZpcnN0XHJcbiAgICBAaWYgbGlzdCAhPSB0eXBlLW9mKCAkYXJnc19jb3JuZXJfZmlyc3QgKSAge1xyXG4gICAgICAgIEBkZWJ1ZyAnV0FOUklORzogbWl4aW4gY3V0ZWRfY29ybmVycygpIGFyZ3MgaXMgbm90IGxpc3QnO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBAZGVidWcgJ2FyZ3NfY29ybmVyX2ZpcnN0OiAnO1xyXG4gICAgLy8gQGRlYnVnICRhcmdzX2Nvcm5lcl9maXJzdDsgLy8gK1xyXG4gICAgJGZpcnN0X2RpcmVjdGlvbjogbnRoKCRhcmdzX2Nvcm5lcl9maXJzdCwgMSk7XHJcbiAgICAvLyBAZGVidWcgJ0ZJUlNUX0RJUkVDVElPTjogJztcclxuICAgIC8vIEBkZWJ1ZyAkZmlyc3RfZGlyZWN0aW9uOyAvLyArXHJcbiAgICAkZmlyc3RfYm9yZGVyX3JhZGl1czogbnRoKCRhcmdzX2Nvcm5lcl9maXJzdCwgMik7XHJcbiAgICAkZmlyc3RfY29sb3I6IG50aCgkYXJnc19jb3JuZXJfZmlyc3QsIDMpO1xyXG5cclxuICAgIC8vIDHQuVxyXG4gICAgJjpiZWZvcmUge1xyXG5cclxuICAgICAgICAvLyDQktGL0LHQuNGA0LDQtdC8INGB0LIt0LLQsCDQvtGC0LLQtdGH0LDRjtGJ0LjQtSDQt9CwINC90LDQv9GA0LDQu9C10L3QuNGPXHJcbiAgICAgICAgQGlmICdsZWZ0IHRvcCcgPT0gJGZpcnN0X2RpcmVjdGlvbiB7XHJcbiAgICAgICAgICAgIGxlZnQ6IC0kZmlyc3RfYm9yZGVyX3JhZGl1cztcclxuICAgICAgICAgICAgdG9wOiAtJGZpcnN0X2JvcmRlcl9yYWRpdXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBAaWYgJ3JpZ2h0IHRvcCcgPT0gJGZpcnN0X2RpcmVjdGlvbiB7XHJcbiAgICAgICAgICAgIHJpZ2h0OiAtJGZpcnN0X2JvcmRlcl9yYWRpdXM7XHJcbiAgICAgICAgICAgIHRvcDogLSRmaXJzdF9ib3JkZXJfcmFkaXVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQGlmICdsZWZ0IGJvdHRvbScgPT0gJGZpcnN0X2RpcmVjdGlvbiB7XHJcbiAgICAgICAgICAgIGxlZnQ6IC0kZmlyc3RfYm9yZGVyX3JhZGl1cztcclxuICAgICAgICAgICAgYm90dG9tOiAtJGZpcnN0X2JvcmRlcl9yYWRpdXM7XHJcbiAgICAgICAgfSAgXHJcblxyXG4gICAgICAgIEBpZiAncmlnaHQgYm90dG9tJyA9PSAkZmlyc3RfZGlyZWN0aW9uIHtcclxuICAgICAgICAgICAgcmlnaHQ6IC0kZmlyc3RfYm9yZGVyX3JhZGl1cztcclxuICAgICAgICAgICAgYm90dG9tOiAtJGZpcnN0X2JvcmRlcl9yYWRpdXM7XHJcbiAgICAgICAgfSAgXHJcblxyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICBjb250ZW50OiBcIlwiO1xyXG5cclxuICAgICAgICAvLyBtZXRyaWNzIGFuZCBiZyB1c2luZyBib3JkZXIpXHJcbiAgICAgICAgYm9yZGVyOiAkZmlyc3RfYm9yZGVyX3JhZGl1cyBzb2xpZCAkZmlyc3RfY29sb3I7XHJcblxyXG4gICAgICAgIC8vIGJhY2tncm91bmQtY29sb3I6ICRmaXJzdF9jb2xvcjtcclxuICAgICAgICB0cmFuc2Zvcm06ICByb3RhdGUoNDVkZWcpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8vIGFyZ3NfY29ybmVyX3NlY29uZFxyXG4gICAgQGlmIGxpc3QgIT0gdHlwZS1vZiggJGFyZ3NfY29ybmVyX3NlY29uZCApICB7XHJcbiAgICAgICAgQGRlYnVnICdXQU5SSU5HOiBtaXhpbiBjdXRlZF9jb3JuZXJzKCkgYXJncyBpcyBub3QgbGlzdCc7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAkc2Vjb25kX2RpcmVjdGlvbjogbnRoKCRhcmdzX2Nvcm5lcl9zZWNvbmQsIDEpO1xyXG4gICAgJHNlY29uZF9ib3JkZXJfcmFkaXVzOiBudGgoJGFyZ3NfY29ybmVyX3NlY29uZCwgMik7XHJcbiAgICAkc2Vjb25kX2NvbG9yOiBudGgoJGFyZ3NfY29ybmVyX3NlY29uZCwgMyk7XHJcblxyXG4gICAgLy8gMtC5XHJcbiAgICAmOmFmdGVyIHtcclxuXHJcbiAgICAgICAgLy8g0JLRi9Cx0LjRgNCw0LXQvCDRgdCyLdCy0LAg0L7RgtCy0LXRh9Cw0Y7RidC40LUg0LfQsCDQvdCw0L/RgNCw0LvQtdC90LjRj1xyXG4gICAgICAgIEBpZiAnbGVmdCB0b3AnID09ICRzZWNvbmRfZGlyZWN0aW9uIHtcclxuICAgICAgICAgICAgbGVmdDogLSRzZWNvbmRfYm9yZGVyX3JhZGl1cztcclxuICAgICAgICAgICAgdG9wOiAtJHNlY29uZF9ib3JkZXJfcmFkaXVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQGlmICdyaWdodCB0b3AnID09ICRzZWNvbmRfZGlyZWN0aW9uIHtcclxuICAgICAgICAgICAgcmlnaHQ6IC0kc2Vjb25kX2JvcmRlcl9yYWRpdXM7XHJcbiAgICAgICAgICAgIHRvcDogLSRzZWNvbmRfYm9yZGVyX3JhZGl1cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEBpZiAnbGVmdCBib3R0b20nID09ICRzZWNvbmRfZGlyZWN0aW9uIHtcclxuICAgICAgICAgICAgbGVmdDogLSRzZWNvbmRfYm9yZGVyX3JhZGl1cztcclxuICAgICAgICAgICAgYm90dG9tOiAtJHNlY29uZF9ib3JkZXJfcmFkaXVzO1xyXG4gICAgICAgIH0gIFxyXG5cclxuICAgICAgICBAaWYgJ3JpZ2h0IGJvdHRvbScgPT0gJHNlY29uZF9kaXJlY3Rpb24ge1xyXG4gICAgICAgICAgICByaWdodDogLSRzZWNvbmRfYm9yZGVyX3JhZGl1cztcclxuICAgICAgICAgICAgYm90dG9tOiAtJHNlY29uZF9ib3JkZXJfcmFkaXVzO1xyXG4gICAgICAgIH0gIFxyXG5cclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgY29udGVudDogXCJcIjtcclxuXHJcbiAgICAgICAgLy8gbWV0cmljcyBhbmQgYmcgdXNpbmcgYm9yZGVyKVxyXG4gICAgICAgIGJvcmRlcjogJHNlY29uZF9ib3JkZXJfcmFkaXVzIHNvbGlkICRzZWNvbmRfY29sb3I7XHJcblxyXG4gICAgICAgIC8vIGJhY2tncm91bmQtY29sb3I6ICRzZWNvbmRfY29sb3I7XHJcbiAgICAgICAgdHJhbnNmb3JtOiAgcm90YXRlKDQ1ZGVnKTtcclxuXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vLyBERUJVRzpcclxuLy8gXHJcbi8vIC5jdXRfY29ybmVycyB7XHJcbi8vICAgICBjb250ZW50OiBcIlwiO1xyXG4vLyAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4vLyAgICAgcmlnaHQ6IC0zMHB4O1xyXG4vLyAgICAgdG9wOiAtMzBweDtcclxuLy8gICAgIGJvcmRlcjogMzBweCBzb2xpZCAjZmZmZmZmO1xyXG4vLyAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xyXG4vLyAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcclxuXHJcbi8vIH1cclxuXHJcbi8vIC5jdXRlZF9jb3JuZXJzIHtcclxuLy8gICAgIGNvbnRlbnQ6IFwiXCI7XHJcbi8vICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbi8vICAgICByaWdodDogLTIwcHg7XHJcbi8vICAgICB0b3A6IC0yMHB4OyAgICBcclxuLy8gICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuLy8gICAgIGJvcmRlcjogMjBweCBzb2xpZCAjZmZmZmZmO1xyXG4gICAgXHJcbi8vIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8gQG1peGluIGN1dF9jb3JuZXJzICgkY29ybmVyX3JhZGl1cywgJGNvcm5lcl9jb2xvcikge1xyXG5cclxuLy8gdiBhcmdzIGlzIGFycmF5cyAobGlzdHMgLSBlYWNoIGNvcm5lciBpcyBsaXN0KSAgICBcclxuLy8gQG1peGluIGNyb3BfY29ybmVycyAoIFxyXG4vLyAgICAgICAgICggJ2xlZnQgdG9wJywgMjBweCwgJHdoaXRlICksXHJcbi8vICAgICAgICAgKCAncmlnaHQgdG9wJywgMjBweCwgJHdoaXRlICksXHJcbi8vICAgICApICB7XHJcblxyXG5cclxuLy8gQG1peGluIGNyb3BfY29ybmVycyAoIFxyXG4vLyAgICAgICAgICggJGNvcm5lcl9wb3NpdGlvbiwgJGNvcm5lcl9yYWRpdXMsICRjb3JuZXJfY29sb3IgKSxcclxuLy8gICAgICAgICAoICdyaWdodCB0b3AnLCAyMHB4LCAkd2hpdGUgKSxcclxuLy8gICAgICkgIHtcclxuICAgICBcclxuICBcclxuQG1peGluIGNyb3BfY29ybmVycyAoICRhcmdzICkgIHtcclxuXHJcbiAgICAvLyBmb3JcclxuXHJcbiAgICBAZWFjaCAkaXRlbSBpbiAoICRhcmdzICkge1xyXG5cclxuICAgICAgICAvLyAkY29ybmVyX3Bvc2l0aW9uID0gbGlzdC5udGgoJGl0ZW0sIDApOyAvLyBcclxuICAgICAgICAvLyBAZGVidWcgJ2Nvcm5lcl9wb3NpdGlvbic7Ly8gICRjb3JuZXJfcG9zaXRpb247XHJcbiAgICAgICAgLy8gQGRlYnVnICRjb3JuZXJfcG9zaXRpb247XHJcbiAgICAgICAgLy8gXHJcbiAgICAgICAgLy8gQGRlYnVnIGxpc3QubnRoKDEwcHggMTJweCAxNnB4LCAyKTsgLy8gIC1cclxuICAgICAgICAvLyBAZGVidWcgbnRoKDEwcHggMTJweCAxNnB4LCAyKTsgLy8gICtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgJGNvcm5lcl9wb3NpdGlvbjogbnRoKCRpdGVtLCAxKTsgLy8g0LIgU0FTUyDQvdCw0YfQuNC90LDQtdGC0YHRjyDRgSAxINGB0YfQtdGCKVxyXG4gICAgICAgIEBkZWJ1ZyAnY29ybmVyX3Bvc2l0aW9uJzsvLyAgJGNvcm5lcl9wb3NpdGlvbjsgICAgICAgIFxyXG4gICAgICAgIEBkZWJ1ZyAkY29ybmVyX3Bvc2l0aW9uOyAvLyArXHJcblxyXG4gICAgICAgIC8vINCU0LDQu9C10LU6XHJcbiAgICAgICAgLy8gXHJcbiAgICAgICAgLy8g0LTQvtC/0LjRgdCw0YLRjCDRgdGC0LjQu9C4INGD0LPQvtC70LrQvtCyXHJcbiAgICAgICAgXHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8gLy8gcmlnaHQgdG9wXHJcbiAgICAgICAgLy8gJjpiZWZvcmUge1xyXG5cclxuXHJcbiAgICAgICAgLy8gICAgIEBpbmNsdWRlIHBzZXVkb2VsZW1lbnRfcmlnaHRfdG9wKC0kY29ybmVyX3JhZGl1cywgLSRjb3JuZXJfcmFkaXVzKTtcclxuICAgICAgICAvLyAgICAgLy8gd2lkdGg6IDJlbTtcclxuICAgICAgICAvLyAgICAgLy8gaGVpZ2h0OiAyZW07XHJcbiAgICAgICAgLy8gICAgIGJvcmRlcjogJGNvcm5lcl9yYWRpdXMgc29saWQgJGNvcm5lcl9jb2xvcjtcclxuICAgICAgICAvLyAgICAgLy8gYmFja2dyb3VuZC1jb2xvcjogI2IyNWM5YztcclxuICAgICAgICAvLyAgICAgdHJhbnNmb3JtOiAgcm90YXRlKDQ1ZGVnKTtcclxuICAgICAgICAvLyAgICAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlO1xyXG4gICAgICAgIC8vICAgICBjb2xvcjogJGNvcm5lcl9wb3NpdGlvbjtcclxuICAgICAgICAvLyB9ICAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gLy8gcmlnaHQgdG9wXHJcbiAgICAvLyAmOmJlZm9yZSB7XHJcblxyXG5cclxuICAgIC8vICAgICBAaW5jbHVkZSBwc2V1ZG9lbGVtZW50X3JpZ2h0X3RvcCgtJGNvcm5lcl9yYWRpdXMsIC0kY29ybmVyX3JhZGl1cyk7XHJcbiAgICAvLyAgICAgLy8gd2lkdGg6IDJlbTtcclxuICAgIC8vICAgICAvLyBoZWlnaHQ6IDJlbTtcclxuICAgIC8vICAgICBib3JkZXI6ICRjb3JuZXJfcmFkaXVzIHNvbGlkICRjb3JuZXJfY29sb3I7XHJcbiAgICAvLyAgICAgLy8gYmFja2dyb3VuZC1jb2xvcjogI2IyNWM5YztcclxuICAgIC8vICAgICB0cmFuc2Zvcm06ICByb3RhdGUoNDVkZWcpO1xyXG4gICAgLy8gICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcclxuICAgIC8vIH0gICBcclxuXHJcbiAgICAvLyAvLyBsZWZ0IGJvdHRvbVxyXG4gICAgLy8gJjphZnRlciB7XHJcblxyXG5cclxuICAgIC8vICAgICAvLyBAaW5jbHVkZSBwc2V1ZG9lbGVtZW50X3JpZ2h0X3RvcCgtMmVtLCAtMmVtKTtcclxuICAgIC8vICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAvLyAgICAgY29udGVudDogXCJcIjtcclxuICAgIC8vICAgICBsZWZ0OiAtJGNvcm5lcl9yYWRpdXM7IGJvdHRvbTogLSRjb3JuZXJfcmFkaXVzO1xyXG4gICAgLy8gICAgIGJvcmRlcjogJGNvcm5lcl9yYWRpdXMgc29saWQgJGNvcm5lcl9jb2xvcjtcclxuICAgIC8vICAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiAjYjI1YzljO1xyXG4gICAgLy8gICAgIHRyYW5zZm9ybTogIHJvdGF0ZSg0NWRlZyk7XHJcbiAgICAvLyAgICAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlO1xyXG4gICAgLy8gfVxyXG5cclxufVxyXG5cclxuXHJcblxyXG4vLyAvLyBPbGQgc3RhdGljIHZcclxuLy8gQG1peGluIGN1dF9jb3JuZXJzICgkY29ybmVyX3JhZGl1cywgJGNvcm5lcl9jb2xvcikge1xyXG5cclxuLy8gICAgIC8vIHJpZ2h0IHRvcFxyXG4vLyAgICAgJjpiZWZvcmUge1xyXG5cclxuXHJcbi8vICAgICAgICAgQGluY2x1ZGUgcHNldWRvZWxlbWVudF9yaWdodF90b3AoLSRjb3JuZXJfcmFkaXVzLCAtJGNvcm5lcl9yYWRpdXMpO1xyXG4vLyAgICAgICAgIC8vIHdpZHRoOiAyZW07XHJcbi8vICAgICAgICAgLy8gaGVpZ2h0OiAyZW07XHJcbi8vICAgICAgICAgYm9yZGVyOiAkY29ybmVyX3JhZGl1cyBzb2xpZCAkY29ybmVyX2NvbG9yO1xyXG4vLyAgICAgICAgIC8vIGJhY2tncm91bmQtY29sb3I6ICNiMjVjOWM7XHJcbi8vICAgICAgICAgdHJhbnNmb3JtOiAgcm90YXRlKDQ1ZGVnKTtcclxuLy8gICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XHJcbi8vICAgICB9ICAgXHJcblxyXG4vLyAgICAgLy8gbGVmdCBib3R0b21cclxuLy8gICAgICY6YWZ0ZXIge1xyXG5cclxuXHJcbi8vICAgICAgICAgLy8gQGluY2x1ZGUgcHNldWRvZWxlbWVudF9yaWdodF90b3AoLTJlbSwgLTJlbSk7XHJcbi8vICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4vLyAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbi8vICAgICAgICAgbGVmdDogLSRjb3JuZXJfcmFkaXVzOyBib3R0b206IC0kY29ybmVyX3JhZGl1cztcclxuLy8gICAgICAgICBib3JkZXI6ICRjb3JuZXJfcmFkaXVzIHNvbGlkICRjb3JuZXJfY29sb3I7XHJcbi8vICAgICAgICAgLy8gYmFja2dyb3VuZC1jb2xvcjogI2IyNWM5YztcclxuLy8gICAgICAgICB0cmFuc2Zvcm06ICByb3RhdGUoNDVkZWcpO1xyXG4vLyAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcclxuLy8gICAgIH1cclxuXHJcbi8vIH1cclxuIiwiLypcclxuRE9DU1MgLSBEZXNpZ24tb3JpZW50aXJlZCBDU1NcclxuIFxyXG5NYWtlIHlvdXIgY29kZSBsaWtlIGRlc2lnbiB3aXRoIGRlc2lnbiB0ZXJtcyBsaWtlOlxyXG4gICAgQ29sb3Igc2NoZW1lXHJcbiAgICBUeXBvZ3JhcGhpYyBzY2hlbWVcclxuICAgIFZlcnRpY2FsIHJoeXRtXHJcbiAgICBIb3Jpem9udGFsIHJoeXRtXHJcbiAgICBIZWlnaHQgbGV2ZWxpbmdcclxuKi9cclxuXHJcbkBtaXhpbiBoZWlnaHRfbGV2ZWxpbmcoJHR5cGUpe1xyXG4gICAgJHBhZGRpbmdfbGV2ZWxpbmc6ICgkbF9oIC0gJGxfaF9oZWFkKSAvIDI7XHJcbiAgICAvLyBsaW5lLWhlaWdodDogJGxfaF9oZWFkOyBcclxuXHJcbiAgICBAaWYgJHR5cGUgPT0gaGVhZGluZyB7IC8vICtcclxuICAgICAgICBsaW5lLWhlaWdodDogJGxfaF9oZWFkO1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAkcGFkZGluZ19sZXZlbGluZztcclxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogJHBhZGRpbmdfbGV2ZWxpbmc7ICAgICAgICBcclxuICAgIH0gXHJcbiAgICBAaWYgJHR5cGUgPT0gaGVhZGluZ19kb3VibGUgeyAvLyArXHJcbiAgICAgICAgbGluZS1oZWlnaHQ6ICRsX2hfaGVhZDtcclxuICAgICAgICBwYWRkaW5nLXRvcDogJHBhZGRpbmdfbGV2ZWxpbmc7XHJcbiAgICAgICAgLy8gcGFkZGluZy1ib3R0b206ICRwYWRkaW5nX2xldmVsaW5nO1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206ICRwYWRkaW5nX2xldmVsaW5nO1xyXG4gICAgICAgIC8vIGhlaWdodDogMiAqICRsX2hfaGVhZCArIDIgKiAkcGFkZGluZ19sZXZlbGluZztcclxuICAgICAgICBoZWlnaHQ6IDIgKiAkbF9oX2hlYWQgKyAxICogJHBhZGRpbmdfbGV2ZWxpbmc7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICB0ZXh0LW92ZXJmbG93OiAgZWxsaXBzaXM7ICAgICAgIFxyXG4gICAgfSBcclxuXHJcbiAgICBAZWxzZSBpZiAkdHlwZSA9PSB0ZXh0IHsgLy8gK1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAkbF9oO1xyXG4gICAgfVxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gdGV4dC1jb21wcmVzc2VkIHsgLy9cclxuICAgICAgICAvLyBsaW5lLWhlaWdodDogJGxfaF9tZWRpdW07XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcclxuICAgIH0gICAgXHJcbiAgICBAZWxzZSBpZiAkdHlwZSA9PSBiYXNlIHsgLy8gK1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAkbF9oX2Jhc2U7XHJcbiAgICB9XHJcbiAgICBAZWxzZSBpZiAkdHlwZSA9PSBidXR0b24geyAvLyArK1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAkbF9oO1xyXG4gICAgICAgIGhlaWdodDogMS41ICogJGxfaF9iYXNlO1xyXG4gICAgfSAgICBcclxuICAgIFxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gZnVsbGhlaWdodCB7ICAvLyArXHJcbiAgICAgICAgQGV4dGVuZCAlZnVsbGhlaWdodDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbkBtaXhpbiB2X3JoeXRtKCR0eXBlLCAkbGgpIHtcclxuXHJcbiAgICBAaWYgJHR5cGUgPT0gaGVhZGluZyB7XHJcbiAgICAgICAgLy8gbGluZS1oZWlnaHQ6ICRsX2hfaGVhZDtcclxuICAgICAgICAvLyBwYWRkaW5nLXRvcDogJHBhZGRpbmdfbGV2ZWxpbmc7XHJcbiAgICAgICAgLy8gcGFkZGluZy1ib3R0b206ICRwYWRkaW5nX2xldmVsaW5nOyAgXHJcblxyXG4gICAgfSBAZWxzZSBpZiAkdHlwZSA9PSB0ZXh0IHtcclxuICAgICAgICBtYXJnaW4tdG9wOiAkbGggKiAwLjU7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogJGxoICogMC41O1xyXG4gICAgfSBcclxuXHJcbiAgICAgIEBlbHNlIGlmICR0eXBlID09IHNlY3Rpb24ge1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAkbGggKiAyO1xyXG4gICAgfSBAZWxzZSBpZiAkdHlwZSA9PSBzZWN0aW9uLXRpdGxlIHtcclxuICAgICAgICBtYXJnaW4tdG9wOiAyICogJGxfaDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAyICogJGxfaDtcclxuICBcclxuICAgIH0gQGVsc2UgaWYgJHR5cGUgPT0gc2VjdGlvbi1ibG9jayB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogMiAqICRsX2g7XHJcbiAgICAgICAgLy8gbWFyZ2luLWJvdHRvbTogMiAqICRsX2g7ICBcclxuICAgIH1cclxuICAgICBAZWxzZSBpZiAkdHlwZSA9PSBibG9jayB7IC8vICtcclxuICAgICAgICBtYXJnaW4tdG9wOiAtMC41ICogJGxfaDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAtMC41ICogJGxfaDsgICAgICAgICBcclxuICAgIH0gQGVsc2UgaWYgJHR5cGUgPT0gaXRlbSB7IC8vICtcclxuICAgICAgICBtYXJnaW4tdG9wOiAkbGggKiAwLjU7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogJGxoICogMC41O1xyXG4gICAgfVxyXG4gICAgIEBlbHNlIGlmICR0eXBlID09IGJsb2NrLWNhcmQgeyAgLy8gK1xyXG4gICAgICAgIG1hcmdpbi10b3A6IC0kY29sdW1uc19nYXArcHg7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogLSRjb2x1bW5zX2dhcCtweDtcclxuICAgIH0gQGVsc2UgaWYgJHR5cGUgPT0gY2FyZCB7IC8vICtcclxuICAgICAgICBtYXJnaW4tdG9wOiAkY29sdW1uc19nYXArcHg7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogJGNvbHVtbnNfZ2FwK3B4O1xyXG4gICAgfVxyXG4gICAgIEBlbHNlIHtcclxuICAgICAgICBcclxuICAgIH0gICAgXHJcbn1cclxuXHJcblxyXG5AbWl4aW4gaF9yaHl0bSgkdHlwZSwgJGZzKSB7XHJcblxyXG4gICAgQGlmICR0eXBlID09IGZvcm1zX2VsZW1lbnQge1xyXG4gICAgICAgIHBhZGRpbmctbGVmdDogJGNvbHVtbnNfZ2FwK3B4O1xyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6ICRjb2x1bW5zX2dhcCtweDtcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6ICRmcyAqIDEuMjU7XHJcbiAgICAgICAgcGFkZGluZy1yaWdodDogJGZzICogMS4yNTsgICAgICBcclxuICAgIH0gXHJcbiAgICBAZWxzZSBpZiAkdHlwZSA9PSBuYXZfZWxlbWVudCB7XHJcblxyXG4gICAgICAgIHBhZGRpbmctbGVmdDogJGZzICogMjtcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAkZnMgKiAyOyAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIEBlbHNlIGlmICR0eXBlID09IGNvbHVtbiB7IC8vICtcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6ICRjb2x1bW5zX2dhcCtweDtcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAkY29sdW1uc19nYXArcHg7ICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gY2FyZCB7IC8vICtcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDQvMyAqICRjb2x1bW5zX2dhcCtweDtcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiA0LzMgKiAkY29sdW1uc19nYXArcHg7ICAgICAgIFxyXG4gICAgfVxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gZ3JpZCB7IC8vIFxyXG4gICAgICAgIHBhZGRpbmctbGVmdDogMiAqICRjb2x1bW5zX2dhcCArIHB4O1xyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDIgKiAkY29sdW1uc19nYXAgKyBweDsgICAgICAgXHJcbiAgICB9IFxyXG59XHJcblxyXG5cclxuQG1peGluIHR5cG8oJHR5cGUpIHtcclxuXHJcbiAgICBAaWYgJHR5cGUgPT0gd3Jlcndld3JlcSB7XHJcblxyXG4gICAgfSBAZWxzZSBpZiAkdHlwZSA9PSB0aXRsZSB7IC8vICtcclxuICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgIGxldHRlci1zcGFjaW5nOiAkbF9zX2JpZztcclxuICAgICAgICAvLyB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICAgIGZvbnQtdmFyaWFudDogc21hbGwtY2FwcztcclxuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xyXG5cclxuICAgIH0gQGVsc2UgaWYgJHR5cGUgPT0gaGVhZGluZyB7IC8vICsrIC8vIGFjdGlvbl9faXRlbS10OjtpdGxlXHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgICAgICBsZXR0ZXItc3BhY2luZzogJGxfcztcclxuXHJcbiAgICB9IEBlbHNlIGlmICR0eXBlID09IHRleHQgeyAvLyArKysuLi5cclxuICAgICAgICBsZXR0ZXItc3BhY2luZzogJGxfcztcclxuICAgIH0gICBcclxuICAgICBAZWxzZSBpZiAkdHlwZSA9PSBkYXRlIHsgLy8gK1xyXG4gICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcclxuICAgICAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgfVxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gcHJpY2UgeyAvLyArK1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgIGxldHRlci1zcGFjaW5nOiAkbF9zO1xyXG4gICAgfVxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gYnV0dG9uIHsgLy8gK1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6ICRsX3M7XHJcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0aXRsZS1taW5pID8gbmFtZVxyXG4gICAgLy8gZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgIC8vIGxldHRlci1zcGFjaW5nOiAkbF9zO1xyXG4gICAgLy8geCwgeCBcclxuXHJcbiAgICBAZWxzZSBpZiAkdHlwZSA9PSBuYW1lIHsgLy8gK1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6ICRsX3M7XHJcbiAgICB9ICAgIFxyXG59XHJcblxyXG5cclxuQG1peGluIGNvbG9yX3NjaGVtZSgkdHlwZSkge1xyXG5cclxuICAgIEBpZiAkdHlwZSA9PSBkZWZhdWx0IHsgLy8gXHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlO1xyXG4gICAgICAgIGNvbG9yOiAkdGV4dDsgXHJcbiAgICB9XHJcbiAgICBAZWxzZSBpZiAkdHlwZSA9PSAnZGVmYXVsdC1yZXZlcnNlJyB7IC8vIFxyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR0ZXh0O1xyXG4gICAgICAgIGNvbG9yOiAkd2hpdGU7IFxyXG4gICAgfVxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gJ2RhcmsnIHsgLy8gK1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRncmV5X2Rhcms7XHJcbiAgICAgICAgLy8gY29sb3I6ICR3aGl0ZV9kYXJrOyBcclxuICAgICAgICBjb2xvcjogJGdyZXlfc3VwZXJfbGlnaHQ7IFxyXG4gICAgfVxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gJ2RhcmstYWNjZW50JyB7IC8vICtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JleV9kYXJrO1xyXG4gICAgICAgIGNvbG9yOiAkYWNjZW50X2FsdDsgXHJcbiAgICB9XHJcbiAgICBAZWxzZSBpZiAkdHlwZSA9PSAnYWNjZW50JyB7IC8vICtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYWNjZW50O1xyXG4gICAgICAgIGNvbG9yOiAkd2hpdGU7IFxyXG4gICAgfSBcclxufVxyXG4iLCIvKlxyXG4gKiAxLiBwc2V1ZG9lbGVtZW50X2xlZnRfdG9wKClcclxuICogMi4gcHNldWRvZWxlbWVudF9yaWdodF90b3AoKVxyXG4gKiAzLiBmbGV4KClcclxuICogNC4gd2lkdGgoKVxyXG4gKiA1LiBoZWlnaHQoKVxyXG4gKiA2LiBpbWFnZV9jZW50ZXJfY292ZXJcclxuICogNy4gaW1hZ2VfY2VudGVyX2NvbnRhaW5cclxuICogOC4gdGV4dF9vdmVyZmxvd1xyXG4gKiA5LiBiZ19jbGlwX3RleHRcclxuICogMTAuIHRleHRfdmVydGljYWwoKVxyXG4gKiAxMS4gc2V0X2JnX2FkYXB0aXZlXHJcbiAqIDAuXHJcbiAqL1xyXG5cclxuQG1peGluIHBzZXVkb2VsZW1lbnRfbGVmdF90b3AoJHZhbHVlMSwgJHZhbHVlMil7XHJcbiAgICBjb250ZW50IDogXCJcIjtcclxuICAgIHBvc2l0aW9uIDogYWJzb2x1dGU7IGxlZnQgOiAkdmFsdWUxOyB0b3AgOiAkdmFsdWUyOyBcclxufVxyXG5cclxuXHJcbkBtaXhpbiBwc2V1ZG9lbGVtZW50X3JpZ2h0X3RvcCgkdmFsdWUxLCAkdmFsdWUyKXtcclxuICAgIGNvbnRlbnQgOiBcIlwiO1xyXG4gICAgcG9zaXRpb24gOiBhYnNvbHV0ZTsgcmlnaHQgOiAkdmFsdWUxOyB0b3AgOiAkdmFsdWUyOyBcclxufVxyXG5cclxuXHJcbi8qXHJcbiAqIERpc3BsYXkgJ2ZsZXgnIC0gc2V0IGp1c3RpZnkgYW5kIGFsaWdtZW50LFxyXG4gKiBhZGQgc2V0IG9wdGlvbmFseSBmbGV4LWRpcmVjdGlvbiBhbmQgZmxleC13cmFwIFxyXG4gKiBDYWxsOiAvLyBmbGV4KHNwYWNlLWJldHdlZW4sIGNlbnRlcik7XHJcbiovXHJcbkBtaXhpbiBmbGV4KCRqdXN0aWZ5LCAkYWxpZ24sICRkaXJlY3Rpb246IHJvdywgJHdyYXA6IG5vd3JhcCApIHtcclxuXHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiAkanVzdGlmeTtcclxuICAgIGFsaWduLWl0ZW1zOiAkYWxpZ247IFxyXG5cclxuICAgIGZsZXgtZGlyZWN0aW9uOiAkZGlyZWN0aW9uOyBcclxuICAgIGZsZXgtd3JhcDogJHdyYXA7IFxyXG59XHJcblxyXG5cclxuLypcclxuICogU2V0IHdpZHRoIHByb3BlcnRpZXMgLSBzZXQgd2lkdGgsIG1pbi13aWR0aCBhbmQgbWF4LXdpZHRoXHJcbiAqIENhbGw6IC8vIHdpZHRoKGF1dG8sIDIwMHB4LCAxMDAlKTtcclxuKi9cclxuXHJcbkBtaXhpbiB3aWR0aCAoJHdpZHRoLCAkbWluX3dpZHRoOiBhdXRvLCAkbWF4X3dpZHRoOiBhdXRvKSB7XHJcbiAgICB3aWR0aDogJHdpZHRoO1xyXG5cclxuICAgIEBpZiAoICRtaW5fd2lkdGggIT0gYXV0byApIHtcclxuICAgICAgICBtaW4td2lkdGg6ICRtaW5fd2lkdGg7XHJcbiAgICB9XHJcbiAgICBAaWYgKCAkbWF4X3dpZHRoICE9IGF1dG8gKSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiAkbWF4X3dpZHRoO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKlxyXG4gKiBTZXQgaGVpZ2h0IHByb3BlcnRpZXMgLSBzZXQgaGVpZ2h0LCBtaW4taGVpZ2h0IGFkbiBtYXgtaGVpZ2h0XHJcbiAqIENhbGw6IC8vIGhlaWdodChhdXRvLCAyMDBweCwgMTAwJSk7XHJcbiovXHJcblxyXG5AbWl4aW4gaGVpZ2h0ICgkaGVpZ2h0LCAkbWluX2hlaWdodDogYXV0bywgJG1heF9oZWlnaHQ6IGF1dG8pIHtcclxuICAgIGhlaWdodDogJGhlaWdodDtcclxuXHJcbiAgICBAaWYgKCAkbWluX2hlaWdodCAhPSBhdXRvICkge1xyXG4gICAgICAgIG1pbi1oZWlnaHQ6ICRtaW5faGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgQGlmICggJG1heF9oZWlnaHQgIT0gYXV0byApIHtcclxuICAgICAgICBtYXgtaGVpZ2h0OiAkbWF4X2hlaWdodDtcclxuICAgIH0gXHJcbn1cclxuXHJcblxyXG4vKlxyXG4gKiBDZW50ZXJlZCBpbWFnZSBpbiBjb250YWluZXIgbGlrZSBDU1MgY292ZXJcclxuICogQ2FsbDogLy8gaW1hZ2VfY2VudGVyX2NvdmVyKCk7XHJcbiovXHJcbkBtaXhpbiBpbWFnZV9jZW50ZXJfY292ZXIgKCkge1xyXG5cclxuICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgbWF4LXdpZHRoOiBub25lO1xyXG4gICAgbWluLWhlaWdodDogMTAwJTtcclxuICAgIG1pbi13aWR0aDogMTAwJTtcclxuICAgIEBpbmNsdWRlIHBzZXVkb2VsZW1lbnRfbGVmdF90b3AoNTAlLCA1MCUpO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbn1cclxuXHJcblxyXG4vKlxyXG4gKiBDZW50ZXJlZCBpbWFnZSBpbiBjb250YWluZXIgbGlrZSBDU1MgY29udGFpblxyXG4gKiBDYWxsOiAvLyBpbWFnZV9jZW50ZXJfY29udGFpbigpO1xyXG4qL1xyXG5AbWl4aW4gaW1hZ2VfY2VudGVyX2NvbnRhaW4gKCkge1xyXG5cclxuICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgbWF4LWhlaWdodDogMTAwJTtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIEBpbmNsdWRlIHBzZXVkb2VsZW1lbnRfbGVmdF90b3AoNTAlLCA1MCUpO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbn1cclxuXHJcblxyXG4vKlxyXG4gKiBPdmVyZmxvdyB0ZXh0IGluIGVsZW1lbnRcclxuICogQ2FsbDogLy8gdGV4dF9vdmVyZmxvdygpO1xyXG4qL1xyXG5AbWl4aW4gdGV4dF9vdmVyZmxvdygpIHtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XHJcbn1cclxuXHJcblxyXG4vKlxyXG4gKiBTZXQgYmFja2dyb3VuZCBjbGlwIHRleHRcclxuICogQ2FsbDogLy8gYmdfY2xpcF90ZXh0KCk7XHJcbiovXHJcbkBtaXhpbiAgYmdfY2xpcF90ZXh0KCkge1xyXG5cclxuICAgIGJhY2tncm91bmQtY2xpcDogdGV4dDtcclxuICAgIGNvbG9yOiB0cmFuc3BhcmVudDsgXHJcbiAgICB0ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xyXG59XHJcblxyXG5cclxuLypcclxuICogU2V0IHRleHQgd3JpZ3RoaW5nIG1vZGUgdmVydGljYWwsIGFuZCBhbGlnbiB0ZXh0XHJcbiAqIENhbGw6IC8vIHRleHRfdmVydGljYWwoY2VudGVyLCAnJywgdHRiKTtcclxuKi9cclxuXHJcbi8vIFRPRE86INC/0LXRgNC10LTQtdC70LDRgtGMINGH0LXRgNC10LcgZmxleCwg0YfRgtC+0LHRiyDQtNC+0LHQsNCy0LjRgtGMINCy0LXRgNGC0LjQutCw0LvRjNC90L7QtSDQv9C+0LfQuNGG0LjQvtC90LjRgNC+0LLQsNC90LjQtVxyXG5cclxuQG1peGluIHRleHRfdmVydGljYWwgKCRwb3NpdGlvbl94LCAkcG9zaXRpb25feTogY2VudGVyLCAkZGlyZWN0aW9uOiB0dGIpIHtcclxuXHJcbiAgICBAaWYgJHBvc2l0aW9uX3ggPT0gbGVmdCB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIH1cclxuICAgIEBpZiAkcG9zaXRpb25feCA9PSByaWdodCB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICB9XHJcbiAgICBAaWYgJHBvc2l0aW9uX3ggPT0gY2VudGVyICB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEBpZiBwb3NpdGlvbl95ID09IHRydWUvZmFsc2Uge1xyXG4gICAgICAgIFxyXG4gICAgLy8gfSBAZWxzZSBpZiB7XHJcbiAgICAgICAgXHJcbiAgICAvLyB9IEBlbHNlIHtcclxuICAgICAgICBcclxuICAgIC8vIH1cclxuXHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG5cclxuICAgIC50ZXh0LXZlcnRpY2FsIHtcclxuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xyXG5cclxuICAgICAgICBAaWYgJGRpcmVjdGlvbiA9PSB0dGIgeyAgLy8gdG9wIHRvIGJvdHRvbVxyXG4gICAgICAgICAgICB3cml0aW5nLW1vZGU6IHZlcnRpY2FsLXJsO1xyXG4gICAgICAgICAgICAvLyB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBAaWYgJGRpcmVjdGlvbiA9PSBidHQgeyAgLy8gYm90dG9tIHRvIHRvcFxyXG4gICAgICAgICAgICB3cml0aW5nLW1vZGU6IHZlcnRpY2FsLXJsO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpXHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuLypcclxuICogU2V0IGFkYXB0aXZlIGJnLWltYWdlXHJcbiAqIENhbGw6IC8vIHNldF9iZ19hZGFwdGl2ZSgnLi4vaW1hZ2VzL3NlY3Rpb24tbWFpbi1iZycsICg3NjgsIDEyMDApLCAnanBnJyk7XHJcbiovXHJcblxyXG4vLyB2LjIgaW1hZ2UtNzY4LmpwZyAtIGlzIG1lYW4gd2lkdGggNzY4IGZvciBzbWFsbCB0aGFuIDc2OHB4IHRvIDc2OHB4XHJcbkBtaXhpbiBzZXRfYmdfYWRhcHRpdmUgKFxyXG4gICAgJGZpbGVfcGF0aCwgXHJcbiAgICAkYnJlYWtwb2ludHNfbGlzdCwgXHJcbiAgICAkZmlsZV9leHQsIFxyXG4gICAgJGJnX2NvbG9yIDogI2ZmZiwgXHJcbiAgICAkYmdfcG9zIDogMCAwLCBcclxuICAgICRiZ19yZXBlYXQ6IG5vLXJlcGVhdFxyXG5cclxuICAgICkge1xyXG5cclxuICAgIC8vIGJhY2tncm91bmQ6ICNmZmYgdXJsKCRmaWxlX3BhdGgrJy4nKyRmaWxlX2V4dCkgMCAwIG5vLXJlcGVhdDtcclxuXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmdfY29sb3I7XHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAkYmdfcG9zO1xyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6ICRiZ19yZXBlYXQ7XHJcbiAgICAvLyAkYmdfYXR0YWNobWVudDogc2Nyb2xsLFxyXG5cclxuICAgIC8vIHBhZGRpbmc6IGxlbmd0aCgkYnJlYWtwb2ludHNfbGlzdCk7XHJcbiAgICAkcXVhbnRpdHk6IGxlbmd0aCgkYnJlYWtwb2ludHNfbGlzdCk7XHJcblxyXG5cclxuICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRicmVha3BvaW50c19saXN0KSB7XHJcblxyXG4gICAgICAgICRuZXh0X2k6ICRpKzE7XHJcblxyXG4gICAgICAgIEBpZiAoICRpID09IDEgKSB7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvdW50OiAkaTtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgkZmlsZV9wYXRoKyctJysgbnRoKCRicmVha3BvaW50c19saXN0LCAkaSkgKycuJyskZmlsZV9leHQpOyAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9XHJcbiAgICAgICAgQGlmICggKCAkaSA+IDEgKSBhbmQgKCRpIDw9IGxlbmd0aCgkYnJlYWtwb2ludHNfbGlzdCkpICkge1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6IG50aCgkYnJlYWtwb2ludHNfbGlzdCwgJGkgLSAxKStweCkgYW5kIChtYXgtd2lkdGg6IG50aCgkYnJlYWtwb2ludHNfbGlzdCwgJGkpK3B4KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb3VudDogJGk7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJGZpbGVfcGF0aCsnLScrIG50aCgkYnJlYWtwb2ludHNfbGlzdCwgJGkpICsnLicrJGZpbGVfZXh0KTsgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IG50aCgkYnJlYWtwb2ludHNfbGlzdCwgJHF1YW50aXR5KStweCkgIHtcclxuXHJcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCRmaWxlX3BhdGgrJy4nKyRmaWxlX2V4dCk7ICAgICAgICAgICAgXHJcbiAgICB9ICAgICBcclxuXHJcblxyXG4vLyA3NjguanBnICBpPTEgICBtYXhcclxuLy8gMTIwMC5qcGcgaT0yICAgbWluIGFuZCBtYXhcclxuLy8gMTQ0MCAgICAgaT0zICAgbWluIGFuZCBtYXhcclxuLy8gLmpwZyAgICAgLSAgICAgbWluXHJcbiAgICBcclxufVxyXG5cclxuXHJcbi8vIHYuIG9sZCAtIG9ubHkgMSBicmVha3BvaW50IG1pbi13aWR0aFxyXG4vLyBcclxuLy8gQG1peGluIHNldF9iZ19hZGFwdGl2ZSgkZmlsZV9wYXRoLCAkYnJlYWtwb2ludF9wcmVmaXgsICRmaWxlX2V4dCkge1xyXG5cclxuLy8gICAgIGJhY2tncm91bmQ6ICNmZmYgdXJsKCRmaWxlX3BhdGgrJy4nKyRmaWxlX2V4dCkgMCAwIG5vLXJlcGVhdDtcclxuXHJcbiAgICBcclxuLy8gICAgIC8vIEBtZWRpYSAobWluLXdpZHRoOiAje21hcC1nZXQoJGRldmljZXMsICdkc18nKX1weCkge1xyXG4vLyAgICAgQG1lZGlhIChtaW4td2lkdGg6ICRicmVha3BvaW50X3ByZWZpeCtweCkge1xyXG4gICAgICAgIFxyXG4vLyAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgkZmlsZV9wYXRoKyctJyskYnJlYWtwb2ludF9wcmVmaXgrJy4nKyRmaWxlX2V4dCk7XHJcbi8vICAgICB9ICAgICAgXHJcbi8vIH0iLCJAaW1wb3J0ICdzZXRfZm9udHNfb2JqZWN0JztcclxuXHJcblxyXG5cclxuXHJcbkBtaXhpbiBib3JkZXJfZnVsbHdpZHRoKCR0eXBlLCAkY29sb3IpIHtcclxuXHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxuICAgICAgICBAaWYgJHR5cGUgPT0gJ3RvcCcge1xyXG4gICAgICAgICAgICAmOmJlZm9yZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgcHNldWRvZWxlbWVudF9sZWZ0X3RvcCgtMTAwJSwgMCUpOyBcclxuXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMzAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMXB4O1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBAaWYgJHR5cGUgPT0gJ2JvdHRvbScge1xyXG4gICAgICAgICAgICAmOmFmdGVyIHtcclxuXHJcbiAgICAgICAgICAgICAgIEBpbmNsdWRlIHBzZXVkb2VsZW1lbnRfbGVmdF90b3AoLTEwMCUsIDEwMCUpOyBcclxuXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMzAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMXB4O1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxufVxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4vLyBTZXQgZm9udC1zaXplIGZvciBlYWNoIGRldmljZSBmcm9tICRmb250cyB0byBAbWVkaWEgc2VsZWN0b3JzXHJcbi8vXHJcbi8vIHNldHRpbmdzOlxyXG4kc2V0dGluZ3NfZm9udF9zaXplX3BybzogKFxyXG4gICAgcm91bmRfdmFsdWVzOiAxLCAvLyBbMCwgMV0sIGJvb2xlYW5cclxuKTtcclxuLy9cclxuXHJcbkBtaXhpbiBmb250X3NpemVfcHJvICgkdHlwZSkge1xyXG5cclxuICAgICRjdXJyX2ZvbnRfc2l6ZSA6IDA7XHJcbiAgICAkcHJldl9mb250X3NpemUgOiAwO1xyXG5cclxuICAgIEBlYWNoICRmb250c19kZXZpY2UsICRmb250c19vYmogaW4gJGZvbnRzIHtcclxuXHJcbiAgICAgICAgJGN1cnJfZm9udF9zaXplOiBtYXAtZ2V0KCRmb250c19vYmosICR0eXBlKTtcclxuICAgICAgICAvLyBAZGVidWcgXCJjdXJyX2ZvbnRfc2l6ZV8gOiAjeyRjdXJyX2ZvbnRfc2l6ZX1cIjtcclxuICAgICAgICAvLyBAZGVidWcgXCJwcmV2X2ZvbnRfc2l6ZSA6ICN7JHByZXZfZm9udF9zaXplfVwiO1xyXG5cclxuXHJcbiAgICAgICAgQGlmICggJGN1cnJfZm9udF9zaXplICE9ICRwcmV2X2ZvbnRfc2l6ZSApIHtcclxuXHJcbiAgICAgICAgICAgICRwcmV2X2ZvbnRfc2l6ZTogJGN1cnJfZm9udF9zaXplO1xyXG5cclxuICAgICAgICAgICAgLy8gQG1lZGlhIChtaW4td2lkdGg6ICN7bWFwLWdldCgkZGV2aWNlcywgJGZvbnRzX2RldmljZSl9cHgpIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiAjeyAgYnAoJGZvbnRzX2RldmljZSkgfXB4KSB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gZm9udC1zaXplOiBtYXAtZ2V0KCRmb250c19vYmosICR0eXBlKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgJGZvbnRfc2l6ZTogbWFwLWdldCgkZm9udHNfb2JqLCAkdHlwZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBmb250LXNpemU6ICRmb250X3NpemU7XHJcbiAgICAgICAgICAgICAgICAvLyBmb250LXNpemU6ICAgcm91bmQoJGZvbnRfc2l6ZSkgO1xyXG5cclxuICAgICAgICAgICAgICAgIEBpZiAgbWFwLWdldCgkc2V0dGluZ3NfZm9udF9zaXplX3Bybywgcm91bmRfdmFsdWVzKSA9PSAxICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAgIHJvdW5kKCRmb250X3NpemUpIDtcclxuICAgICAgICAgICAgICAgIH0gQGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJGZvbnRfc2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSAvLyBAaWZcclxuXHJcbiAgICAgICAgLy8gQGRlYnVnIFwiX18gc3RhcnQgbmV4dCBpdGVyYXRpb25cIjsgICAgIFxyXG4gICAgfSAvLyBAZWFjaFxyXG5cclxufVxyXG5cclxuXHJcblxyXG4vKlxyXG5cclxuT2JqICRkZXZpY2VzIFxyXG4tPlxyXG5PYmogJGZvbnRfc2l6ZV9uYW1lc1xyXG4tPlxyXG5mdW5jdGlvbiBzZXRfZm9udF9zaXplcygpXHJcbi0+XHJcbm1peGluIGZvbnRfc2l6ZV9wcm8oKVxyXG5cclxuKi9cclxuXHJcblxyXG4ubXlfdGV4dCB7XHJcbiAgICAvLyBmb250LXNpemU6IG1vZHVsYXItc2NhbGUoMywgMWVtLCAkbWFqb3Itc2V2ZW50aCk7XHJcbiAgICAvLyBmb250LXNpemU6IG1vZHVsYXItc2NhbGUoMywgMWVtLCAxLjIpO1xyXG59XHJcbiAgICAvLyBAZGVidWcgXCJGb250cyBhcnJheTogI3skZm9udHN9XCI7XHJcbi5teV9oZWFkIHtcclxuICAgIC8vIEBpbmNsdWRlIGZvbnRfc2l6ZV9wcm8oJ3NtYWxsJyk7XHJcblxyXG4gICAgLy8gQGluY2x1ZGUgZm9udF9zaXplX3Byb19vbGQoJ2Jhc2UnKTsgLy8gK1xyXG5cclxuICAgIC8vIEBpbmNsdWRlIGZvbnRfc2l6ZV9wcm8oJ3NtYWxsJyk7ICAgIFxyXG4gICAgQGluY2x1ZGUgZm9udF9zaXplX3BybygnaDYnKTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuQG1peGluIGdyYWQoJHR5cGUpIHtcclxuXHJcblxyXG4gICAgQGlmICR0eXBlID09IGRlY29yIHtcclxuICAgICAgICAvLyBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHRyYW5zcGFyZW50aXplKCRvcmFuZ2UsIDAuMSksICRwaW5rKTtcclxuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICRhY2NlbnQsICRhY2NlbnRfYWx0X2xpZ2h0KTtcclxuICAgIH1cclxuICAgIEBlbHNlIGlmICR0eXBlID09IGJ1dHRvbiB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAkYWNjZW50LCAkYWNjZW50X2FsdF9saWdodCk7XHJcbiAgICB9ICAgXHJcbiAgICBAZWxzZSBpZiAkdHlwZSA9PSBzZWN0aW9uIHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gdG9wLCAkYWNjZW50LCAkYWNjZW50X2FsdF9saWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gaWNvbl93aGl0ZSB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgJHdoaXRlLCB0cmFuc3BhcmVudGl6ZSgkd2hpdGUsIDEtMC45KSk7XHJcblxyXG4gICAgfVxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gbWVudSB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgJGFjY2VudF9saWdodCA1MCUsICRhY2NlbnQgNTAlLCAkYWNjZW50X2xpZ2h0IDEwMCUpLCAjQzRDNEM0O1xyXG4gICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxuICAgIEBlbHNlIGlmICR0eXBlID09IHRleHQge1xyXG4gICAgICAgIC8vIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICRvcmFuZ2UsICRwaW5rKTtcclxuICAgIH1cclxuICAgIEBlbHNlIGlmICR0eXBlID09IGxpc3Qge1xyXG4gICAgICAgIC8vIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAkb3JhbmdlLCAkcGluayk7XHJcbiAgICB9ICAgIFxyXG4gICAgQGVsc2UgaWYgJHR5cGUgPT0gdGl0bGUge1xyXG4gICAgICAgIC8vIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byB0b3AsICRvcmFuZ2UsICRwaW5rKTtcclxuXHJcbiAgICB9ICBcclxuXHJcblxyXG5cclxuICAgIC8vIGJhY2tncm91bmQtY2xpcDogdGV4dDtcclxuICAgIC8vIHRleHQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICAvLyAtd2Via2l0LXRleHQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICAvLyAtbW96LXRleHQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcblxyXG59XHJcblxyXG5cclxuXHJcbiIsIi8vIFRPRE86INC/0L7Rh9C10LzRgy3RgtC+INC90LUg0YDQsNCx0L7RgtCw0LXRgiDQutC+0LQg0LXRgdC70Lgg0LXQs9C+INC+0LHQtdGA0L3Rg9GC0Ywg0LIg0LzQuNC60YHQuNC9XHJcblxyXG5cclxuLy8gbWFrZSBhcnJheSAkZm9udHMgZnJvbSAkZGV2aWNlcyBhbmQgJGZvbnRfc2l6ZV9uYW1lc1xyXG4vLyBhcnJheSAkZm9udHMgdXNlZCBpbiBtaXhpbiBmb250X3NpemVfcHJvKCkge1xyXG5cclxuLy8gJGZvbnRzOiAoKTtcclxuXHJcbi8vIEBtaXhpbiBzZXRGb250c09iamVjdCAoJGZvbnRzKSB7XHJcblxyXG4gICAgQGVhY2ggJGZvbnRzX2RldmljZSwgJGZvbnRzX29iaiBpbiAkZGV2aWNlcyB7XHJcblxyXG4gICAgICAgICRmb250X3NpemVfbmFtZXNfZm9yX2RldmljZTogKCk7XHJcbiAgICAgICAgLy8g0J/QtdGA0LXQsdC40YDQsNC10LwgJGZvbnRfc2l6ZV9uYW1lc1xyXG4gICAgICAgIEBlYWNoICRuYW1lIGluICRmb250X3NpemVfbmFtZXMge1xyXG4gICAgICAgICAgICAvLyAkZm9udF9zaXplX25hbWVzX2Zvcl9kZXZpY2U6IFxyXG4gICAgICAgICAgICAgICAgLy8gbWFwLXNldCggJGZvbnRfc2l6ZV9uYW1lc19mb3JfZGV2aWNlLCAnbm90aWNlJywgMTIgKTtcclxuXHJcbiAgICAgICAgICAgIC8vICRpOiBpbmRleCgkZm9udF9zaXplX25hbWVzLCAkbmFtZSkgLSAxOyAvLyDRgi7Qui4g0L3Rg9C20L3QviDQvdCw0YfQuNC90LDRgtGMINGBIDBcclxuICAgICAgICAgICAgJGk6IGluZGV4KCRmb250X3NpemVfbmFtZXMsICRuYW1lKSAtICRmb250X3VuaXRzX25lZ2F0aXZlIC0gMTsgLy8g0YIu0LouINC90YPQttC90L4g0L3QsNGH0LjQvdCw0YLRjCDRgSAwLCDQuCDRg9GH0LjRgtGL0LLQsNGC0Ywg0LzQtdC90YzRiNC40LUg0YfQtdC8IGJhc2VcclxuICAgICAgICAgICAgLy8gJGZvbnRfc2l6ZV92YWx1ZTogbW9kdWxhci1zY2FsZSgkaSwgMWVtLCAkbWFqb3Itc2V2ZW50aCk7XHJcbiAgICAgICAgICAgICRmb250X3NpemVfdmFsdWU6IG1vZHVsYXItc2NhbGUoJGksIG1hcC1nZXQoJGZvbnRzX29iaiwgZm9udF9iYXNlKSwgbWFwLWdldCgkZm9udHNfb2JqLCBtc19jb2VmZikpO1xyXG4gICAgLy8gcmVtXHJcbiAgICAgICAgICAgIC8vICRmb250X3NpemVfdmFsdWU6IHJlbShzdHJpcC11bml0KCRmb250X3NpemVfdmFsdWUpLCBzdHJpcC11bml0KG1hcC1nZXQoJGZvbnRzX29iaiwgZm9udF9iYXNlKSkpO1xyXG5cclxuICAgICAgICAgICAgJGZvbnRfc2l6ZV9uYW1lc19mb3JfZGV2aWNlOiBcclxuICAgICAgICAgICAgICAgIG1hcC1zZXQoIFxyXG4gICAgICAgICAgICAgICAgICAgICRmb250X3NpemVfbmFtZXNfZm9yX2RldmljZSwgXHJcbiAgICAgICAgICAgICAgICAgICAgJG5hbWUsIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vINC30L3QsNGH0LXQvdC40LUg0YDQsNC30LzQtdGA0LAg0YjRgNC40YTRgtCwXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFwLWdldCgkZm9udHNfb2JqLCBtc19jb2VmZilcclxuICAgICAgICAgICAgICAgICAgICAkZm9udF9zaXplX3ZhbHVlXHJcbiAgICAgICAgICAgICAgICApOyAgICAgICAgICAgXHJcblxyXG4gICAgICAgIH0gLy8gZWFjaFxyXG5cclxuICAgICAgICBcclxuICAgICAgICAkZm9udHM6IG1hcC1zZXQoIFxyXG4gICAgICAgICAgICAkZm9udHMsXHJcbiAgICAgICAgICAgICRmb250c19kZXZpY2UsXHJcbiAgICAgICAgICAgICRmb250X3NpemVfbmFtZXNfZm9yX2RldmljZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIEBkZWJ1ZyBtYXAtZ2V0KCRmb250X3NpemVfbmFtZXNfZm9yX2RldmljZSwgbGFyZ2UpOyAvLyArXHJcbiAgICAgICAgLy8gQGRlYnVnIFwiRm9udHMgYXJyYXk6ICN7JGZvbnRzfVwiO1xyXG4gICAgICAgIC8vIEBkZWJ1ZyBcImZvbnRfc2l6ZV9uYW1lc19mb3JfZGV2aWNlIGFycmF5OiAjeyRmb250X3NpemVfbmFtZXNfZm9yX2RldmljZX1cIjtcclxuICAgICAgICAvLyBAZGVidWcgXCJGb250c19vbGRfXzogI3skZm9udHNfb2xkfVwiO1xyXG5cclxuICAgIH1cclxuICAgIFxyXG4vLyB9ICAgIFxyXG5cclxuLy8gQGRlYnVnIFwiRm9udHMgYXJyYXkgQkVGT1JFOiAjeyRmb250c31cIjtcclxuLy8gQGluY2x1ZGUgc2V0Rm9udHNPYmplY3QoJGZvbnRzKTtcclxuQGRlYnVnIFwiRm9udHMgYXJyYXkgQUZURVI6ICN7JGZvbnRzfVwiOyIsIi8qXHJcbiAqIEV4dGVuZHNcclxuKi9cclxuXHJcbiVmdWxsc2NyZWVue1xyXG4gICAgLy8gcG9zaXRpb246IHJlbGF0aXZlOyBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDB2aDsgICAgXHJcbn1cclxuJWZ1bGxoZWlnaHR7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7IGhlaWdodDogMTAwJTtcclxuICAgIC8vIHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMHZoOyAgICBcclxufVxyXG4lY2xlYXJmaXh7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgJjphZnRlcntcclxuICAgICAgICAvLyBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgIC8vIGRpc3BsYXk6IHRhYmxlO1xyXG4gICAgICAgIC8vIGZsb2F0OiBsZWZ0O1xyXG4gICAgICAgIC8vIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG59XHJcbiVzaGFkb3d7XHJcbiAgICAvLyBib3gtc2hhZG93OiAwIDAgOHB4IDBweCBvcGFjaWZ5KCRncmV5X3N1cGVyX2RhcmssIDAuMSk7IFxyXG4gICAgYm94LXNoYWRvdzogMCAwIDhweCAwcHggdHJhbnNwYXJlbnRpemUoJGdyZXlfc3VwZXJfZGFyaywgMC43NSk7IFxyXG59XHJcbiV0b3BfbGlzdF9pdGVtX2xpbmt7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGNvbG9yOiAkdGV4dDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICBmb250LXNpemU6ICRmb250X3NtYWxsO1xyXG4gICAgLy8gbGluZS1oZWlnaHQ6ICRsX2g7XHJcbiAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcclxuICAgIGNvbG9yOiAkZ3JleV9kYXJrO1xyXG59XHJcbiVsaW5rX2RlY29ye1xyXG4gICAgY29sb3I6ICR0ZXh0O1xyXG4gICAgLnRoZW1pZnl7XHJcblxyXG4gICAgfVxyXG4gICAgJjpob3ZlcntcclxuICAgICAgICBjb2xvcjogJGFjY2VudF9kYXJrO1xyXG4gICAgfVxyXG5cclxufVxyXG4lbGlua193aXRoX2ljb257XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gICAgaS50aGVtaWZ5eyAgICAgICAgICAgICAgIFxyXG4gICAgICAgIEBpbmNsdWRlIHBzZXVkb2VsZW1lbnRfcmlnaHRfdG9wKDAsIDUwJSk7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMSAqICRmYjsgZm9udC1zaXplOiA4NSU7XHJcbiAgICB9ICAgIFxyXG59XHJcblxyXG4lbmF2X3ByaW1hcnlfaXRlbSB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBhZGRpbmc6IDAuNzVlbSAyZW07XHJcbiAgICBmb250LXNpemU6ICRmYjtcclxuICAgIGxpbmUtaGVpZ2h0OiAkbF9oO1xyXG4gICAgbGV0dGVyLXNwYWNpbmc6ICRsX3M7XHJcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcztcclxufVxyXG5cclxuJWJvcmRlcl9mdWxsd2lkdGgge1xyXG5cclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gICAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSBwc2V1ZG9lbGVtZW50X2xlZnRfdG9wKC0xMDAlLCAxMDAlKTtcclxuICAgICAgICAgICAgd2lkdGg6IDMwMCU7XHJcbiAgICAgICAgICAgIGhlaWdodDogMXB4O1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JleV9zdXBlcl9saWdodDtcclxuICAgICAgICB9XHJcbn1cclxuXHJcblxyXG4ldHJhbnNpdGlvbiB7IC8vICtcclxuICAgIHRyYW5zaXRpb246IGFsbCAkdHJhbnNpdGlvbl9kdXJhdGlvbjtcclxufVxyXG4ldHJhbnNpdGlvbl9mYXN0IHtcclxuICAgIHRyYW5zaXRpb246IGFsbCAoJHRyYW5zaXRpb25fZHVyYXRpb24gLyAyKTtcclxufVxyXG5cclxuJWJvcmRlcl9jaXJjbGUgeyAvLyArXHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICAvLyBib3JkZXItcmFkaXVzOiA1JTtcclxufVxyXG5cclxuJWltYWdlX2xpbmtfaG92ZXIge1xyXG4gICAgb3BhY2l0eTogMC45O1xyXG59IiwiLypcclxuICogLkJhc2VcclxuICpcclxuKi9cclxuXHJcbi8vIEBpbXBvcnQgJ3ZhcnMnO1xyXG4vLyBAaW1wb3J0ICdtaXhpbnMnO1xyXG4vLyBAaW1wb3J0ICdjb21wb25lbnRzJztcclxuXHJcbi8qXHJcbiAqIEJhc2VcclxuKi9cclxuXHJcbmh0bWx7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbn1cclxuYm9keXtcclxuICAgIGZvbnQtc2l6ZSA6IGluaGVyaXQ7XHJcbiAgICAvLyBsaW5lLWhlaWdodCA6ICRsX2g7XHJcbiAgICBmb250LWZhbWlseSA6ICRmb250X2ZhbWlseTtcclxuICAgIGhlaWdodDogMTAwJTsgICBcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbn1cclxuXHJcbip7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG5he1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uIDogbm9uZTtcclxuICAgICY6aG92ZXJ7XHJcbiAgICAgICAgLy8gY29sb3I6ICRhY2NlbnRfZGFyazsgLy8g0JjQutC+0L3QutC4INCyINC60L3QvtC/0LrQsNGFIDxhPiDQt9Cw0LTQtdCy0LDQtdGCXHJcbiAgICB9XHJcbn1cclxudWwsIG9se1xyXG4gICAgbWFyZ2luOiAwIDsgcGFkZGluZzogMDtcclxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbn1cclxuaDEsIGgyLCBoMywgaDQsXHJcbi5oMSwgLmgyLCAuaDMsIC5oNHtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAkbF9oX2hlYWQ7XHJcbiAgICBmb250LWZhbWlseTogJGZvbnRfZmFtaWx5X2hlYWQ7XHJcbiAgICAvLyBmb250LXdlaWdodDogYm9sZDtcclxuICAgIC8vIGxldHRlci1zcGFjaW5nOiAkbF9zX2JpZztcclxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICBjb2xvcjogJHRleHQ7XHJcbn1cclxuaDEsIC5oMXtcclxuICAgIGZvbnQtc2l6ZTogJGZvbnRfaDE7XHJcbiAgICBsZXR0ZXItc3BhY2luZzogJGxfc19iaWc7XHJcbn1cclxuaDIsIC5oMntcclxuICAgIGZvbnQtc2l6ZTogJGZvbnRfaDI7XHJcbn1cclxuaDMsIC5oM3tcclxuICAgIGZvbnQtc2l6ZTogJGZvbnRfaDM7XHJcbn1cclxuaDQsIC5oNHtcclxuICAgIGZvbnQtc2l6ZTogJGZvbnRfaDQ7XHJcbn1cclxuXHJcbnB7XHJcbiAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMWVtO1xyXG4gICAgZm9udC1zaXplOiAkZmI7XHJcbiAgICBsaW5lLWhlaWdodDogJGxfaDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcblxyXG59XHJcbmltZ3tcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiBhdXRvO1xyXG59XHJcblxyXG5jb2RlIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50aXplKCRibGFjaywgMS0wLjEpO1xyXG59XHJcblxyXG4udGhlbWlmeTpiZWZvcmUsXHJcbi50aGVtaWZ5OmFmdGVye1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi5zZWN0aW9uLWNvbXBvbmVudCB7XHJcbiAgICBtYXJnaW46IDIgKiAkbF9oIDA7XHJcbn1cclxuIiwiLypcclxuIFxyXG4qL1xyXG5cclxuLyogQi4gUGx1Z2luc1xyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqICBcclxuKi9cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8gQGltcG9ydCAnb3dsLWNhcm91c2VsL19vd2wtY2Fyb3VzZWwuc2Nzcyc7IC8vIFwiLVwiIC0g0L3QtSDQsdGD0LTQtdGCINGA0LDQsdC+0YLQsNGC0Yw/XHJcbi8vIEBpbXBvcnQgJ3N3aXBlci9zd2lwZXInOyAvL1xyXG4vLyBAaW1wb3J0ICd3cGNmNy93cGNmNyc7IC8vIiwiLy8gVUkgQ29tcG9uZW50c1xyXG5cclxuLy8gQGltcG9ydCAnLi4vdmlldy9jb21wb25lbnRzL2J1dHRvbnMvYnV0dG9ucyc7ICAgXHJcbi8vIEBpbXBvcnQgJy4uL3ZpZXcvY29tcG9uZW50cy9zb2NpYWwtbGlua3Mvc29jaWFsLWxpbmtzJzsgICAgIC8vXHJcbi8vIEBpbXBvcnQgJy4uL3ZpZXcvY29tcG9uZW50cy9hY2NvcmRlb24vYWNjb3JkZW9uJzsgICAgIC8vXHJcbi8vIEBpbXBvcnQgJy4uL3ZpZXcvY29tcG9uZW50cy9yYXRpbmcvcmF0aW5nJzsgICAgIC8vXHJcbi8vIEBpbXBvcnQgJy4uL3ZpZXcvY29tcG9uZW50cy9wYWdpbmF0aW9uL3BhZ2luYXRpb24nOyAgICAgLy9cclxuLy8gQGltcG9ydCAnLi4vdmlldy9jb21wb25lbnRzL2Zvcm1zL2Zvcm1zJzsgICAgIC8vXHJcbi8vIEBpbXBvcnQgJy4uL3ZpZXcvY29tcG9uZW50cy9zZWFyY2gvc2VhcmNoJzsgICAgIC8vXHJcbi8vIEBpbXBvcnQgJy4uL3ZpZXcvY29tcG9uZW50cy90b29scy90b29scyc7ICAgICAvL1xyXG4vLyBAaW1wb3J0ICcuLi92aWV3L2NvbXBvbmVudHMvdGFicy90YWJzJzsgICAgIC8vXHJcbi8vIEBpbXBvcnQgJy4uL3ZpZXcvY29tcG9uZW50cy9tZW51L21lbnUtbWFpbic7ICAgICAvL1xyXG4vLyBAaW1wb3J0ICcuLi92aWV3L2NvbXBvbmVudHMvbWVudS9tZW51LXRvcCc7ICAgICAvL1xyXG4vLyBAaW1wb3J0ICcuLi92aWV3L2NvbXBvbmVudHMvbWVudS9tZW51LWZvb3Rlcic7ICAgICAvL1xyXG5cclxuLy8gLS0gQGltcG9ydCAnY29tcG9uZW50cy9uZXdzbGV0dGVyJzsgICAgIC8vXHJcbi8vIC0tIEBpbXBvcnQgJ2NvbXBvbmVudHMvc3Vic2NyaWJlJzsgICAgIC8vXHJcblxyXG5cclxuXHJcblxyXG4vLyBCbG9ja3NcclxuXHJcbi8vIEBpbXBvcnQgJy4uL3ZpZXcvYmxvY2tzL3NsaWRlci1tYWluL3N0eWxlcy9zbGlkZXItbWFpbic7ICAgICAvL1xyXG5AaW1wb3J0ICcuLi92aWV3L2Jsb2Nrcy9uZXdzL25ld3MnOyAgICAgLy9cclxuLy8gQGltcG9ydCAnLi4vdmlldy9ibG9ja3MvYWN0aW9ucy9zdHlsZXMvYWN0aW9ucyc7ICAgICAvL1xyXG4vLyBAaW1wb3J0ICcuLi92aWV3L2Jsb2Nrcy9jYXRlZ29yaWVzL3N0eWxlcy9jYXRlZ29yaWVzJzsgICAgIC8vXHJcbi8vIEBpbXBvcnQgJy4uL3ZpZXcvYmxvY2tzL2VkZ2VzL3N0eWxlcy9lZGdlcyc7ICAgICAvL1xyXG4vLyBAaW1wb3J0ICcuLi92aWV3L2Jsb2Nrcy9icmFuZHMvc3R5bGVzL2JyYW5kcyc7ICAgICAvL1xyXG4vLyBAaW1wb3J0ICcuLi92aWV3L2Jsb2Nrcy9yZXZpZXdzL3N0eWxlcy9yZXZpZXdzJzsgICAgIC8vXHJcblxyXG4vLyBAaW1wb3J0ICdibG9ja3MvdXNlcnMnOyAgICAgLy9cclxuLy8gQGltcG9ydCAnYmxvY2tzL21lbnUtbWFpbic7ICAgICAvL1xyXG5cclxuLy8gQGltcG9ydCAnbWVudS1tb2JpbGUnOyAgICAgLy9cclxuLy8gQGltcG9ydCAnYmxvY2tzL3NsaWRlcic7ICAgICAvL1xyXG4vLyBAaW1wb3J0ICdibG9ja3MvcHJvZHVjdHMnOyAgICAgLy9cclxuLy8gQGltcG9ydCAnYmxvY2tzL2NvbnRhY3RzJzsgICAgIC8vXHJcblxyXG5cclxuXHJcblxyXG4vLyBTcGVjaWFsXHJcbi8vIEBpbXBvcnQgJ21peGlucy9zcGVjaWFsL2lwaG9uZSc7ICAgICAvLyIsIi8qIC4gbmV3c1xyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqXHJcbiovXHJcblxyXG4vKlxyXG4gKiBCbG9ja3MgdmFyc1xyXG4gKiBCbG9jayBhbmQgZWxlbWVudHMgc3R5bGVzXHJcbiAqIE90aGVyIHN0eWxlcyAoTm90IGJsb2NrIGVsZW1zLCBidXQgYXNzb2NpYXRlZCB3aXRoIGl0KVxyXG4gKiBNZWRpYSBydWxlcyAtIE1vYmlsZSBGaXJzdCwgdXNlIG1pbi13aWR0aFxyXG4gKiBTdGF0ZXNcclxuICovXHJcblxyXG4vLyBCbG9jayB2YXJzXHJcbiRibG9ja25hbWVJdGVtUGFkZGluZ3M6IDIwcHg7XHJcbi8vICRibG9ja25hbWVEZWNvckJnOiAkZ2xvYmFsQ29sb3I7XHJcblxyXG4vLyBCbG9jayBhbmQgZWxlbWVudHNcclxuLm5ld3N7XHJcblxyXG4gICAgJl9faXRlbXtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAvLyBAaW5jbHVkZSBoZWlnaHRfbGV2ZWxpbmcoJ2Z1bGxoZWlnaHQnKTtcclxuICAgICAgICAvLyBAZXh0ZW5kICVzaGFkb3dfY2FyZDtcclxuICAgICAgICAgXHJcbiAgICAgICAgLy8gVEVTVCBERVY6IGN1dF9jb3JuZXJzKClcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGFjY2VudDtcclxuICAgICAgICBwYWRkaW5nOiAxZW07XHJcbiAgICAgICAgLy8gQGluY2x1ZGUgY3V0X2Nvcm5lcnMoMzBweCwgJHdoaXRlKTtcclxuXHJcbiAgICAgICAgLy8gQGluY2x1ZGUgY3JvcF9jb3JuZXJzKCAoICgnbGVmdCB0b3AnLCAxMHB4LCAkd2hpdGUpLCAoJ3JpZ2h0IHRvcCcsIDIwcHgsICR3aGl0ZSkgKSApO1xyXG5cclxuICAgICAgICAvLyBAaW5jbHVkZSBjdXRlZF9jb3JuZXJzKCAoJ2xlZnQgdG9wJywgMTBweCwgJHdoaXRlKSwgKCdyaWdodCB0b3AnLCAyMHB4LCAkd2hpdGUpICApO1xyXG4gICAgICAgIC8vIEBpbmNsdWRlIGN1dGVkX2Nvcm5lcnMoIDEwcHgsICgncmlnaHQgdG9wJywgMjBweCwgJHdoaXRlKSAgKTtcclxuICAgICAgICAvLyBAaW5jbHVkZSBjdXRlZF9jb3JuZXJzKCAxMHB4ICApO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICAmLW91dGVyOm50aC1jaGlsZCgxKSAmIHtcclxuICAgICAgICAgICAgLy8gQGluY2x1ZGUgY3V0X2Nvcm5lcnMoMzBweCwgJGdyZXlfbGlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmLW91dGVyOm50aC1jaGlsZCgyKSAmIHtcclxuICAgICAgICAgICAgLy8gQGluY2x1ZGUgY3V0ZWRfY29ybmVycyggKCdsZWZ0IHRvcCcsIDEwcHgsICRncmV5X2xpZ2h0KSwgKCdyaWdodCB0b3AnLCAyMHB4LCAkZ3JleV9saWdodCkgKTtcclxuICAgICAgICAgICAgLy8gQGluY2x1ZGUgY3V0ZWRfY29ybmVycyggKCdyaWdodCB0b3AnLCAzMHB4LCAkZ3JleV9saWdodCksICgncmlnaHQgdG9wJywgMjBweCwgJGdyZXlfbGlnaHQpICk7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIGN1dGVkX2Nvcm5lcnMoICgncmlnaHQgdG9wJywgMzBweCwgJGdyZXlfbGlnaHQpLCAoJ3JpZ2h0IGJvdHRvbScsIDIwcHgsICRncmV5X2xpZ2h0KSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgJi1pbWFnZXtcclxuICAgICAgICAgICAgLy8gbWFyZ2luLWJvdHRvbTogIDEvMiokbF9oX2Jhc2U7XHJcbiAgICAgICAgICAgIC8vIHBvc2l0aW9uOiByZWxhdGl2ZTsgXHJcbiAgICAgICAgICAgIC8vIHBhZGRpbmctYm90dG9tOiA1NiU7XHJcbiAgICAgICAgICAgIC8vIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgICAgIGltZ3tcclxuICAgICAgICAgICAgICAgIC8vIEBpbmNsdWRlIGltYWdlX2NlbnRlcl9jb3ZlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWNvbnRlbnQge1xyXG4gICAgICAgIC8vICAgICBAaW5jbHVkZSBoX3JoeXRtKCdjYXJkJywgJGZiKTtcclxuICAgICAgICAvLyAgICAgcGFkZGluZy10b3A6IDEvMiokbF9oX2Jhc2U7XHJcbiAgICAgICAgLy8gICAgIHBhZGRpbmctYm90dG9tOiAxLzIqJGxfaF9iYXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi10aXRsZXtcclxuICAgICAgICAgICAgLy8gQGluY2x1ZGUgZm9udF9zaXplX3BybygnaDQnKTtcclxuICAgICAgICAgICAgLy8gQGluY2x1ZGUgaGVpZ2h0X2xldmVsaW5nKCdoZWFkaW5nJyk7XHJcbiAgICAgICAgICAgIC8vIGxldHRlci1zcGFjaW5nOiAkbF9zO1xyXG5cclxuICAgICAgICAgICAgYSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb2xvcjogJHRleHQ7XHJcbiAgICAgICAgICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb2xvcjogJGFjY2VudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAmLXRleHR7XHJcbiAgICAgICAgICAgIC8vIEBpbmNsdWRlIGZvbnRfc2l6ZV9wcm8oJ2Jhc2UnKTtcclxuICAgICAgICAgICAgLy8gQGluY2x1ZGUgaGVpZ2h0X2xldmVsaW5nKCd0ZXh0Jyk7XHJcbiAgICAgICAgICAgIC8vIEBpbmNsdWRlIHZfcmh5dG0oJ3RleHQnLCAkbF9oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJi1kYXRle1xyXG4gICAgICAgICAgICAvLyBkaXNwbGF5OiBibG9jazsgXHJcbiAgICAgICAgICAgIC8vIEBpbmNsdWRlIGZvbnRfc2l6ZSgnc21hbGwnKTtcclxuICAgICAgICAgICAgLy8gQGluY2x1ZGUgZm9udF9zaXplX3BybygnYmFzZScpO1xyXG4gICAgICAgICAgICAvLyBAaW5jbHVkZSBoZWlnaHRfbGV2ZWxpbmcoJ2Jhc2UnKTtcclxuICAgICAgICAgICAgLy8gQGluY2x1ZGUgdHlwbygnZGF0ZScpO1xyXG4gICAgICAgICAgICAvLyBjb2xvcjogJGdyYXktYmFzZTtcclxuICAgICAgICAgICAgY29sb3I6IGdyZWVuO1xyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEJsb2NrcyBNb2RpZmljYXRvcnNcclxuICAgICYtLWNhcmQgJl9faXRlbSB7XHJcbiAgICAgICAgJi10aXRsZSB7XHJcbiAgICAgICAgICAgIC8vIE92dmVycmlkZSBydWxlc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBJbmhlcml0YW5jZSAoZm9yIGNvbXBvbmVudHMpXHJcbiAgICAub3RoZXJibG9jayB7XHJcbiAgICAgICAgLy8gT3Z2ZXJyaWRlIHJ1bGVzXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIE5vdCBibG9jayBlbGVtcywgYnV0IGFzc29jaWF0ZWQgd2l0aCBpdFxyXG4ubmV3cy1vdXRlcntcclxuXHJcbn1cclxuXHJcbi8vIE1lZGlhIHJ1bGVzIC0gTW9iaWxlIEZpcnN0LCB1c2UgbWluLXdpZHRoXHJcbi8vIEBtZWRpYSAoIG1pbi13aWR0aDogJHNjcmVlbi1zbS1taW4gKSB7XHJcblxyXG4vLyAgICAgLmJsb2NrbmFtZSB7XHJcbi8vICAgICAgICAgLy8gZXRjLi5cclxuLy8gICAgIH0gIFxyXG4vLyB9XHJcblxyXG4vLyBTdGF0ZXMgIChEZWZhdWx0LCBBY3RpdmUsIGFuZCBtb3JlIGJ5IEpTIGxvZ2ljIClcclxuLy8gLmJsb2NrbmFtZSB7XHJcbi8vICAgICBkaXNwbGF5OiBub25lO1xyXG4vLyB9XHJcbi8vIC5ibG9ja25hbWUuYWN0aXZlIHtcclxuLy8gICAgIGRpc3BsYXk6IG5vbmU7XHJcbi8vIH0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBOzs7Ozs7OztHQVFHO0FFa0JIOzs7Ozs7RUFNRTtBK0NsQ0Y7Ozs7O0VBS0U7QUFrQ0UsVUFBVTtFQUNOLFdBQVcsRUFBRSxRQUFZO0VBR3pCLEdBQUcsRUFQZ0Isd0JBQWlDLENBQUMsYUFBc0IsRUFBeEQseUJBQWlDLENBQUMsZUFBc0IsRUFBeEQsd0JBQWlDLENBQUMsY0FBc0IsRUFBeEQsdUJBQWlDLENBQUMsa0JBQXNCLEVBQXhELDhCQUFpQyxDQUFDLGFBQXNCOztBRXBDbkY7Ozs7Ozs7Ozs7OztFQVlFO0FBR0Y7Ozs7RUFJRTtBQVlGLGNBQWM7QUNoQlYsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLO0VBU3BCLEFBQUEsVUFBVSxDQUFDO0lBQ1AsWUFBWSxFQUFFLElBQXNCO0lBQ3BDLGFBQWEsRUFBRSxJQUFzQixHQUN4QztFQUNELEFBQUEsSUFBSTtFQUNKLFNBQVM7RUFDVCxTQUFTLENBQUM7SUFDTixXQUFXLEVBQUUsS0FBdUI7SUFDcEMsWUFBWSxFQUFFLEtBQXVCLEdBQ3hDO0dBR0csQUFBQSxBQUFBLEtBQUMsRUFBTyxLQUFLLEFBQVosRUFBMkI7SUFFeEIsWUFBWSxFQUFFLElBQXNCO0lBQ3BDLGFBQWEsRUFBRSxJQUFzQixHQUN4QztHQUpELEFBQUEsQUFBQSxLQUFDLEVBQU8sS0FBSyxBQUFaLEVBQTJCO0lBRXhCLFlBQVksRUFBRSxJQUFzQjtJQUNwQyxhQUFhLEVBQUUsSUFBc0IsR0FDeEM7R0FKRCxBQUFBLEFBQUEsS0FBQyxFQUFPLEtBQUssQUFBWixFQUEyQjtJQUV4QixZ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QVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsSUFBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsSUFBYSxHQUM5QjtFQVVELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsWUFBWSxDQUFnQjtJQUN4QixLQUFLLEVBSlQsRUFBQyxHQUtBO0VBRkQsQUFBQSxZQUFZLENBQWdCO0lBQ3hCLEtBQUssRUFKVCxFQUFDLEdBS0E7RUFGRCxBQUFBLFlBQVksQ0FBZ0I7SUFDeEIsS0FBSyxFQUpULEVBQUMsR0FLQTs7QUEzRFQsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLO0VBNkJwQixBQUFBLFlBQVksQ0FBYTtJQUNyQixXQUFXLEVBQUcsQ0FBQyxHQUNsQjtFQU1HLEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsUUFBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsUUFBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsSUFBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsSUFBYSxHQUM5QjtFQVVELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsWUFBWSxDQUFnQjtJQUN4QixLQUFLLEVBSlQsRUFBQyxHQUtBO0VBRkQsQUFBQSxZQUFZLENBQWdCO0lBQ3hCLEtBQUssRUFKVCxFQUFDLEdBS0E7RUFGRCxBQUFBLFlBQVksQ0FBZ0I7SUFDeEIsS0FBSyxFQUpULEVBQUMsR0FLQTs7QUEzRFQsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLO0VBNkJwQixBQUFBLFlBQVksQ0FBYTtJQUNyQixXQUFXLEVBQUcsQ0FBQyxHQUNsQjtFQU1HLEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsUUFBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsUUFBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsSUFBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsSUFBYSxHQUM5QjtFQVVELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsWUFBWSxDQUFnQjtJQUN4QixLQUFLLEVBSlQsRUFBQyxHQUtBO0VBRkQsQUFBQSxZQUFZLENBQWdCO0lBQ3hCLEtBQUssRUFKVCxFQUFDLEdBS0E7RUFGRCxBQUFBLFlBQVksQ0FBZ0I7SUFDeEIsS0FBSyxFQUpULEVBQUMsR0FLQTs7QUEzRFQsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNO0VBNkJyQixBQUFBLFlBQVksQ0FBYTtJQUNyQixXQUFXLEVBQUcsQ0FBQyxHQUNsQjtFQU1HLEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsUUFBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsUUFBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsSUFBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsSUFBYSxHQUM5QjtFQVVELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VBRkQsQUFBQSxXQUFXLENBQWlCO0lBQ3hCLEtBQUssRUFKVCxDQUFDLEdBS0E7RUFGRCxBQUFBLFdBQVcsQ0FBaUI7SUFDeEIsS0FBSyxFQUpULENBQUMsR0FLQTtFQUZELEFBQUEsWUFBWSxDQUFnQjtJQUN4QixLQUFLLEVBSlQsRUFBQyxHQUtBO0VBRkQsQUFBQSxZQUFZLENBQWdCO0lBQ3hCLEtBQUssRUFKVCxFQUFDLEdBS0E7RUFGRCxBQUFBLFlBQVksQ0FBZ0I7SUFDeEIsS0FBSyxFQUpULEVBQUMsR0FLQTs7QUEzRFQsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNO0VBNkJyQixBQUFBLFlBQVksQ0FBYTtJQUNyQixXQUFXLEVBQUcsQ0FBQyxHQUNsQjtFQU1HLEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsUUFBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsUUFBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsS0FBSyxDQUFpQjtJQUdsQixLQUFLLEVBQUUsR0FBYSxHQUN2QjtFQUVELEFBQUEsWUFBWSxDQUFpQjtJQUd6QixXQUFXLEVBQUcsR0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsU0FBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsU0FBYSxHQUM5QjtFQVZELEFBQUEsTUFBTSxDQUFnQjtJQUdsQixLQUFLLEVBQUUsSUFBYSxHQUN2QjtFQUVELEFBQUEsYUFBYSxDQUFnQjtJQUd6QixXQUFXLEVBQUcsSUFBYSxHQUM5QjtFQVVELEFBQUEsV0FBVyxDQUFpQjtJQUN4QixLQUFLLEVBSlQsQ0FBQyxHQUtBO0VB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VSxFQUFHLEtBQUssR0FBSTtFQUMvQyxBQUFBLFlBQVksQ0FBWTtJQUFFLFVBQVUsRUFBRyxNQUFNLEdBQUk7RUFDakQsQUFBQSxhQUFhLENBQVk7SUFBRSxVQUFVLEVBQUcsT0FBTyxHQUFJOztBQUx2RCxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUs7RUFFcEIsQUFBQSxVQUFVLENBQVk7SUFBRSxVQUFVLEVBQUcsSUFBSSxHQUFJO0VBQzdDLEFBQUEsV0FBVyxDQUFZO0lBQUUsVUFBVSxFQUFHLEtBQUssR0FBSTtFQUMvQyxBQUFBLFlBQVksQ0FBWTtJQUFFLFVBQVUsRUFBRyxNQUFNLEdBQUk7RUFDakQsQUFBQSxhQUFhLENBQVk7SUFBRSxVQUFVLEVBQUcsT0FBTyxHQUFJOztBQUx2RCxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUs7RUFFcEIsQUFBQSxVQUFVLENBQVk7SUFBRSxVQUFVLEVBQUcsSUFBSSxHQUFJO0VBQzdDLEFBQUEsV0FBVyxDQUFZO0lBQUUsVUFBVSxFQUFHLEtBQUssR0FBSTtFQUMvQyxBQUFBLFlBQVksQ0FBWTtJQUFFLFVBQVUsRUFBRyxNQUFNLEdBQUk7RUFDakQsQUFBQSxhQUFhLENBQVk7SUFBRSxVQUFVLEVBQUcsT0FBTyxHQUFJOztBQUx2RCxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU07RUFFckIsQUFBQSxVQUFVLENBQVk7SUFBRSxVQUFVLEVBQUcsSUFBSSxHQUFJO0VBQzdDLEFBQUEsV0FBVyxDQUFZO0lBQUUsVUFBVSxFQUFHLEtBQUssR0FBSTtFQUMvQyxBQUFBLFlBQVksQ0FBWTtJQUFFLFVBQVUsRUFBRyxNQUFNLEdBQUk7RUFDakQsQUFBQSxhQUFhLENBQVk7SUFBRSxVQUFVLEVBQUcsT0FBTyxHQUFJOztBQUx2RCxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU07RUFFckIsQUFBQSxVQUFVLENBQVk7SUFBRSxVQUFVLEVBQUcsSUFBSSxHQUFJO0VBQzdDLEFBQUEsV0FBVyxDQUFZO0lBQUUsVUFBVSxFQUFHLEtBQUssR0FBSTtFQUMvQyxBQUFBLFlBQVksQ0FB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 */
